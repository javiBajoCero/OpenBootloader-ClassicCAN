
OpenBootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000630c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080064e4  080064e4  000074e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006554  08006554  00008224  2**0
                  CONTENTS
  4 .ARM          00000000  08006554  08006554  00008224  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006554  08006554  00008224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006554  08006554  00007554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006558  08006558  00007558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000224  20000000  0800655c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000100c  20000224  08006780  00008224  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001230  08006780  00008230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008224  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000efad  00000000  00000000  00008254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003be4  00000000  00000000  00017201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001128  00000000  00000000  0001ade8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c95  00000000  00000000  0001bf10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035c89  00000000  00000000  0001cba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f8af  00000000  00000000  0005282e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00167e10  00000000  00000000  000720dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d9eed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004190  00000000  00000000  001d9f30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  001de0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000224 	.word	0x20000224
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080064cc 	.word	0x080064cc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000228 	.word	0x20000228
 8000214:	080064cc 	.word	0x080064cc

08000218 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800021c:	f3bf 8f4f 	dsb	sy
}
 8000220:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000222:	4b06      	ldr	r3, [pc, #24]	@ (800023c <__NVIC_SystemReset+0x24>)
 8000224:	68db      	ldr	r3, [r3, #12]
 8000226:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800022a:	4904      	ldr	r1, [pc, #16]	@ (800023c <__NVIC_SystemReset+0x24>)
 800022c:	4b04      	ldr	r3, [pc, #16]	@ (8000240 <__NVIC_SystemReset+0x28>)
 800022e:	4313      	orrs	r3, r2
 8000230:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000232:	f3bf 8f4f 	dsb	sy
}
 8000236:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000238:	bf00      	nop
 800023a:	e7fd      	b.n	8000238 <__NVIC_SystemReset+0x20>
 800023c:	e000ed00 	.word	0xe000ed00
 8000240:	05fa0004 	.word	0x05fa0004

08000244 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
             timer for example or other time source), keeping in mind that Time base
             duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
             handled in milliseconds basis.
       - Low Level Initialization
     */
  HAL_Init();
 8000248:	f001 f8cc 	bl	80013e4 <HAL_Init>

  /* Configure the System clock */
  SystemClock_Config();
 800024c:	f000 f80c 	bl	8000268 <SystemClock_Config>
  MX_GPIO_Init();
 8000250:	f000 f862 	bl	8000318 <MX_GPIO_Init>
  OpenBootloader_Init();
 8000254:	f000 f950 	bl	80004f8 <OpenBootloader_Init>

  /* Infinite loop */
  while (1)
  {

    OpenBootloader_ProtocolDetection();
 8000258:	f000 f9a8 	bl	80005ac <OpenBootloader_ProtocolDetection>
    toggleLEDnonblocking(500);
 800025c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000260:	f000 f88a 	bl	8000378 <toggleLEDnonblocking>
    OpenBootloader_ProtocolDetection();
 8000264:	bf00      	nop
 8000266:	e7f7      	b.n	8000258 <main+0x14>

08000268 <SystemClock_Config>:
  * @brief  System Clock Configuration
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b094      	sub	sp, #80	@ 0x50
 800026c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	605a      	str	r2, [r3, #4]
 8000278:	609a      	str	r2, [r3, #8]
 800027a:	60da      	str	r2, [r3, #12]
 800027c:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	2238      	movs	r2, #56	@ 0x38
 8000282:	2100      	movs	r1, #0
 8000284:	4618      	mov	r0, r3
 8000286:	f006 f8f5 	bl	8006474 <memset>

  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800028a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800028e:	f003 f84f 	bl	8003330 <HAL_PWREx_ControlVoltageScaling>

  /* Activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 8000292:	2302      	movs	r3, #2
 8000294:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000296:	2340      	movs	r3, #64	@ 0x40
 8000298:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 800029a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800029e:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 80002a0:	2302      	movs	r3, #2
 80002a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
 80002a4:	2302      	movs	r3, #2
 80002a6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM            = RCC_PLLM_DIV2;
 80002a8:	2302      	movs	r3, #2
 80002aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN            = 20;
 80002ac:	2314      	movs	r3, #20
 80002ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP            = RCC_PLLP_DIV2;
 80002b0:	2302      	movs	r3, #2
 80002b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ            = RCC_PLLQ_DIV8;
 80002b4:	2308      	movs	r3, #8
 80002b6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR            = RCC_PLLR_DIV2;
 80002b8:	2302      	movs	r3, #2
 80002ba:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	4618      	mov	r0, r3
 80002c0:	f003 f95c 	bl	800357c <HAL_RCC_OscConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x66>
  {
    NVIC_SystemReset();
 80002ca:	f7ff ffa5 	bl	8000218 <__NVIC_SystemReset>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
  clocks dividers */
  RCC_ClkInitStruct.ClockType           = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 80002ce:	230f      	movs	r3, #15
 80002d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource        = RCC_SYSCLKSOURCE_PLLCLK;
 80002d2:	2303      	movs	r3, #3
 80002d4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider       = RCC_HCLK_DIV1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider      = RCC_HCLK_DIV2;
 80002da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider      = RCC_HCLK_DIV1;
 80002e0:	2300      	movs	r3, #0
 80002e2:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002e4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80002e8:	2102      	movs	r1, #2
 80002ea:	4618      	mov	r0, r3
 80002ec:	f003 fc58 	bl	8003ba0 <HAL_RCC_ClockConfig>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0x92>
  {
    NVIC_SystemReset();
 80002f6:	f7ff ff8f 	bl	8000218 <__NVIC_SystemReset>
  }
}
 80002fa:	bf00      	nop
 80002fc:	3750      	adds	r7, #80	@ 0x50
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}

08000302 <System_DeInit>:

void System_DeInit(void)
{
 8000302:	b580      	push	{r7, lr}
 8000304:	af00      	add	r7, sp, #0
  HAL_RCC_DeInit();
 8000306:	f003 f8b7 	bl	8003478 <HAL_RCC_DeInit>
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}

0800030e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800030e:	b480      	push	{r7}
 8000310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  while (1)
 8000312:	bf00      	nop
 8000314:	e7fd      	b.n	8000312 <Error_Handler+0x4>
	...

08000318 <MX_GPIO_Init>:
  }
}
#endif

void MX_GPIO_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b086      	sub	sp, #24
 800031c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	2200      	movs	r2, #0
 8000322:	601a      	str	r2, [r3, #0]
 8000324:	605a      	str	r2, [r3, #4]
 8000326:	609a      	str	r2, [r3, #8]
 8000328:	60da      	str	r2, [r3, #12]
 800032a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800032c:	4b11      	ldr	r3, [pc, #68]	@ (8000374 <MX_GPIO_Init+0x5c>)
 800032e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000330:	4a10      	ldr	r2, [pc, #64]	@ (8000374 <MX_GPIO_Init+0x5c>)
 8000332:	f043 0301 	orr.w	r3, r3, #1
 8000336:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000338:	4b0e      	ldr	r3, [pc, #56]	@ (8000374 <MX_GPIO_Init+0x5c>)
 800033a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800033c:	f003 0301 	and.w	r3, r3, #1
 8000340:	603b      	str	r3, [r7, #0]
 8000342:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000344:	2200      	movs	r2, #0
 8000346:	2120      	movs	r1, #32
 8000348:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800034c:	f002 ffae 	bl	80032ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000350:	2320      	movs	r3, #32
 8000352:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000354:	2301      	movs	r3, #1
 8000356:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000358:	2300      	movs	r3, #0
 800035a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035c:	2300      	movs	r3, #0
 800035e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000360:	1d3b      	adds	r3, r7, #4
 8000362:	4619      	mov	r1, r3
 8000364:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000368:	f002 fe1e 	bl	8002fa8 <HAL_GPIO_Init>

}
 800036c:	bf00      	nop
 800036e:	3718      	adds	r7, #24
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}
 8000374:	40021000 	.word	0x40021000

08000378 <toggleLEDnonblocking>:

void toggleLEDnonblocking(const uint32_t toggle_interval){
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
    // Non-blocking LED toggle logic
    if ((HAL_GetTick() - previous_tick) >= toggle_interval)
 8000380:	f001 f894 	bl	80014ac <HAL_GetTick>
 8000384:	4602      	mov	r2, r0
 8000386:	4b0a      	ldr	r3, [pc, #40]	@ (80003b0 <toggleLEDnonblocking+0x38>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	1ad3      	subs	r3, r2, r3
 800038c:	687a      	ldr	r2, [r7, #4]
 800038e:	429a      	cmp	r2, r3
 8000390:	d809      	bhi.n	80003a6 <toggleLEDnonblocking+0x2e>
    {
        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000392:	2120      	movs	r1, #32
 8000394:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000398:	f002 ffa0 	bl	80032dc <HAL_GPIO_TogglePin>
        previous_tick = HAL_GetTick();  // Update the previous tick
 800039c:	f001 f886 	bl	80014ac <HAL_GetTick>
 80003a0:	4603      	mov	r3, r0
 80003a2:	4a03      	ldr	r2, [pc, #12]	@ (80003b0 <toggleLEDnonblocking+0x38>)
 80003a4:	6013      	str	r3, [r2, #0]
    }
}
 80003a6:	bf00      	nop
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	20000240 	.word	0x20000240

080003b4 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b085      	sub	sp, #20
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80003bc:	4b08      	ldr	r3, [pc, #32]	@ (80003e0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80003be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80003c0:	4907      	ldr	r1, [pc, #28]	@ (80003e0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4313      	orrs	r3, r2
 80003c6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80003c8:	4b05      	ldr	r3, [pc, #20]	@ (80003e0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80003ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	4013      	ands	r3, r2
 80003d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003d2:	68fb      	ldr	r3, [r7, #12]
}
 80003d4:	bf00      	nop
 80003d6:	3714      	adds	r7, #20
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr
 80003e0:	40021000 	.word	0x40021000

080003e4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b085      	sub	sp, #20
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80003ec:	4b08      	ldr	r3, [pc, #32]	@ (8000410 <LL_APB1_GRP1_EnableClock+0x2c>)
 80003ee:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80003f0:	4907      	ldr	r1, [pc, #28]	@ (8000410 <LL_APB1_GRP1_EnableClock+0x2c>)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	4313      	orrs	r3, r2
 80003f6:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80003f8:	4b05      	ldr	r3, [pc, #20]	@ (8000410 <LL_APB1_GRP1_EnableClock+0x2c>)
 80003fa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	4013      	ands	r3, r2
 8000400:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000402:	68fb      	ldr	r3, [r7, #12]
}
 8000404:	bf00      	nop
 8000406:	3714      	adds	r7, #20
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr
 8000410:	40021000 	.word	0x40021000

08000414 <HAL_MspInit>:
  * @brief  Initializes the Global MSP.
  * @param  None
  * @retval None
  */
void HAL_MspInit(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
}
 8000418:	bf00      	nop
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
	...

08000424 <HAL_FDCAN_MspInit>:
  * @brief This function configures FDCAN used hardware resources
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef *hfdcan)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b09e      	sub	sp, #120	@ 0x78
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct;

  RCC_PeriphCLKInitTypeDef RCC_PeriphClkInit;
 
  /* Select PLL1Q as source of FDCANx clock */
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800042c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000430:	60fb      	str	r3, [r7, #12]
  RCC_PeriphClkInit.FdcanClockSelection  = RCC_FDCANCLKSOURCE_PLL;
 8000432:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000436:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit);
 8000438:	f107 030c 	add.w	r3, r7, #12
 800043c:	4618      	mov	r0, r3
 800043e:	f003 fd93 	bl	8003f68 <HAL_RCCEx_PeriphCLKConfig>

  /* Enable FDCANx clock */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000442:	2002      	movs	r0, #2
 8000444:	f7ff ffb6 	bl	80003b4 <LL_AHB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_FDCAN);
 8000448:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800044c:	f7ff ffca 	bl	80003e4 <LL_APB1_GRP1_EnableClock>

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* Configure FDCAN TX as alternate function */
  GPIO_InitStruct.Pin        = FDCANx_TX_PIN;
 8000450:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000454:	663b      	str	r3, [r7, #96]	@ 0x60
  GPIO_InitStruct.Mode       = LL_GPIO_MODE_ALTERNATE;
 8000456:	2302      	movs	r3, #2
 8000458:	667b      	str	r3, [r7, #100]	@ 0x64
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800045a:	2300      	movs	r3, #0
 800045c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  GPIO_InitStruct.Speed      = LL_GPIO_SPEED_FREQ_HIGH;
 800045e:	2302      	movs	r3, #2
 8000460:	66bb      	str	r3, [r7, #104]	@ 0x68
  GPIO_InitStruct.Pull       = LL_GPIO_PULL_UP;
 8000462:	2301      	movs	r3, #1
 8000464:	673b      	str	r3, [r7, #112]	@ 0x70
  GPIO_InitStruct.Alternate  = FDCANx_TX_AF;
 8000466:	2309      	movs	r3, #9
 8000468:	677b      	str	r3, [r7, #116]	@ 0x74
  LL_GPIO_Init(FDCANx_TX_GPIO_PORT, &GPIO_InitStruct);
 800046a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800046e:	4619      	mov	r1, r3
 8000470:	4807      	ldr	r0, [pc, #28]	@ (8000490 <HAL_FDCAN_MspInit+0x6c>)
 8000472:	f004 f912 	bl	800469a <LL_GPIO_Init>

  /* Configure FDCAN RX as alternate function */
  GPIO_InitStruct.Pin = FDCANx_RX_PIN;
 8000476:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800047a:	663b      	str	r3, [r7, #96]	@ 0x60
  LL_GPIO_Init(FDCANx_RX_GPIO_PORT, &GPIO_InitStruct);
 800047c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000480:	4619      	mov	r1, r3
 8000482:	4803      	ldr	r0, [pc, #12]	@ (8000490 <HAL_FDCAN_MspInit+0x6c>)
 8000484:	f004 f909 	bl	800469a <LL_GPIO_Init>
}
 8000488:	bf00      	nop
 800048a:	3778      	adds	r7, #120	@ 0x78
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	48000400 	.word	0x48000400

08000494 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
}
 8000498:	bf00      	nop
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr

080004a2 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80004a2:	b480      	push	{r7}
 80004a4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80004a6:	bf00      	nop
 80004a8:	e7fd      	b.n	80004a6 <HardFault_Handler+0x4>

080004aa <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80004aa:	b480      	push	{r7}
 80004ac:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80004ae:	bf00      	nop
 80004b0:	e7fd      	b.n	80004ae <MemManage_Handler+0x4>

080004b2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80004b2:	b480      	push	{r7}
 80004b4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80004b6:	bf00      	nop
 80004b8:	e7fd      	b.n	80004b6 <BusFault_Handler+0x4>

080004ba <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80004be:	bf00      	nop
 80004c0:	e7fd      	b.n	80004be <UsageFault_Handler+0x4>

080004c2 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80004c2:	b480      	push	{r7}
 80004c4:	af00      	add	r7, sp, #0
}
 80004c6:	bf00      	nop
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr

080004d0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr

080004de <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0
}
 80004e2:	bf00      	nop
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr

080004ec <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80004f0:	f000 ffca 	bl	8001488 <HAL_IncTick>
}
 80004f4:	bf00      	nop
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <OpenBootloader_Init>:
  * @brief  Initialize open Bootloader.
  * @param  None.
  * @retval None.
  */
void OpenBootloader_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* Register USART interfaces */
  USART_Handle.p_Ops = &USART_Ops;
 80004fc:	4b1b      	ldr	r3, [pc, #108]	@ (800056c <OpenBootloader_Init+0x74>)
 80004fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000570 <OpenBootloader_Init+0x78>)
 8000500:	601a      	str	r2, [r3, #0]
  USART_Handle.p_Cmd = OPENBL_USART_GetCommandsList();
 8000502:	f005 fcad 	bl	8005e60 <OPENBL_USART_GetCommandsList>
 8000506:	4603      	mov	r3, r0
 8000508:	4a18      	ldr	r2, [pc, #96]	@ (800056c <OpenBootloader_Init+0x74>)
 800050a:	6053      	str	r3, [r2, #4]

  OPENBL_RegisterInterface(&USART_Handle);
 800050c:	4817      	ldr	r0, [pc, #92]	@ (800056c <OpenBootloader_Init+0x74>)
 800050e:	f004 fd23 	bl	8004f58 <OPENBL_RegisterInterface>
  FDCAN_Handle.p_Ops = &FDCAN_Ops;
  FDCAN_Handle.p_Cmd = OPENBL_FDCAN_GetCommandsList();

  OPENBL_RegisterInterface(&FDCAN_Handle);
  */
  CLASSICCAN_Handle.p_Ops = &CLASSICCAN_Ops;
 8000512:	4b18      	ldr	r3, [pc, #96]	@ (8000574 <OpenBootloader_Init+0x7c>)
 8000514:	4a18      	ldr	r2, [pc, #96]	@ (8000578 <OpenBootloader_Init+0x80>)
 8000516:	601a      	str	r2, [r3, #0]
  CLASSICCAN_Handle.p_Cmd = OPENBL_CLASSICCAN_GetCommandsList();
 8000518:	f004 ffca 	bl	80054b0 <OPENBL_CLASSICCAN_GetCommandsList>
 800051c:	4603      	mov	r3, r0
 800051e:	4a15      	ldr	r2, [pc, #84]	@ (8000574 <OpenBootloader_Init+0x7c>)
 8000520:	6053      	str	r3, [r2, #4]

  OPENBL_RegisterInterface(&CLASSICCAN_Handle);
 8000522:	4814      	ldr	r0, [pc, #80]	@ (8000574 <OpenBootloader_Init+0x7c>)
 8000524:	f004 fd18 	bl	8004f58 <OPENBL_RegisterInterface>

  /* Register IWDG interfaces */
  IWDG_Handle.p_Ops = &IWDG_Ops;
 8000528:	4b14      	ldr	r3, [pc, #80]	@ (800057c <OpenBootloader_Init+0x84>)
 800052a:	4a15      	ldr	r2, [pc, #84]	@ (8000580 <OpenBootloader_Init+0x88>)
 800052c:	601a      	str	r2, [r3, #0]
  IWDG_Handle.p_Cmd = NULL;
 800052e:	4b13      	ldr	r3, [pc, #76]	@ (800057c <OpenBootloader_Init+0x84>)
 8000530:	2200      	movs	r2, #0
 8000532:	605a      	str	r2, [r3, #4]

  OPENBL_RegisterInterface(&IWDG_Handle);
 8000534:	4811      	ldr	r0, [pc, #68]	@ (800057c <OpenBootloader_Init+0x84>)
 8000536:	f004 fd0f 	bl	8004f58 <OPENBL_RegisterInterface>

  /* Initialise interfaces */
  OPENBL_Init();
 800053a:	f004 fce9 	bl	8004f10 <OPENBL_Init>

  /* Initialise memories */
  OPENBL_MEM_RegisterMemory(&FLASH_Descriptor);
 800053e:	4811      	ldr	r0, [pc, #68]	@ (8000584 <OpenBootloader_Init+0x8c>)
 8000540:	f005 fa4e 	bl	80059e0 <OPENBL_MEM_RegisterMemory>
  OPENBL_MEM_RegisterMemory(&RAM_Descriptor);
 8000544:	4810      	ldr	r0, [pc, #64]	@ (8000588 <OpenBootloader_Init+0x90>)
 8000546:	f005 fa4b 	bl	80059e0 <OPENBL_MEM_RegisterMemory>
  OPENBL_MEM_RegisterMemory(&OB1_Descriptor);
 800054a:	4810      	ldr	r0, [pc, #64]	@ (800058c <OpenBootloader_Init+0x94>)
 800054c:	f005 fa48 	bl	80059e0 <OPENBL_MEM_RegisterMemory>
  OPENBL_MEM_RegisterMemory(&OB2_Descriptor);
 8000550:	480f      	ldr	r0, [pc, #60]	@ (8000590 <OpenBootloader_Init+0x98>)
 8000552:	f005 fa45 	bl	80059e0 <OPENBL_MEM_RegisterMemory>
  OPENBL_MEM_RegisterMemory(&OTP_Descriptor);
 8000556:	480f      	ldr	r0, [pc, #60]	@ (8000594 <OpenBootloader_Init+0x9c>)
 8000558:	f005 fa42 	bl	80059e0 <OPENBL_MEM_RegisterMemory>
  OPENBL_MEM_RegisterMemory(&ICP1_Descriptor);
 800055c:	480e      	ldr	r0, [pc, #56]	@ (8000598 <OpenBootloader_Init+0xa0>)
 800055e:	f005 fa3f 	bl	80059e0 <OPENBL_MEM_RegisterMemory>
  OPENBL_MEM_RegisterMemory(&ICP2_Descriptor);
 8000562:	480e      	ldr	r0, [pc, #56]	@ (800059c <OpenBootloader_Init+0xa4>)
 8000564:	f005 fa3c 	bl	80059e0 <OPENBL_MEM_RegisterMemory>
}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}
 800056c:	20000244 	.word	0x20000244
 8000570:	20000000 	.word	0x20000000
 8000574:	20000254 	.word	0x20000254
 8000578:	20000014 	.word	0x20000014
 800057c:	2000024c 	.word	0x2000024c
 8000580:	20000028 	.word	0x20000028
 8000584:	2000003c 	.word	0x2000003c
 8000588:	200000ec 	.word	0x200000ec
 800058c:	20000068 	.word	0x20000068
 8000590:	20000094 	.word	0x20000094
 8000594:	200000c0 	.word	0x200000c0
 8000598:	20000118 	.word	0x20000118
 800059c:	20000144 	.word	0x20000144

080005a0 <OpenBootloader_DeInit>:
  * @brief  DeInitialize open Bootloader.
  * @param  None.
  * @retval None.
  */
void OpenBootloader_DeInit(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  System_DeInit();
 80005a4:	f7ff fead 	bl	8000302 <System_DeInit>
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}

080005ac <OpenBootloader_ProtocolDetection>:
  * @brief  This function is used to select which protocol will be used when communicating with the host.
  * @param  None.
  * @retval None.
  */
void OpenBootloader_ProtocolDetection(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  static uint32_t interface_detected = 0;

  if (interface_detected == 0)
 80005b0:	4b08      	ldr	r3, [pc, #32]	@ (80005d4 <OpenBootloader_ProtocolDetection+0x28>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d104      	bne.n	80005c2 <OpenBootloader_ProtocolDetection+0x16>
  {
    interface_detected = OPENBL_InterfaceDetection();
 80005b8:	f004 fcfa 	bl	8004fb0 <OPENBL_InterfaceDetection>
 80005bc:	4603      	mov	r3, r0
 80005be:	4a05      	ldr	r2, [pc, #20]	@ (80005d4 <OpenBootloader_ProtocolDetection+0x28>)
 80005c0:	6013      	str	r3, [r2, #0]
  }

  if (interface_detected == 1)
 80005c2:	4b04      	ldr	r3, [pc, #16]	@ (80005d4 <OpenBootloader_ProtocolDetection+0x28>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d101      	bne.n	80005ce <OpenBootloader_ProtocolDetection+0x22>
  {
    OPENBL_CommandProcess();
 80005ca:	f004 fd25 	bl	8005018 <OPENBL_CommandProcess>
  }
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	2000025c 	.word	0x2000025c

080005d8 <OPENBL_CLASSICCAN_Init>:
static void OPENBL_CLASSICCAN_Init(void);

/* Private functions ---------------------------------------------------------*/

static void OPENBL_CLASSICCAN_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	---------------------------|--------------|----------------
	fdcan_ker_ck               | 20 MHz       | 20 MHz
  */
	//http://www.bittiming.can-wiki.info/

  _hfdcan.Instance                  = FDCANx;
 80005dc:	4b3b      	ldr	r3, [pc, #236]	@ (80006cc <OPENBL_CLASSICCAN_Init+0xf4>)
 80005de:	4a3c      	ldr	r2, [pc, #240]	@ (80006d0 <OPENBL_CLASSICCAN_Init+0xf8>)
 80005e0:	601a      	str	r2, [r3, #0]
  _hfdcan.Init.ClockDivider 		= FDCAN_CLOCK_DIV1;
 80005e2:	4b3a      	ldr	r3, [pc, #232]	@ (80006cc <OPENBL_CLASSICCAN_Init+0xf4>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	605a      	str	r2, [r3, #4]
  _hfdcan.Init.FrameFormat          = FDCAN_FRAME_CLASSIC;//FDCAN_FRAME_FD_BRS;
 80005e8:	4b38      	ldr	r3, [pc, #224]	@ (80006cc <OPENBL_CLASSICCAN_Init+0xf4>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  _hfdcan.Init.Mode                 = FDCAN_MODE_NORMAL;
 80005ee:	4b37      	ldr	r3, [pc, #220]	@ (80006cc <OPENBL_CLASSICCAN_Init+0xf4>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
  _hfdcan.Init.AutoRetransmission   = ENABLE;
 80005f4:	4b35      	ldr	r3, [pc, #212]	@ (80006cc <OPENBL_CLASSICCAN_Init+0xf4>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	741a      	strb	r2, [r3, #16]
  _hfdcan.Init.TransmitPause        = DISABLE;
 80005fa:	4b34      	ldr	r3, [pc, #208]	@ (80006cc <OPENBL_CLASSICCAN_Init+0xf4>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	745a      	strb	r2, [r3, #17]
  _hfdcan.Init.ProtocolException    = DISABLE;
 8000600:	4b32      	ldr	r3, [pc, #200]	@ (80006cc <OPENBL_CLASSICCAN_Init+0xf4>)
 8000602:	2200      	movs	r2, #0
 8000604:	749a      	strb	r2, [r3, #18]
  _hfdcan.Init.NominalPrescaler     = 10;
 8000606:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <OPENBL_CLASSICCAN_Init+0xf4>)
 8000608:	220a      	movs	r2, #10
 800060a:	615a      	str	r2, [r3, #20]
  _hfdcan.Init.NominalSyncJumpWidth = 1;
 800060c:	4b2f      	ldr	r3, [pc, #188]	@ (80006cc <OPENBL_CLASSICCAN_Init+0xf4>)
 800060e:	2201      	movs	r2, #1
 8000610:	619a      	str	r2, [r3, #24]
  _hfdcan.Init.NominalTimeSeg1      = 13;
 8000612:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <OPENBL_CLASSICCAN_Init+0xf4>)
 8000614:	220d      	movs	r2, #13
 8000616:	61da      	str	r2, [r3, #28]
  _hfdcan.Init.NominalTimeSeg2      = 2;
 8000618:	4b2c      	ldr	r3, [pc, #176]	@ (80006cc <OPENBL_CLASSICCAN_Init+0xf4>)
 800061a:	2202      	movs	r2, #2
 800061c:	621a      	str	r2, [r3, #32]
  _hfdcan.Init.DataPrescaler        = 0x1;
 800061e:	4b2b      	ldr	r3, [pc, #172]	@ (80006cc <OPENBL_CLASSICCAN_Init+0xf4>)
 8000620:	2201      	movs	r2, #1
 8000622:	625a      	str	r2, [r3, #36]	@ 0x24
  _hfdcan.Init.DataSyncJumpWidth    = 0x1;
 8000624:	4b29      	ldr	r3, [pc, #164]	@ (80006cc <OPENBL_CLASSICCAN_Init+0xf4>)
 8000626:	2201      	movs	r2, #1
 8000628:	629a      	str	r2, [r3, #40]	@ 0x28
  _hfdcan.Init.DataTimeSeg1         = 0x1;
 800062a:	4b28      	ldr	r3, [pc, #160]	@ (80006cc <OPENBL_CLASSICCAN_Init+0xf4>)
 800062c:	2201      	movs	r2, #1
 800062e:	62da      	str	r2, [r3, #44]	@ 0x2c
  _hfdcan.Init.DataTimeSeg2         = 0x1;
 8000630:	4b26      	ldr	r3, [pc, #152]	@ (80006cc <OPENBL_CLASSICCAN_Init+0xf4>)
 8000632:	2201      	movs	r2, #1
 8000634:	631a      	str	r2, [r3, #48]	@ 0x30
  _hfdcan.Init.StdFiltersNbr        = 1;
 8000636:	4b25      	ldr	r3, [pc, #148]	@ (80006cc <OPENBL_CLASSICCAN_Init+0xf4>)
 8000638:	2201      	movs	r2, #1
 800063a:	635a      	str	r2, [r3, #52]	@ 0x34
  _hfdcan.Init.ExtFiltersNbr        = 0;
 800063c:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <OPENBL_CLASSICCAN_Init+0xf4>)
 800063e:	2200      	movs	r2, #0
 8000640:	639a      	str	r2, [r3, #56]	@ 0x38
  _hfdcan.Init.TxFifoQueueMode      = FDCAN_TX_FIFO_OPERATION;
 8000642:	4b22      	ldr	r3, [pc, #136]	@ (80006cc <OPENBL_CLASSICCAN_Init+0xf4>)
 8000644:	2200      	movs	r2, #0
 8000646:	63da      	str	r2, [r3, #60]	@ 0x3c

  if (HAL_FDCAN_Init(&_hfdcan) != HAL_OK)
 8000648:	4820      	ldr	r0, [pc, #128]	@ (80006cc <OPENBL_CLASSICCAN_Init+0xf4>)
 800064a:	f001 f81f 	bl	800168c <HAL_FDCAN_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <OPENBL_CLASSICCAN_Init+0x80>
  {
    while (1);
 8000654:	bf00      	nop
 8000656:	e7fd      	b.n	8000654 <OPENBL_CLASSICCAN_Init+0x7c>
  }

  /* Configure Rx filter */
  _sFilterConfig.IdType       = FDCAN_STANDARD_ID;
 8000658:	4b1e      	ldr	r3, [pc, #120]	@ (80006d4 <OPENBL_CLASSICCAN_Init+0xfc>)
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
  _sFilterConfig.FilterIndex  = 0;
 800065e:	4b1d      	ldr	r3, [pc, #116]	@ (80006d4 <OPENBL_CLASSICCAN_Init+0xfc>)
 8000660:	2200      	movs	r2, #0
 8000662:	605a      	str	r2, [r3, #4]
  _sFilterConfig.FilterType   = FDCAN_FILTER_MASK;
 8000664:	4b1b      	ldr	r3, [pc, #108]	@ (80006d4 <OPENBL_CLASSICCAN_Init+0xfc>)
 8000666:	2202      	movs	r2, #2
 8000668:	609a      	str	r2, [r3, #8]
  _sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800066a:	4b1a      	ldr	r3, [pc, #104]	@ (80006d4 <OPENBL_CLASSICCAN_Init+0xfc>)
 800066c:	2201      	movs	r2, #1
 800066e:	60da      	str	r2, [r3, #12]
  _sFilterConfig.FilterID1    = 0x111;
 8000670:	4b18      	ldr	r3, [pc, #96]	@ (80006d4 <OPENBL_CLASSICCAN_Init+0xfc>)
 8000672:	f240 1211 	movw	r2, #273	@ 0x111
 8000676:	611a      	str	r2, [r3, #16]
  _sFilterConfig.FilterID2    = 0x7FF;
 8000678:	4b16      	ldr	r3, [pc, #88]	@ (80006d4 <OPENBL_CLASSICCAN_Init+0xfc>)
 800067a:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800067e:	615a      	str	r2, [r3, #20]
  HAL_FDCAN_ConfigFilter(&_hfdcan, &_sFilterConfig);
 8000680:	4914      	ldr	r1, [pc, #80]	@ (80006d4 <OPENBL_CLASSICCAN_Init+0xfc>)
 8000682:	4812      	ldr	r0, [pc, #72]	@ (80006cc <OPENBL_CLASSICCAN_Init+0xf4>)
 8000684:	f001 f95c 	bl	8001940 <HAL_FDCAN_ConfigFilter>

  /* Prepare Tx Header */
  _TxHeader.Identifier          = 0x111;
 8000688:	4b13      	ldr	r3, [pc, #76]	@ (80006d8 <OPENBL_CLASSICCAN_Init+0x100>)
 800068a:	f240 1211 	movw	r2, #273	@ 0x111
 800068e:	601a      	str	r2, [r3, #0]
  _TxHeader.IdType              = FDCAN_STANDARD_ID;
 8000690:	4b11      	ldr	r3, [pc, #68]	@ (80006d8 <OPENBL_CLASSICCAN_Init+0x100>)
 8000692:	2200      	movs	r2, #0
 8000694:	605a      	str	r2, [r3, #4]
  _TxHeader.TxFrameType         = FDCAN_DATA_FRAME;
 8000696:	4b10      	ldr	r3, [pc, #64]	@ (80006d8 <OPENBL_CLASSICCAN_Init+0x100>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  _TxHeader.DataLength          = CLASSICCAN_MAX_PAYLOAD_BYTES;
 800069c:	4b0e      	ldr	r3, [pc, #56]	@ (80006d8 <OPENBL_CLASSICCAN_Init+0x100>)
 800069e:	2208      	movs	r2, #8
 80006a0:	60da      	str	r2, [r3, #12]
  _TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80006a2:	4b0d      	ldr	r3, [pc, #52]	@ (80006d8 <OPENBL_CLASSICCAN_Init+0x100>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
  _TxHeader.BitRateSwitch       = FDCAN_BRS_OFF;
 80006a8:	4b0b      	ldr	r3, [pc, #44]	@ (80006d8 <OPENBL_CLASSICCAN_Init+0x100>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	615a      	str	r2, [r3, #20]
  _TxHeader.FDFormat            = FDCAN_CLASSIC_CAN;
 80006ae:	4b0a      	ldr	r3, [pc, #40]	@ (80006d8 <OPENBL_CLASSICCAN_Init+0x100>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]
  _TxHeader.TxEventFifoControl  = FDCAN_NO_TX_EVENTS;
 80006b4:	4b08      	ldr	r3, [pc, #32]	@ (80006d8 <OPENBL_CLASSICCAN_Init+0x100>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	61da      	str	r2, [r3, #28]
  _TxHeader.MessageMarker       = 0;
 80006ba:	4b07      	ldr	r3, [pc, #28]	@ (80006d8 <OPENBL_CLASSICCAN_Init+0x100>)
 80006bc:	2200      	movs	r2, #0
 80006be:	621a      	str	r2, [r3, #32]

  /* Start the FDCAN module */
  HAL_FDCAN_Start(&_hfdcan);
 80006c0:	4802      	ldr	r0, [pc, #8]	@ (80006cc <OPENBL_CLASSICCAN_Init+0xf4>)
 80006c2:	f001 f997 	bl	80019f4 <HAL_FDCAN_Start>
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000260 	.word	0x20000260
 80006d0:	40006400 	.word	0x40006400
 80006d4:	200002c4 	.word	0x200002c4
 80006d8:	200002dc 	.word	0x200002dc

080006dc <OPENBL_CLASSICCAN_Configuration>:
/**
 * @brief  This function is used to configure FDCAN pins and then initialize the used FDCAN instance.
 * @retval None.
 */
void OPENBL_CLASSICCAN_Configuration(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0

	OPENBL_CLASSICCAN_Init();
 80006e0:	f7ff ff7a 	bl	80005d8 <OPENBL_CLASSICCAN_Init>
}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <OPENBL_CLASSICCAN_ProtocolDetection>:
/**
 * @brief  This function is used to detect if there is any activity on FDCAN protocol.
 * @retval None.
 */
uint8_t OPENBL_CLASSICCAN_ProtocolDetection(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
  uint8_t detected;

  /* check if FIFO 0 receive at least one message */
  if (HAL_FDCAN_GetRxFifoFillLevel(&_hfdcan, FDCAN_RX_FIFO0) > 0)
 80006ee:	2140      	movs	r1, #64	@ 0x40
 80006f0:	4807      	ldr	r0, [pc, #28]	@ (8000710 <OPENBL_CLASSICCAN_ProtocolDetection+0x28>)
 80006f2:	f001 faf3 	bl	8001cdc <HAL_FDCAN_GetRxFifoFillLevel>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d002      	beq.n	8000702 <OPENBL_CLASSICCAN_ProtocolDetection+0x1a>
  {
    detected = 1;
 80006fc:	2301      	movs	r3, #1
 80006fe:	71fb      	strb	r3, [r7, #7]
 8000700:	e001      	b.n	8000706 <OPENBL_CLASSICCAN_ProtocolDetection+0x1e>
  }
  else
  {
    detected = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	71fb      	strb	r3, [r7, #7]
  }

  return detected;
 8000706:	79fb      	ldrb	r3, [r7, #7]
}
 8000708:	4618      	mov	r0, r3
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000260 	.word	0x20000260

08000714 <OPENBL_CLASSICCAN_GetCommandOpcode>:
/**
 * @brief  This function is used to get the command opcode from the host.
 * @retval Returns the command.
 */
uint8_t OPENBL_CLASSICCAN_GetCommandOpcode(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
  uint8_t command_opc      = 0x0;
 800071a:	2300      	movs	r3, #0
 800071c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800071e:	2300      	movs	r3, #0
 8000720:	71bb      	strb	r3, [r7, #6]

  /* check if FIFO 0 receive at least one message */
  while (HAL_FDCAN_GetRxFifoFillLevel(&_hfdcan, FDCAN_RX_FIFO0) < 1)
 8000722:	bf00      	nop
 8000724:	2140      	movs	r1, #64	@ 0x40
 8000726:	4810      	ldr	r0, [pc, #64]	@ (8000768 <OPENBL_CLASSICCAN_GetCommandOpcode+0x54>)
 8000728:	f001 fad8 	bl	8001cdc <HAL_FDCAN_GetRxFifoFillLevel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d0f8      	beq.n	8000724 <OPENBL_CLASSICCAN_GetCommandOpcode+0x10>
  {}

  /* Retrieve Rx messages from RX FIFO0 */
  status = HAL_FDCAN_GetRxMessage(&_hfdcan, FDCAN_RX_FIFO0, &_RxHeader, _RxData);
 8000732:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <OPENBL_CLASSICCAN_GetCommandOpcode+0x58>)
 8000734:	4a0e      	ldr	r2, [pc, #56]	@ (8000770 <OPENBL_CLASSICCAN_GetCommandOpcode+0x5c>)
 8000736:	2140      	movs	r1, #64	@ 0x40
 8000738:	480b      	ldr	r0, [pc, #44]	@ (8000768 <OPENBL_CLASSICCAN_GetCommandOpcode+0x54>)
 800073a:	f001 f9c7 	bl	8001acc <HAL_FDCAN_GetRxMessage>
 800073e:	4603      	mov	r3, r0
 8000740:	71bb      	strb	r3, [r7, #6]

  /* Check for errors */
  if (status == HAL_ERROR)
 8000742:	79bb      	ldrb	r3, [r7, #6]
 8000744:	2b01      	cmp	r3, #1
 8000746:	d102      	bne.n	800074e <OPENBL_CLASSICCAN_GetCommandOpcode+0x3a>
  {
    command_opc = ERROR_COMMAND;
 8000748:	23ec      	movs	r3, #236	@ 0xec
 800074a:	71fb      	strb	r3, [r7, #7]
 800074c:	e006      	b.n	800075c <OPENBL_CLASSICCAN_GetCommandOpcode+0x48>
  }
  else
  {
    command_opc         = _RxHeader.Identifier;
 800074e:	4b08      	ldr	r3, [pc, #32]	@ (8000770 <OPENBL_CLASSICCAN_GetCommandOpcode+0x5c>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	71fb      	strb	r3, [r7, #7]
    _TxHeader.Identifier = _RxHeader.Identifier;
 8000754:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <OPENBL_CLASSICCAN_GetCommandOpcode+0x5c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a06      	ldr	r2, [pc, #24]	@ (8000774 <OPENBL_CLASSICCAN_GetCommandOpcode+0x60>)
 800075a:	6013      	str	r3, [r2, #0]
  }

  return command_opc;
 800075c:	79fb      	ldrb	r3, [r7, #7]
}
 800075e:	4618      	mov	r0, r3
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000260 	.word	0x20000260
 800076c:	200007ac 	.word	0x200007ac
 8000770:	20000300 	.word	0x20000300
 8000774:	200002dc 	.word	0x200002dc

08000778 <OPENBL_CLASSICCAN_ReadBytes>:
/**
  * @brief  This function is used to read bytes from FDCAN pipe.
  * @retval Returns the read byte.
  */
void OPENBL_CLASSICCAN_ReadBytes(uint8_t *Buffer, uint32_t *BufferSize)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
  /* check if FIFO 0 receive at least one message */
  while (HAL_FDCAN_GetRxFifoFillLevel(&_hfdcan, FDCAN_RX_FIFO0) < 1)
 8000782:	e001      	b.n	8000788 <OPENBL_CLASSICCAN_ReadBytes+0x10>
  {
    OPENBL_IWDG_Refresh();
 8000784:	f000 faf6 	bl	8000d74 <OPENBL_IWDG_Refresh>
  while (HAL_FDCAN_GetRxFifoFillLevel(&_hfdcan, FDCAN_RX_FIFO0) < 1)
 8000788:	2140      	movs	r1, #64	@ 0x40
 800078a:	480a      	ldr	r0, [pc, #40]	@ (80007b4 <OPENBL_CLASSICCAN_ReadBytes+0x3c>)
 800078c:	f001 faa6 	bl	8001cdc <HAL_FDCAN_GetRxFifoFillLevel>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d0f6      	beq.n	8000784 <OPENBL_CLASSICCAN_ReadBytes+0xc>
  }

  /* Retrieve Rx messages from RX FIFO0 */
  HAL_FDCAN_GetRxMessage(&_hfdcan, FDCAN_RX_FIFO0, &_RxHeader, Buffer);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4a07      	ldr	r2, [pc, #28]	@ (80007b8 <OPENBL_CLASSICCAN_ReadBytes+0x40>)
 800079a:	2140      	movs	r1, #64	@ 0x40
 800079c:	4805      	ldr	r0, [pc, #20]	@ (80007b4 <OPENBL_CLASSICCAN_ReadBytes+0x3c>)
 800079e:	f001 f995 	bl	8001acc <HAL_FDCAN_GetRxMessage>
  *BufferSize=_RxHeader.DataLength;
 80007a2:	4b05      	ldr	r3, [pc, #20]	@ (80007b8 <OPENBL_CLASSICCAN_ReadBytes+0x40>)
 80007a4:	68da      	ldr	r2, [r3, #12]
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	601a      	str	r2, [r3, #0]
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000260 	.word	0x20000260
 80007b8:	20000300 	.word	0x20000300

080007bc <OPENBL_CLASSICCAN_SendByte>:
  * @brief  This function is used to send one byte through FDCAN pipe.
  * @param  Byte The byte to be sent.
  * @retval None.
  */
void OPENBL_CLASSICCAN_SendByte(uint8_t Byte)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]
  _TxHeader.DataLength = FDCAN_DLC_BYTES_1;
 80007c6:	4b12      	ldr	r3, [pc, #72]	@ (8000810 <OPENBL_CLASSICCAN_SendByte+0x54>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	60da      	str	r2, [r3, #12]

  while (HAL_FDCAN_GetTxFifoFreeLevel(&_hfdcan) == 0)
 80007cc:	bf00      	nop
 80007ce:	4811      	ldr	r0, [pc, #68]	@ (8000814 <OPENBL_CLASSICCAN_SendByte+0x58>)
 80007d0:	f001 faa2 	bl	8001d18 <HAL_FDCAN_GetTxFifoFreeLevel>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d0f9      	beq.n	80007ce <OPENBL_CLASSICCAN_SendByte+0x12>
  {}

  HAL_FDCAN_AddMessageToTxFifoQ(&_hfdcan, &_TxHeader, &Byte);
 80007da:	1dfb      	adds	r3, r7, #7
 80007dc:	461a      	mov	r2, r3
 80007de:	490c      	ldr	r1, [pc, #48]	@ (8000810 <OPENBL_CLASSICCAN_SendByte+0x54>)
 80007e0:	480c      	ldr	r0, [pc, #48]	@ (8000814 <OPENBL_CLASSICCAN_SendByte+0x58>)
 80007e2:	f001 f92f 	bl	8001a44 <HAL_FDCAN_AddMessageToTxFifoQ>

  /* Wait that the data is completely sent (sent FIFO empty) */
  while (((&_hfdcan)->Instance->IR & FDCAN_IR_TFE) != FDCAN_IR_TFE)
 80007e6:	bf00      	nop
 80007e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000814 <OPENBL_CLASSICCAN_SendByte+0x58>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80007ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80007f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80007f6:	d1f7      	bne.n	80007e8 <OPENBL_CLASSICCAN_SendByte+0x2c>
  {}

  /* Clear the complete flag */
  (&_hfdcan)->Instance->IR &= FDCAN_IR_TFE;
 80007f8:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <OPENBL_CLASSICCAN_SendByte+0x58>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80007fe:	4b05      	ldr	r3, [pc, #20]	@ (8000814 <OPENBL_CLASSICCAN_SendByte+0x58>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8000806:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	200002dc 	.word	0x200002dc
 8000814:	20000260 	.word	0x20000260

08000818 <OPENBL_CLASSICCAN_SendBytes>:
  * @param  Buffer The data buffer to be sent.
  * @param  BufferSize The size of the data buffer to be sent.
  * @retval None.
  */
void OPENBL_CLASSICCAN_SendBytes(uint8_t *Buffer, uint32_t BufferSize)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]
  _TxHeader.DataLength = BufferSize;
 8000822:	4a12      	ldr	r2, [pc, #72]	@ (800086c <OPENBL_CLASSICCAN_SendBytes+0x54>)
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	60d3      	str	r3, [r2, #12]

  while (HAL_FDCAN_GetTxFifoFreeLevel(&_hfdcan) == 0)
 8000828:	bf00      	nop
 800082a:	4811      	ldr	r0, [pc, #68]	@ (8000870 <OPENBL_CLASSICCAN_SendBytes+0x58>)
 800082c:	f001 fa74 	bl	8001d18 <HAL_FDCAN_GetTxFifoFreeLevel>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d0f9      	beq.n	800082a <OPENBL_CLASSICCAN_SendBytes+0x12>
  {}

  HAL_FDCAN_AddMessageToTxFifoQ(&_hfdcan, &_TxHeader, Buffer);
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	490c      	ldr	r1, [pc, #48]	@ (800086c <OPENBL_CLASSICCAN_SendBytes+0x54>)
 800083a:	480d      	ldr	r0, [pc, #52]	@ (8000870 <OPENBL_CLASSICCAN_SendBytes+0x58>)
 800083c:	f001 f902 	bl	8001a44 <HAL_FDCAN_AddMessageToTxFifoQ>

  /* Wait that the data is completely sent (sent FIFO empty) */
  while (((&_hfdcan)->Instance->IR & FDCAN_IR_TFE) != FDCAN_IR_TFE)
 8000840:	bf00      	nop
 8000842:	4b0b      	ldr	r3, [pc, #44]	@ (8000870 <OPENBL_CLASSICCAN_SendBytes+0x58>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000848:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800084c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000850:	d1f7      	bne.n	8000842 <OPENBL_CLASSICCAN_SendBytes+0x2a>
  {}

  /* Clear the complete flag */
  (&_hfdcan)->Instance->IR &= FDCAN_IR_TFE;
 8000852:	4b07      	ldr	r3, [pc, #28]	@ (8000870 <OPENBL_CLASSICCAN_SendBytes+0x58>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000858:	4b05      	ldr	r3, [pc, #20]	@ (8000870 <OPENBL_CLASSICCAN_SendBytes+0x58>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8000860:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200002dc 	.word	0x200002dc
 8000870:	20000260 	.word	0x20000260

08000874 <Common_SetMsp>:
  * @brief  Assigns the given value to the Main Stack Pointer (MSP).
  * @param  TopOfMainStack  Main Stack Pointer value to set.
  * @retval None.
  */
void Common_SetMsp(uint32_t TopOfMainStack)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	f383 8808 	msr	MSP, r3
}
 8000886:	bf00      	nop
  __set_MSP(TopOfMainStack);
}
 8000888:	bf00      	nop
 800088a:	3714      	adds	r7, #20
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <Common_EnableIrq>:
/**
  * @brief  Enable IRQ Interrupts.
  * @retval None.
  */
void Common_EnableIrq(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8000898:	b662      	cpsie	i
}
 800089a:	bf00      	nop
  __enable_irq();
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr

080008a6 <OPENBL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval None.
  */
void OPENBL_FLASH_Unlock(void)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	af00      	add	r7, sp, #0
  HAL_FLASH_Unlock();
 80008aa:	f001 fb9b 	bl	8001fe4 <HAL_FLASH_Unlock>
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <OPENBL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval None.
  */
void OPENBL_FLASH_Lock(void)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	af00      	add	r7, sp, #0
  HAL_FLASH_Lock();
 80008b6:	f001 fbb7 	bl	8002028 <HAL_FLASH_Lock>
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}

080008be <OPENBL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval None.
  */
void OPENBL_FLASH_OB_Unlock(void)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	af00      	add	r7, sp, #0
  HAL_FLASH_Unlock();
 80008c2:	f001 fb8f 	bl	8001fe4 <HAL_FLASH_Unlock>

  HAL_FLASH_OB_Unlock();
 80008c6:	f001 fbc9 	bl	800205c <HAL_FLASH_OB_Unlock>
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}

080008ce <OPENBL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval None.
  */
void OPENBL_FLASH_OB_Launch(void)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	af00      	add	r7, sp, #0
  HAL_FLASH_OB_Launch();
 80008d2:	f001 fbe9 	bl	80020a8 <HAL_FLASH_OB_Launch>
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}

080008da <OPENBL_FLASH_Read>:
  * @brief  This function is used to read data from a given address.
  * @param  Address The address to be read.
  * @retval Returns the read value.
  */
uint8_t OPENBL_FLASH_Read(uint32_t Address)
{
 80008da:	b480      	push	{r7}
 80008dc:	b083      	sub	sp, #12
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
  return (*(uint8_t *)(Address));
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	781b      	ldrb	r3, [r3, #0]
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <OPENBL_FLASH_Write>:
  * @param  Data The data to be written.
  * @param  DataLength The length of the data to be written.
  * @retval None.
  */
void OPENBL_FLASH_Write(uint32_t Address, uint8_t *Data, uint32_t DataLength)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b086      	sub	sp, #24
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	60f8      	str	r0, [r7, #12]
 80008fa:	60b9      	str	r1, [r7, #8]
 80008fc:	607a      	str	r2, [r7, #4]
  uint32_t index  = 0U;
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
  uint32_t length = DataLength;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	613b      	str	r3, [r7, #16]

  if (length & 7U)
 8000906:	693b      	ldr	r3, [r7, #16]
 8000908:	f003 0307 	and.w	r3, r3, #7
 800090c:	2b00      	cmp	r3, #0
 800090e:	d004      	beq.n	800091a <OPENBL_FLASH_Write+0x28>
  {
    length = (length & 0xFFFFFFF8U) + 8U;
 8000910:	693b      	ldr	r3, [r7, #16]
 8000912:	f023 0307 	bic.w	r3, r3, #7
 8000916:	3308      	adds	r3, #8
 8000918:	613b      	str	r3, [r7, #16]
  }

  /* Unlock the flash memory for write operation */
  OPENBL_FLASH_Unlock();
 800091a:	f7ff ffc4 	bl	80008a6 <OPENBL_FLASH_Unlock>

  for (index = 0U; index < length; (index += 8U))
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
 8000922:	e00d      	b.n	8000940 <OPENBL_FLASH_Write+0x4e>
  {
    OPENBL_FLASH_ProgramDoubleWord((Address + index), (uint64_t)(*((uint64_t *)((uint32_t)Data + index))));
 8000924:	68fa      	ldr	r2, [r7, #12]
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	18d1      	adds	r1, r2, r3
 800092a:	68ba      	ldr	r2, [r7, #8]
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	4413      	add	r3, r2
 8000930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000934:	4608      	mov	r0, r1
 8000936:	f000 f907 	bl	8000b48 <OPENBL_FLASH_ProgramDoubleWord>
  for (index = 0U; index < length; (index += 8U))
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	3308      	adds	r3, #8
 800093e:	617b      	str	r3, [r7, #20]
 8000940:	697a      	ldr	r2, [r7, #20]
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	429a      	cmp	r2, r3
 8000946:	d3ed      	bcc.n	8000924 <OPENBL_FLASH_Write+0x32>
  }

  /* Lock the Flash to disable the flash control register access */
  OPENBL_FLASH_Lock();
 8000948:	f7ff ffb3 	bl	80008b2 <OPENBL_FLASH_Lock>
}
 800094c:	bf00      	nop
 800094e:	3718      	adds	r7, #24
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <OPENBL_FLASH_JumpToAddress>:
  * @brief  This function is used to jump to a given address.
  * @param  Address The address where the function will jump.
  * @retval None.
  */
void OPENBL_FLASH_JumpToAddress(uint32_t Address)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  Function_Pointer jump_to_address;

  /* Deinitialize all HW resources used by the Bootloader to their reset values */
  OpenBootloader_DeInit();
 800095c:	f7ff fe20 	bl	80005a0 <OpenBootloader_DeInit>

  /* Enable IRQ */
  Common_EnableIrq();
 8000960:	f7ff ff98 	bl	8000894 <Common_EnableIrq>

  jump_to_address = (Function_Pointer)(*(__IO uint32_t *)(Address + 4U));
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	3304      	adds	r3, #4
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	60fb      	str	r3, [r7, #12]

  /* Initialize user application's stack pointer */
  Common_SetMsp(*(__IO uint32_t *) Address);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff ff7f 	bl	8000874 <Common_SetMsp>

  jump_to_address();
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	4798      	blx	r3
}
 800097a:	bf00      	nop
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <OPENBL_FLASH_GetReadOutProtectionLevel>:
  *         @arg OB_RDP_LEVEL_0: No protection
  *         @arg OB_RDP_LEVEL_1: Read protection of the memory
  *         @arg OB_RDP_LEVEL_2: Full chip protection
  */
uint32_t OPENBL_FLASH_GetReadOutProtectionLevel(void)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b08e      	sub	sp, #56	@ 0x38
 8000986:	af00      	add	r7, sp, #0
  FLASH_OBProgramInitTypeDef flash_ob;

  /* Get the Option bytes configuration */
  HAL_FLASHEx_OBGetConfig(&flash_ob);
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	4618      	mov	r0, r3
 800098c:	f001 fd78 	bl	8002480 <HAL_FLASHEx_OBGetConfig>

  return flash_ob.RDPLevel;
 8000990:	697b      	ldr	r3, [r7, #20]
}
 8000992:	4618      	mov	r0, r3
 8000994:	3738      	adds	r7, #56	@ 0x38
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <OPENBL_FLASH_SetReadOutProtectionLevel>:
  *         @arg OB_RDP_LEVEL_1: Read protection of the memory
  *         @arg OB_RDP_LEVEL_2: Full chip protection
  * @retval None.
  */
void OPENBL_FLASH_SetReadOutProtectionLevel(uint32_t Level)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b090      	sub	sp, #64	@ 0x40
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  FLASH_OBProgramInitTypeDef flash_ob;

  if (Level != OB_RDP_LEVEL2)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2bcc      	cmp	r3, #204	@ 0xcc
 80009a8:	d030      	beq.n	8000a0c <OPENBL_FLASH_SetReadOutProtectionLevel+0x70>
  {
    flash_ob.OptionType = OPTIONBYTE_RDP;
 80009aa:	2302      	movs	r3, #2
 80009ac:	60fb      	str	r3, [r7, #12]
    flash_ob.RDPLevel   = Level;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	61fb      	str	r3, [r7, #28]

    /* Unlock the FLASH registers & Option Bytes registers access */
    OPENBL_FLASH_OB_Unlock();
 80009b2:	f7ff ff84 	bl	80008be <OPENBL_FLASH_OB_Unlock>

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80009b6:	4b17      	ldr	r3, [pc, #92]	@ (8000a14 <OPENBL_FLASH_SetReadOutProtectionLevel+0x78>)
 80009b8:	699b      	ldr	r3, [r3, #24]
 80009ba:	4a16      	ldr	r2, [pc, #88]	@ (8000a14 <OPENBL_FLASH_SetReadOutProtectionLevel+0x78>)
 80009bc:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80009c0:	6193      	str	r3, [r2, #24]
 80009c2:	4b14      	ldr	r3, [pc, #80]	@ (8000a14 <OPENBL_FLASH_SetReadOutProtectionLevel+0x78>)
 80009c4:	f24c 32fa 	movw	r2, #50170	@ 0xc3fa
 80009c8:	611a      	str	r2, [r3, #16]

    /* Change the RDP level */
    HAL_FLASHEx_OBProgram(&flash_ob);
 80009ca:	f107 030c 	add.w	r3, r7, #12
 80009ce:	4618      	mov	r0, r3
 80009d0:	f001 fcc6 	bl	8002360 <HAL_FLASHEx_OBProgram>

    /* Reset PCROP registers if RDP level 0 is set */
    if (Level == OB_RDP_LEVEL0)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2baa      	cmp	r3, #170	@ 0xaa
 80009d8:	d118      	bne.n	8000a0c <OPENBL_FLASH_SetReadOutProtectionLevel+0x70>
    {
      flash_ob.OptionType      = OPTIONBYTE_PCROP;
 80009da:	2308      	movs	r3, #8
 80009dc:	60fb      	str	r3, [r7, #12]
      flash_ob.PCROPConfig     = FLASH_BANK_1;
 80009de:	2301      	movs	r3, #1
 80009e0:	62bb      	str	r3, [r7, #40]	@ 0x28
      flash_ob.PCROPStartAddr  = 0x08007FFFU;
 80009e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000a18 <OPENBL_FLASH_SetReadOutProtectionLevel+0x7c>)
 80009e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      flash_ob.PCROPEndAddr    = 0x08000000U;
 80009e6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80009ea:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Change PCROP1 registers */
      HAL_FLASHEx_OBProgram(&flash_ob);
 80009ec:	f107 030c 	add.w	r3, r7, #12
 80009f0:	4618      	mov	r0, r3
 80009f2:	f001 fcb5 	bl	8002360 <HAL_FLASHEx_OBProgram>

      flash_ob.PCROPStartAddr  = 0x08047FFFU;
 80009f6:	4b09      	ldr	r3, [pc, #36]	@ (8000a1c <OPENBL_FLASH_SetReadOutProtectionLevel+0x80>)
 80009f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      flash_ob.PCROPEndAddr    = 0x08040000U;
 80009fa:	4b09      	ldr	r3, [pc, #36]	@ (8000a20 <OPENBL_FLASH_SetReadOutProtectionLevel+0x84>)
 80009fc:	633b      	str	r3, [r7, #48]	@ 0x30
      flash_ob.PCROPConfig = FLASH_BANK_2;
 80009fe:	2302      	movs	r3, #2
 8000a00:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Change PCROP2 registers */
      HAL_FLASHEx_OBProgram(&flash_ob);
 8000a02:	f107 030c 	add.w	r3, r7, #12
 8000a06:	4618      	mov	r0, r3
 8000a08:	f001 fcaa 	bl	8002360 <HAL_FLASHEx_OBProgram>
  }
  else
  {
    /* Nothing to do */
  }
}
 8000a0c:	bf00      	nop
 8000a0e:	3740      	adds	r7, #64	@ 0x40
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40022000 	.word	0x40022000
 8000a18:	08007fff 	.word	0x08007fff
 8000a1c:	08047fff 	.word	0x08047fff
 8000a20:	08040000 	.word	0x08040000

08000a24 <OPENBL_FLASH_SetWriteProtection>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Enable or disable of the write protection is done
  *          - ERROR:   Enable or disable of the write protection is not done
  */
ErrorStatus OPENBL_FLASH_SetWriteProtection(FunctionalState State, uint8_t *ListOfPages, uint32_t Length)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]
 8000a30:	73fb      	strb	r3, [r7, #15]
  ErrorStatus status = SUCCESS;
 8000a32:	2300      	movs	r3, #0
 8000a34:	75fb      	strb	r3, [r7, #23]

  if (State == ENABLE)
 8000a36:	7bfb      	ldrb	r3, [r7, #15]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d104      	bne.n	8000a46 <OPENBL_FLASH_SetWriteProtection+0x22>
  {
    OPENBL_FLASH_EnableWriteProtection(ListOfPages, Length);
 8000a3c:	6879      	ldr	r1, [r7, #4]
 8000a3e:	68b8      	ldr	r0, [r7, #8]
 8000a40:	f000 f89e 	bl	8000b80 <OPENBL_FLASH_EnableWriteProtection>
 8000a44:	e007      	b.n	8000a56 <OPENBL_FLASH_SetWriteProtection+0x32>
  }
  else if (State == DISABLE)
 8000a46:	7bfb      	ldrb	r3, [r7, #15]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d102      	bne.n	8000a52 <OPENBL_FLASH_SetWriteProtection+0x2e>
  {
    OPENBL_FLASH_DisableWriteProtection();
 8000a4c:	f000 f91c 	bl	8000c88 <OPENBL_FLASH_DisableWriteProtection>
 8000a50:	e001      	b.n	8000a56 <OPENBL_FLASH_SetWriteProtection+0x32>
  }
  else
  {
    status = ERROR;
 8000a52:	2301      	movs	r3, #1
 8000a54:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8000a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3718      	adds	r7, #24
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <OPENBL_FLASH_Erase>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Erase operation done
  *          - ERROR:   Erase operation failed or the value of one parameter is not ok
  */
ErrorStatus OPENBL_FLASH_Erase(uint8_t *p_Data, uint32_t DataLength)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08c      	sub	sp, #48	@ 0x30
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
  uint32_t counter      = 0U;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pages_number = 0U;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	623b      	str	r3, [r7, #32]
  uint32_t page_error   = 0U;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
  uint32_t errors       = 0U;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62bb      	str	r3, [r7, #40]	@ 0x28
  ErrorStatus status    = SUCCESS;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  FLASH_EraseInitTypeDef erase_init_struct;

  /* Unlock the flash memory for erase operation */
  OPENBL_FLASH_Unlock();
 8000a80:	f7ff ff11 	bl	80008a6 <OPENBL_FLASH_Unlock>

  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8000a84:	4b2f      	ldr	r3, [pc, #188]	@ (8000b44 <OPENBL_FLASH_Erase+0xe4>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	4a2e      	ldr	r2, [pc, #184]	@ (8000b44 <OPENBL_FLASH_Erase+0xe4>)
 8000a8a:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8000a8e:	6193      	str	r3, [r2, #24]
 8000a90:	4b2c      	ldr	r3, [pc, #176]	@ (8000b44 <OPENBL_FLASH_Erase+0xe4>)
 8000a92:	f24c 32fa 	movw	r2, #50170	@ 0xc3fa
 8000a96:	611a      	str	r2, [r3, #16]

  pages_number  = (uint32_t)(*(uint16_t *)(p_Data));
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	881b      	ldrh	r3, [r3, #0]
 8000a9c:	623b      	str	r3, [r7, #32]
  p_Data       += 2;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	3302      	adds	r3, #2
 8000aa2:	607b      	str	r3, [r7, #4]

  erase_init_struct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60fb      	str	r3, [r7, #12]
  erase_init_struct.NbPages   = 1U;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	61bb      	str	r3, [r7, #24]

  for (counter = 0U; ((counter < pages_number) && (counter < (DataLength / 2U))) ; counter++)
 8000aac:	2300      	movs	r3, #0
 8000aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ab0:	e02d      	b.n	8000b0e <OPENBL_FLASH_Erase+0xae>
  {
    erase_init_struct.Page = ((uint32_t)(*(uint16_t *)(p_Data)));
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	881b      	ldrh	r3, [r3, #0]
 8000ab6:	617b      	str	r3, [r7, #20]

    if (erase_init_struct.Page <= 127)
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	2b7f      	cmp	r3, #127	@ 0x7f
 8000abc:	d802      	bhi.n	8000ac4 <OPENBL_FLASH_Erase+0x64>
    {
      erase_init_struct.Banks = FLASH_BANK_1;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	e008      	b.n	8000ad6 <OPENBL_FLASH_Erase+0x76>
    }
    else if (erase_init_struct.Page <= 255)
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	2bff      	cmp	r3, #255	@ 0xff
 8000ac8:	d802      	bhi.n	8000ad0 <OPENBL_FLASH_Erase+0x70>
    {
      erase_init_struct.Banks = FLASH_BANK_2;
 8000aca:	2302      	movs	r3, #2
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	e002      	b.n	8000ad6 <OPENBL_FLASH_Erase+0x76>
    }
    else
    {
      status = ERROR;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if (status != ERROR)
 8000ad6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d00e      	beq.n	8000afc <OPENBL_FLASH_Erase+0x9c>
    {
      if (HAL_FLASHEx_Erase(&erase_init_struct, &page_error) != HAL_OK)
 8000ade:	f107 021c 	add.w	r2, r7, #28
 8000ae2:	f107 030c 	add.w	r3, r7, #12
 8000ae6:	4611      	mov	r1, r2
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f001 fb9d 	bl	8002228 <HAL_FLASHEx_Erase>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d006      	beq.n	8000b02 <OPENBL_FLASH_Erase+0xa2>
      {
        errors++;
 8000af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000af6:	3301      	adds	r3, #1
 8000af8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000afa:	e002      	b.n	8000b02 <OPENBL_FLASH_Erase+0xa2>
      }
    }
    else
    {
      /* Reset the status for next erase operation */
      status = SUCCESS;
 8000afc:	2300      	movs	r3, #0
 8000afe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    p_Data += 2;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	3302      	adds	r3, #2
 8000b06:	607b      	str	r3, [r7, #4]
  for (counter = 0U; ((counter < pages_number) && (counter < (DataLength / 2U))) ; counter++)
 8000b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000b10:	6a3b      	ldr	r3, [r7, #32]
 8000b12:	429a      	cmp	r2, r3
 8000b14:	d204      	bcs.n	8000b20 <OPENBL_FLASH_Erase+0xc0>
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d3c8      	bcc.n	8000ab2 <OPENBL_FLASH_Erase+0x52>
  }

  /* Lock the Flash to disable the flash control register access */
  OPENBL_FLASH_Lock();
 8000b20:	f7ff fec7 	bl	80008b2 <OPENBL_FLASH_Lock>

  if (errors > 0)
 8000b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d003      	beq.n	8000b32 <OPENBL_FLASH_Erase+0xd2>
  {
    status = ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000b30:	e002      	b.n	8000b38 <OPENBL_FLASH_Erase+0xd8>
  }
  else
  {
    status = SUCCESS;
 8000b32:	2300      	movs	r3, #0
 8000b34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return status;
 8000b38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3730      	adds	r7, #48	@ 0x30
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40022000 	.word	0x40022000

08000b48 <OPENBL_FLASH_ProgramDoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None.
  */
static void OPENBL_FLASH_ProgramDoubleWord(uint32_t Address, uint64_t Data)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	e9c7 2300 	strd	r2, r3, [r7]
  /* Clear all FLASH errors flags before starting write operation */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8000b54:	4b09      	ldr	r3, [pc, #36]	@ (8000b7c <OPENBL_FLASH_ProgramDoubleWord+0x34>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	4a08      	ldr	r2, [pc, #32]	@ (8000b7c <OPENBL_FLASH_ProgramDoubleWord+0x34>)
 8000b5a:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8000b5e:	6193      	str	r3, [r2, #24]
 8000b60:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <OPENBL_FLASH_ProgramDoubleWord+0x34>)
 8000b62:	f24c 32fa 	movw	r2, #50170	@ 0xc3fa
 8000b66:	611a      	str	r2, [r3, #16]

  HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, Data);
 8000b68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000b6c:	68f9      	ldr	r1, [r7, #12]
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f001 f9cc 	bl	8001f0c <HAL_FLASH_Program>
}
 8000b74:	bf00      	nop
 8000b76:	3710      	adds	r7, #16
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40022000 	.word	0x40022000

08000b80 <OPENBL_FLASH_EnableWriteProtection>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Enable or disable of the write protection is done
  *          - ERROR:   Enable or disable of the write protection is not done
  */
static ErrorStatus OPENBL_FLASH_EnableWriteProtection(uint8_t *ListOfPages, uint32_t Length)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b090      	sub	sp, #64	@ 0x40
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
  uint8_t wrp_start_offset = 0x7F;
 8000b8a:	237f      	movs	r3, #127	@ 0x7f
 8000b8c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint8_t wrp_end_offset   = 0x00;
 8000b90:	2300      	movs	r3, #0
 8000b92:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  ErrorStatus status       = SUCCESS;
 8000b96:	2300      	movs	r3, #0
 8000b98:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  FLASH_OBProgramInitTypeDef flash_ob;

  /* Unlock the FLASH registers & Option Bytes registers access */
  OPENBL_FLASH_OB_Unlock();
 8000b9c:	f7ff fe8f 	bl	80008be <OPENBL_FLASH_OB_Unlock>

  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8000ba0:	4b38      	ldr	r3, [pc, #224]	@ (8000c84 <OPENBL_FLASH_EnableWriteProtection+0x104>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	4a37      	ldr	r2, [pc, #220]	@ (8000c84 <OPENBL_FLASH_EnableWriteProtection+0x104>)
 8000ba6:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8000baa:	6193      	str	r3, [r2, #24]
 8000bac:	4b35      	ldr	r3, [pc, #212]	@ (8000c84 <OPENBL_FLASH_EnableWriteProtection+0x104>)
 8000bae:	f24c 32fa 	movw	r2, #50170	@ 0xc3fa
 8000bb2:	611a      	str	r2, [r3, #16]

  flash_ob.OptionType = OPTIONBYTE_WRP;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	60bb      	str	r3, [r7, #8]

  /* Write protection of bank 1 area WRPA 1 area */
  if (Length >= 2)
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d914      	bls.n	8000be8 <OPENBL_FLASH_EnableWriteProtection+0x68>
  {
    wrp_start_offset = *(ListOfPages);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    wrp_end_offset   = *(ListOfPages + 1);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	785b      	ldrb	r3, [r3, #1]
 8000bca:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

    flash_ob.WRPArea        = OB_WRPAREA_BANK1_AREAA;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
    flash_ob.WRPStartOffset = wrp_start_offset;
 8000bd2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000bd6:	613b      	str	r3, [r7, #16]
    flash_ob.WRPEndOffset   = wrp_end_offset;
 8000bd8:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000bdc:	617b      	str	r3, [r7, #20]

    HAL_FLASHEx_OBProgram(&flash_ob);
 8000bde:	f107 0308 	add.w	r3, r7, #8
 8000be2:	4618      	mov	r0, r3
 8000be4:	f001 fbbc 	bl	8002360 <HAL_FLASHEx_OBProgram>
  }

  /* Write protection of bank 1 area WRPA 2 area */
  if (Length >= 4)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	2b03      	cmp	r3, #3
 8000bec:	d914      	bls.n	8000c18 <OPENBL_FLASH_EnableWriteProtection+0x98>
  {
    wrp_start_offset = *(ListOfPages + 2);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	789b      	ldrb	r3, [r3, #2]
 8000bf2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    wrp_end_offset   = *(ListOfPages + 3);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	78db      	ldrb	r3, [r3, #3]
 8000bfa:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

    flash_ob.WRPArea        = OB_WRPAREA_BANK1_AREAB;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	60fb      	str	r3, [r7, #12]
    flash_ob.WRPStartOffset = wrp_start_offset;
 8000c02:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000c06:	613b      	str	r3, [r7, #16]
    flash_ob.WRPEndOffset   = wrp_end_offset;
 8000c08:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000c0c:	617b      	str	r3, [r7, #20]

    HAL_FLASHEx_OBProgram(&flash_ob);
 8000c0e:	f107 0308 	add.w	r3, r7, #8
 8000c12:	4618      	mov	r0, r3
 8000c14:	f001 fba4 	bl	8002360 <HAL_FLASHEx_OBProgram>
  }

  /* Write protection of bank 2 area WRPB 1 area */
  if (Length >= 6)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	2b05      	cmp	r3, #5
 8000c1c:	d914      	bls.n	8000c48 <OPENBL_FLASH_EnableWriteProtection+0xc8>
  {
    wrp_start_offset = *(ListOfPages + 4);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	791b      	ldrb	r3, [r3, #4]
 8000c22:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    wrp_end_offset   = *(ListOfPages + 5);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	795b      	ldrb	r3, [r3, #5]
 8000c2a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

    flash_ob.WRPArea        = OB_WRPAREA_BANK2_AREAA;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	60fb      	str	r3, [r7, #12]
    flash_ob.WRPStartOffset = wrp_start_offset;
 8000c32:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000c36:	613b      	str	r3, [r7, #16]
    flash_ob.WRPEndOffset   = wrp_end_offset;
 8000c38:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000c3c:	617b      	str	r3, [r7, #20]

    HAL_FLASHEx_OBProgram(&flash_ob);
 8000c3e:	f107 0308 	add.w	r3, r7, #8
 8000c42:	4618      	mov	r0, r3
 8000c44:	f001 fb8c 	bl	8002360 <HAL_FLASHEx_OBProgram>
  }

  /* Write protection of bank 2 area WRPB 2 area */
  if (Length >= 8)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	2b07      	cmp	r3, #7
 8000c4c:	d914      	bls.n	8000c78 <OPENBL_FLASH_EnableWriteProtection+0xf8>
  {
    wrp_start_offset = *(ListOfPages + 6);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	799b      	ldrb	r3, [r3, #6]
 8000c52:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    wrp_end_offset   = *(ListOfPages + 7);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	79db      	ldrb	r3, [r3, #7]
 8000c5a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

    flash_ob.WRPArea        = OB_WRPAREA_BANK2_AREAB;
 8000c5e:	2304      	movs	r3, #4
 8000c60:	60fb      	str	r3, [r7, #12]
    flash_ob.WRPStartOffset = wrp_start_offset;
 8000c62:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000c66:	613b      	str	r3, [r7, #16]
    flash_ob.WRPEndOffset   = wrp_end_offset;
 8000c68:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000c6c:	617b      	str	r3, [r7, #20]

    HAL_FLASHEx_OBProgram(&flash_ob);
 8000c6e:	f107 0308 	add.w	r3, r7, #8
 8000c72:	4618      	mov	r0, r3
 8000c74:	f001 fb74 	bl	8002360 <HAL_FLASHEx_OBProgram>
  }

  return status;
 8000c78:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3740      	adds	r7, #64	@ 0x40
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40022000 	.word	0x40022000

08000c88 <OPENBL_FLASH_DisableWriteProtection>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Enable or disable of the write protection is done
  *          - ERROR:   Enable or disable of the write protection is not done
  */
static ErrorStatus OPENBL_FLASH_DisableWriteProtection(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08e      	sub	sp, #56	@ 0x38
 8000c8c:	af00      	add	r7, sp, #0
  uint8_t wrp_start_offset = 0x7F;
 8000c8e:	237f      	movs	r3, #127	@ 0x7f
 8000c90:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint8_t wrp_end_offset   = 0x00;
 8000c94:	2300      	movs	r3, #0
 8000c96:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  ErrorStatus status       = SUCCESS;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  FLASH_OBProgramInitTypeDef flash_ob;

  /* Unlock the FLASH registers & Option Bytes registers access */
  OPENBL_FLASH_OB_Unlock();
 8000ca0:	f7ff fe0d 	bl	80008be <OPENBL_FLASH_OB_Unlock>

  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8000ca4:	4b20      	ldr	r3, [pc, #128]	@ (8000d28 <OPENBL_FLASH_DisableWriteProtection+0xa0>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	4a1f      	ldr	r2, [pc, #124]	@ (8000d28 <OPENBL_FLASH_DisableWriteProtection+0xa0>)
 8000caa:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8000cae:	6193      	str	r3, [r2, #24]
 8000cb0:	4b1d      	ldr	r3, [pc, #116]	@ (8000d28 <OPENBL_FLASH_DisableWriteProtection+0xa0>)
 8000cb2:	f24c 32fa 	movw	r2, #50170	@ 0xc3fa
 8000cb6:	611a      	str	r2, [r3, #16]

  flash_ob.OptionType = OPTIONBYTE_WRP;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	603b      	str	r3, [r7, #0]

  /* Disable write protection of bank 1 area WRPA 1 area */
  flash_ob.WRPArea        = OB_WRPAREA_BANK1_AREAA;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	607b      	str	r3, [r7, #4]
  flash_ob.WRPStartOffset = wrp_start_offset;
 8000cc0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000cc4:	60bb      	str	r3, [r7, #8]
  flash_ob.WRPEndOffset   = wrp_end_offset;
 8000cc6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000cca:	60fb      	str	r3, [r7, #12]

  HAL_FLASHEx_OBProgram(&flash_ob);
 8000ccc:	463b      	mov	r3, r7
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f001 fb46 	bl	8002360 <HAL_FLASHEx_OBProgram>

  /* Disable write protection of bank 1 area WRPA 2 area */
  flash_ob.WRPArea        = OB_WRPAREA_BANK1_AREAB;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	607b      	str	r3, [r7, #4]
  flash_ob.WRPStartOffset = wrp_start_offset;
 8000cd8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000cdc:	60bb      	str	r3, [r7, #8]
  flash_ob.WRPEndOffset   = wrp_end_offset;
 8000cde:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000ce2:	60fb      	str	r3, [r7, #12]

  HAL_FLASHEx_OBProgram(&flash_ob);
 8000ce4:	463b      	mov	r3, r7
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f001 fb3a 	bl	8002360 <HAL_FLASHEx_OBProgram>

  /* Disable write protection of bank 2 area WRPB 1 area */
  flash_ob.WRPArea        = OB_WRPAREA_BANK2_AREAA;
 8000cec:	2302      	movs	r3, #2
 8000cee:	607b      	str	r3, [r7, #4]
  flash_ob.WRPStartOffset = wrp_start_offset;
 8000cf0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000cf4:	60bb      	str	r3, [r7, #8]
  flash_ob.WRPEndOffset   = wrp_end_offset;
 8000cf6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000cfa:	60fb      	str	r3, [r7, #12]

  HAL_FLASHEx_OBProgram(&flash_ob);
 8000cfc:	463b      	mov	r3, r7
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f001 fb2e 	bl	8002360 <HAL_FLASHEx_OBProgram>

  /* Disable write protection of bank 2 area WRPB 2 area */
  flash_ob.WRPArea        = OB_WRPAREA_BANK2_AREAB;
 8000d04:	2304      	movs	r3, #4
 8000d06:	607b      	str	r3, [r7, #4]
  flash_ob.WRPStartOffset = wrp_start_offset;
 8000d08:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000d0c:	60bb      	str	r3, [r7, #8]
  flash_ob.WRPEndOffset   = wrp_end_offset;
 8000d0e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000d12:	60fb      	str	r3, [r7, #12]

  HAL_FLASHEx_OBProgram(&flash_ob);
 8000d14:	463b      	mov	r3, r7
 8000d16:	4618      	mov	r0, r3
 8000d18:	f001 fb22 	bl	8002360 <HAL_FLASHEx_OBProgram>

  return status;
 8000d1c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3738      	adds	r7, #56	@ 0x38
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40022000 	.word	0x40022000

08000d2c <OPENBL_IWDG_Configuration>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
/* Exported functions --------------------------------------------------------*/

void OPENBL_IWDG_Configuration(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  IWDGHandle.Instance       = IWDG;
 8000d30:	4b0e      	ldr	r3, [pc, #56]	@ (8000d6c <OPENBL_IWDG_Configuration+0x40>)
 8000d32:	4a0f      	ldr	r2, [pc, #60]	@ (8000d70 <OPENBL_IWDG_Configuration+0x44>)
 8000d34:	601a      	str	r2, [r3, #0]
  IWDGHandle.Init.Prescaler = IWDG_PRESCALER_256;
 8000d36:	4b0d      	ldr	r3, [pc, #52]	@ (8000d6c <OPENBL_IWDG_Configuration+0x40>)
 8000d38:	2206      	movs	r2, #6
 8000d3a:	605a      	str	r2, [r3, #4]
  IWDGHandle.Init.Window    = IWDG_WINDOW_DISABLE;
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d6c <OPENBL_IWDG_Configuration+0x40>)
 8000d3e:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000d42:	60da      	str	r2, [r3, #12]
  IWDGHandle.Init.Reload    = IWDG_KEY_RELOAD;
 8000d44:	4b09      	ldr	r3, [pc, #36]	@ (8000d6c <OPENBL_IWDG_Configuration+0x40>)
 8000d46:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8000d4a:	609a      	str	r2, [r3, #8]

  /* In case the user has enabled the IWDG through HW before entering the Open Bootloader */
  IWDG->KR = IWDG_KEY_WRITE_ACCESS_ENABLE;
 8000d4c:	4b08      	ldr	r3, [pc, #32]	@ (8000d70 <OPENBL_IWDG_Configuration+0x44>)
 8000d4e:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000d52:	601a      	str	r2, [r3, #0]
  IWDG->PR = IWDG_PRESCALER_256;
 8000d54:	4b06      	ldr	r3, [pc, #24]	@ (8000d70 <OPENBL_IWDG_Configuration+0x44>)
 8000d56:	2206      	movs	r2, #6
 8000d58:	605a      	str	r2, [r3, #4]
  IWDG->KR = IWDG_KEY_RELOAD;
 8000d5a:	4b05      	ldr	r3, [pc, #20]	@ (8000d70 <OPENBL_IWDG_Configuration+0x44>)
 8000d5c:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8000d60:	601a      	str	r2, [r3, #0]
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	20000c30 	.word	0x20000c30
 8000d70:	40003000 	.word	0x40003000

08000d74 <OPENBL_IWDG_Refresh>:

void OPENBL_IWDG_Refresh(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* Refresh IWDG: reload counter */
  if (HAL_IWDG_Refresh(&IWDGHandle) != HAL_OK)
 8000d78:	4804      	ldr	r0, [pc, #16]	@ (8000d8c <OPENBL_IWDG_Refresh+0x18>)
 8000d7a:	f002 fac9 	bl	8003310 <HAL_IWDG_Refresh>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <OPENBL_IWDG_Refresh+0x14>
  {
    /* Refresh Error */
    Error_Handler();
 8000d84:	f7ff fac3 	bl	800030e <Error_Handler>
  }
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000c30 	.word	0x20000c30

08000d90 <OPENBL_OB_Read>:
  * @brief  This function is used to read data from a given address.
  * @param  Address The address to be read.
  * @retval Returns the read value.
  */
uint8_t OPENBL_OB_Read(uint32_t Address)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  return (*(uint8_t *)(Address));
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	781b      	ldrb	r3, [r3, #0]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <OPENBL_OB_Write>:
  * @param  Data The data to be written.
  * @param  DataLength The length of the data to be written.
  * @retval None.
  */
void OPENBL_OB_Write(uint32_t Address, uint8_t *Data, uint32_t DataLength)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  /* Unlock the FLASH & Option Bytes Registers access */
  HAL_FLASH_Unlock();
 8000db4:	f001 f916 	bl	8001fe4 <HAL_FLASH_Unlock>
  HAL_FLASH_OB_Unlock();
 8000db8:	f001 f950 	bl	800205c <HAL_FLASH_OB_Unlock>

  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8000dbc:	4b69      	ldr	r3, [pc, #420]	@ (8000f64 <OPENBL_OB_Write+0x1bc>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	4a68      	ldr	r2, [pc, #416]	@ (8000f64 <OPENBL_OB_Write+0x1bc>)
 8000dc2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8000dc6:	6193      	str	r3, [r2, #24]
 8000dc8:	4b66      	ldr	r3, [pc, #408]	@ (8000f64 <OPENBL_OB_Write+0x1bc>)
 8000dca:	f24c 32fa 	movw	r2, #50170	@ 0xc3fa
 8000dce:	611a      	str	r2, [r3, #16]

  /* Write RDP Level */
  if (DataLength >= 1)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d003      	beq.n	8000dde <OPENBL_OB_Write+0x36>
  {
    WRITE_REG(FLASH->OPTR, *(Data));
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	781a      	ldrb	r2, [r3, #0]
 8000dda:	4b62      	ldr	r3, [pc, #392]	@ (8000f64 <OPENBL_OB_Write+0x1bc>)
 8000ddc:	621a      	str	r2, [r3, #32]
  }

  /* Write USER OPT */
  if (DataLength >= 4)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2b03      	cmp	r3, #3
 8000de2:	d913      	bls.n	8000e0c <OPENBL_OB_Write+0x64>
  {
    WRITE_REG(FLASH->OPTR, (*(Data) | (*(Data + 1) << 8) | (*(Data + 2) << 16) | (*(Data + 3) << 24)));
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	461a      	mov	r2, r3
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	3301      	adds	r3, #1
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	021b      	lsls	r3, r3, #8
 8000df2:	431a      	orrs	r2, r3
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	3302      	adds	r3, #2
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	041b      	lsls	r3, r3, #16
 8000dfc:	431a      	orrs	r2, r3
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	3303      	adds	r3, #3
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	061b      	lsls	r3, r3, #24
 8000e06:	431a      	orrs	r2, r3
 8000e08:	4b56      	ldr	r3, [pc, #344]	@ (8000f64 <OPENBL_OB_Write+0x1bc>)
 8000e0a:	621a      	str	r2, [r3, #32]
  }

  /* Write PCROPA */
  if (DataLength >= 10)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2b09      	cmp	r3, #9
 8000e10:	d915      	bls.n	8000e3e <OPENBL_OB_Write+0x96>
  {
    WRITE_REG(FLASH->PCROP1SR, (*(Data + 8) | (*(Data + 9) << 8)));
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	3308      	adds	r3, #8
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	3309      	adds	r3, #9
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	021b      	lsls	r3, r3, #8
 8000e22:	431a      	orrs	r2, r3
 8000e24:	4b4f      	ldr	r3, [pc, #316]	@ (8000f64 <OPENBL_OB_Write+0x1bc>)
 8000e26:	625a      	str	r2, [r3, #36]	@ 0x24
    WRITE_REG(FLASH->PCROP1ER, (*(Data + 16) | (*(Data + 17) << 8)));
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	3310      	adds	r3, #16
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	3311      	adds	r3, #17
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	021b      	lsls	r3, r3, #8
 8000e38:	431a      	orrs	r2, r3
 8000e3a:	4b4a      	ldr	r3, [pc, #296]	@ (8000f64 <OPENBL_OB_Write+0x1bc>)
 8000e3c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*Write PCROP_RDP */
  if (DataLength >= 20)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2b13      	cmp	r3, #19
 8000e42:	d91f      	bls.n	8000e84 <OPENBL_OB_Write+0xdc>
  {
    WRITE_REG(FLASH->PCROP1SR, (*(Data + 8) | (*(Data + 9) << 8)));
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	3308      	adds	r3, #8
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	3309      	adds	r3, #9
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	021b      	lsls	r3, r3, #8
 8000e54:	431a      	orrs	r2, r3
 8000e56:	4b43      	ldr	r3, [pc, #268]	@ (8000f64 <OPENBL_OB_Write+0x1bc>)
 8000e58:	625a      	str	r2, [r3, #36]	@ 0x24
    WRITE_REG(FLASH->PCROP1ER, (*(Data + 16) | (*(Data + 17) << 8) | (*(Data + 18) << 16) | (*(Data + 19) << 24)));
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	3310      	adds	r3, #16
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	461a      	mov	r2, r3
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	3311      	adds	r3, #17
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	021b      	lsls	r3, r3, #8
 8000e6a:	431a      	orrs	r2, r3
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	3312      	adds	r3, #18
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	041b      	lsls	r3, r3, #16
 8000e74:	431a      	orrs	r2, r3
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	3313      	adds	r3, #19
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	061b      	lsls	r3, r3, #24
 8000e7e:	431a      	orrs	r2, r3
 8000e80:	4b38      	ldr	r3, [pc, #224]	@ (8000f64 <OPENBL_OB_Write+0x1bc>)
 8000e82:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write protection of bank 1 area WRPA 1 area */
  if (DataLength >= 25)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2b18      	cmp	r3, #24
 8000e88:	d909      	bls.n	8000e9e <OPENBL_OB_Write+0xf6>
  {
    FLASH->WRP1AR = ((*(Data + 26) << FLASH_WRP1AR_WRP1A_END_Pos) | *(Data + 24));
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	331a      	adds	r3, #26
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	041b      	lsls	r3, r3, #16
 8000e92:	68ba      	ldr	r2, [r7, #8]
 8000e94:	3218      	adds	r2, #24
 8000e96:	7812      	ldrb	r2, [r2, #0]
 8000e98:	431a      	orrs	r2, r3
 8000e9a:	4b32      	ldr	r3, [pc, #200]	@ (8000f64 <OPENBL_OB_Write+0x1bc>)
 8000e9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Write protection of bank 1 area WRPA 2 area */
  if (DataLength >= 33)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b20      	cmp	r3, #32
 8000ea2:	d909      	bls.n	8000eb8 <OPENBL_OB_Write+0x110>
  {
    FLASH->WRP1BR = ((*(Data + 34) << FLASH_WRP1BR_WRP1B_END_Pos) | *(Data + 32));
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	3322      	adds	r3, #34	@ 0x22
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	041b      	lsls	r3, r3, #16
 8000eac:	68ba      	ldr	r2, [r7, #8]
 8000eae:	3220      	adds	r2, #32
 8000eb0:	7812      	ldrb	r2, [r2, #0]
 8000eb2:	431a      	orrs	r2, r3
 8000eb4:	4b2b      	ldr	r3, [pc, #172]	@ (8000f64 <OPENBL_OB_Write+0x1bc>)
 8000eb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Write STICKY area */
  if (DataLength >= 41)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b28      	cmp	r3, #40	@ 0x28
 8000ebc:	d904      	bls.n	8000ec8 <OPENBL_OB_Write+0x120>
  {
    WRITE_REG(FLASH->SEC1R, *(Data + 40));
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	3328      	adds	r3, #40	@ 0x28
 8000ec2:	781a      	ldrb	r2, [r3, #0]
 8000ec4:	4b27      	ldr	r3, [pc, #156]	@ (8000f64 <OPENBL_OB_Write+0x1bc>)
 8000ec6:	671a      	str	r2, [r3, #112]	@ 0x70
  }

  /* Write BOOT_EP */
  if (DataLength >= 43)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2b2a      	cmp	r3, #42	@ 0x2a
 8000ecc:	d904      	bls.n	8000ed8 <OPENBL_OB_Write+0x130>
  {
    WRITE_REG(FLASH->SEC1R, *(Data + 42));
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	332a      	adds	r3, #42	@ 0x2a
 8000ed2:	781a      	ldrb	r2, [r3, #0]
 8000ed4:	4b23      	ldr	r3, [pc, #140]	@ (8000f64 <OPENBL_OB_Write+0x1bc>)
 8000ed6:	671a      	str	r2, [r3, #112]	@ 0x70
  }

  /* Write PCROP of bank 2 */
  if (DataLength >= 58)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b39      	cmp	r3, #57	@ 0x39
 8000edc:	d915      	bls.n	8000f0a <OPENBL_OB_Write+0x162>
  {
    WRITE_REG(FLASH->PCROP2SR, (*(Data + 56) | (*(Data + 57) << 8)));
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	3338      	adds	r3, #56	@ 0x38
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	3339      	adds	r3, #57	@ 0x39
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	021b      	lsls	r3, r3, #8
 8000eee:	431a      	orrs	r2, r3
 8000ef0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f64 <OPENBL_OB_Write+0x1bc>)
 8000ef2:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(FLASH->PCROP2ER, (*(Data + 64) | (*(Data + 65) << 8)));
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	3340      	adds	r3, #64	@ 0x40
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	3341      	adds	r3, #65	@ 0x41
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	021b      	lsls	r3, r3, #8
 8000f04:	431a      	orrs	r2, r3
 8000f06:	4b17      	ldr	r3, [pc, #92]	@ (8000f64 <OPENBL_OB_Write+0x1bc>)
 8000f08:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  /* Write protection of bank 2 area WRPB 1 area */
  if (DataLength >= 73)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2b48      	cmp	r3, #72	@ 0x48
 8000f0e:	d909      	bls.n	8000f24 <OPENBL_OB_Write+0x17c>
  {
    FLASH->WRP2AR = ((*(Data + 74) << FLASH_WRP2AR_WRP2A_END_Pos) | *(Data + 72));
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	334a      	adds	r3, #74	@ 0x4a
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	041b      	lsls	r3, r3, #16
 8000f18:	68ba      	ldr	r2, [r7, #8]
 8000f1a:	3248      	adds	r2, #72	@ 0x48
 8000f1c:	7812      	ldrb	r2, [r2, #0]
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	4b10      	ldr	r3, [pc, #64]	@ (8000f64 <OPENBL_OB_Write+0x1bc>)
 8000f22:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /* Write protection of bank 2 area WRPB 2 area */
  if (DataLength >= 81)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2b50      	cmp	r3, #80	@ 0x50
 8000f28:	d909      	bls.n	8000f3e <OPENBL_OB_Write+0x196>
  {
    FLASH->WRP2BR = ((*(Data + 82) << FLASH_WRP2BR_WRP2B_END_Pos) | *(Data + 80));
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	3352      	adds	r3, #82	@ 0x52
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	041b      	lsls	r3, r3, #16
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	3250      	adds	r2, #80	@ 0x50
 8000f36:	7812      	ldrb	r2, [r2, #0]
 8000f38:	431a      	orrs	r2, r3
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f64 <OPENBL_OB_Write+0x1bc>)
 8000f3c:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Write STICKY area */
  if (DataLength >= 89)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2b58      	cmp	r3, #88	@ 0x58
 8000f42:	d904      	bls.n	8000f4e <OPENBL_OB_Write+0x1a6>
  {
    WRITE_REG(FLASH->SEC2R, *(Data + 88));
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	3358      	adds	r3, #88	@ 0x58
 8000f48:	781a      	ldrb	r2, [r3, #0]
 8000f4a:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <OPENBL_OB_Write+0x1bc>)
 8000f4c:	675a      	str	r2, [r3, #116]	@ 0x74
  }

  SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8000f4e:	4b05      	ldr	r3, [pc, #20]	@ (8000f64 <OPENBL_OB_Write+0x1bc>)
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	4a04      	ldr	r2, [pc, #16]	@ (8000f64 <OPENBL_OB_Write+0x1bc>)
 8000f54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f58:	6153      	str	r3, [r2, #20]
}
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40022000 	.word	0x40022000

08000f68 <OPENBL_OTP_Read>:
  * @brief  This function is used to read data from a given address.
  * @param  Address The address to be read.
  * @retval Returns the read value.
  */
uint8_t OPENBL_OTP_Read(uint32_t Address)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  return (*(uint8_t *)(Address));
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	781b      	ldrb	r3, [r3, #0]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <OPENBL_OTP_Write>:
  * @param  Data The data to be written.
  * @param  DataLength The length of the data to be written.
  * @retval None.
  */
void OPENBL_OTP_Write(uint32_t Address, uint8_t *Data, uint32_t DataLength)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
  uint32_t index  = 0U;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
  uint32_t length = DataLength;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	613b      	str	r3, [r7, #16]

  if (length & 7U)
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d004      	beq.n	8000fa8 <OPENBL_OTP_Write+0x28>
  {
    length = (length & 0xFFFFFFF8U) + 8U;
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	f023 0307 	bic.w	r3, r3, #7
 8000fa4:	3308      	adds	r3, #8
 8000fa6:	613b      	str	r3, [r7, #16]
  }

  /* Unlock the flash memory for write operation */
  HAL_FLASH_Unlock();
 8000fa8:	f001 f81c 	bl	8001fe4 <HAL_FLASH_Unlock>

  /* Clear all FLASH errors flags before starting write operation */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8000fac:	4b12      	ldr	r3, [pc, #72]	@ (8000ff8 <OPENBL_OTP_Write+0x78>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	4a11      	ldr	r2, [pc, #68]	@ (8000ff8 <OPENBL_OTP_Write+0x78>)
 8000fb2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8000fb6:	6193      	str	r3, [r2, #24]
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <OPENBL_OTP_Write+0x78>)
 8000fba:	f24c 32fa 	movw	r2, #50170	@ 0xc3fa
 8000fbe:	611a      	str	r2, [r3, #16]

  for (index = 0U; index < length; (index += 8U))
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
 8000fc4:	e00d      	b.n	8000fe2 <OPENBL_OTP_Write+0x62>
  {
    OPENBL_OTP_ProgramDoubleWord((Address + index), (uint64_t)(*((uint64_t *)((uint32_t)Data + index))));
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	18d1      	adds	r1, r2, r3
 8000fcc:	68ba      	ldr	r2, [r7, #8]
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	f000 f810 	bl	8000ffc <OPENBL_OTP_ProgramDoubleWord>
  for (index = 0U; index < length; (index += 8U))
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	3308      	adds	r3, #8
 8000fe0:	617b      	str	r3, [r7, #20]
 8000fe2:	697a      	ldr	r2, [r7, #20]
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d3ed      	bcc.n	8000fc6 <OPENBL_OTP_Write+0x46>
  }

  /* Lock the Flash to disable the flash control register access */
  HAL_FLASH_Lock();
 8000fea:	f001 f81d 	bl	8002028 <HAL_FLASH_Lock>
}
 8000fee:	bf00      	nop
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40022000 	.word	0x40022000

08000ffc <OPENBL_OTP_ProgramDoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None.
  */
static void OPENBL_OTP_ProgramDoubleWord(uint32_t Address, uint64_t Data)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, Data);
 8001008:	e9d7 2300 	ldrd	r2, r3, [r7]
 800100c:	68f9      	ldr	r1, [r7, #12]
 800100e:	2000      	movs	r0, #0
 8001010:	f000 ff7c 	bl	8001f0c <HAL_FLASH_Program>
}
 8001014:	bf00      	nop
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <OPENBL_RAM_Read>:
  * @brief  This function is used to read data from a given address.
  * @param  Address The address to be read.
  * @retval Returns the read value.
  */
uint8_t OPENBL_RAM_Read(uint32_t Address)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  return (*(uint8_t *)(Address));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	781b      	ldrb	r3, [r3, #0]
}
 8001028:	4618      	mov	r0, r3
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <OPENBL_RAM_Write>:
  * @param  Data The data to be written.
  * @param  DataLength The length of the data to be written.
  * @retval None.
  */
void OPENBL_RAM_Write(uint32_t Address, uint8_t *Data, uint32_t DataLength)
{
 8001034:	b480      	push	{r7}
 8001036:	b087      	sub	sp, #28
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
  uint32_t index          = 0U;
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
  uint32_t aligned_length = DataLength;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	613b      	str	r3, [r7, #16]

  if (aligned_length & 0x3)
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	2b00      	cmp	r3, #0
 8001050:	d004      	beq.n	800105c <OPENBL_RAM_Write+0x28>
  {
    aligned_length = (aligned_length & 0xFCU) + 4U;
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8001058:	3304      	adds	r3, #4
 800105a:	613b      	str	r3, [r7, #16]
  }

  for (index = 0U; index < aligned_length; index += 4U)
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
 8001060:	e00a      	b.n	8001078 <OPENBL_RAM_Write+0x44>
  {
    *(__IO uint32_t *)(Address + index) = *(__IO uint32_t *)(Data + index);
 8001062:	68ba      	ldr	r2, [r7, #8]
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	4413      	add	r3, r2
 8001068:	68f9      	ldr	r1, [r7, #12]
 800106a:	697a      	ldr	r2, [r7, #20]
 800106c:	440a      	add	r2, r1
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6013      	str	r3, [r2, #0]
  for (index = 0U; index < aligned_length; index += 4U)
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	3304      	adds	r3, #4
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	697a      	ldr	r2, [r7, #20]
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	429a      	cmp	r2, r3
 800107e:	d3f0      	bcc.n	8001062 <OPENBL_RAM_Write+0x2e>
  }
}
 8001080:	bf00      	nop
 8001082:	bf00      	nop
 8001084:	371c      	adds	r7, #28
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <OPENBL_RAM_JumpToAddress>:
  * @brief  This function is used to jump to a given address.
  * @param  Address The address where the function will jump.
  * @retval None.
  */
void OPENBL_RAM_JumpToAddress(uint32_t Address)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b084      	sub	sp, #16
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
  Function_Pointer jump_to_address;

  /* Deinitialize all HW resources used by the Bootloader to their reset values */
  OpenBootloader_DeInit();
 8001096:	f7ff fa83 	bl	80005a0 <OpenBootloader_DeInit>

  /* Enable IRQ */
  Common_EnableIrq();
 800109a:	f7ff fbfb 	bl	8000894 <Common_EnableIrq>

  jump_to_address = (Function_Pointer)(*(__IO uint32_t *)(Address + 4U));
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	3304      	adds	r3, #4
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	60fb      	str	r3, [r7, #12]

  /* Initialize user application's stack pointer */
  Common_SetMsp(*(__IO uint32_t *) Address);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fbe2 	bl	8000874 <Common_SetMsp>

  jump_to_address();
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4798      	blx	r3
}
 80010b4:	bf00      	nop
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <OPENBL_ICP_Read>:
  * @brief  This function is used to read data from a given address.
  * @param  Address The address to be read.
  * @retval Returns the read value.
  */
uint8_t OPENBL_ICP_Read(uint32_t Address)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  return (*(uint8_t *)(Address));
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	781b      	ldrb	r3, [r3, #0]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f043 0201 	orr.w	r2, r3, #1
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	601a      	str	r2, [r3, #0]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <LL_USART_EnableAutoBaudRate>:
  * @rmtoll CR2          ABREN         LL_USART_EnableAutoBaudRate
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableAutoBaudRate(USART_TypeDef *USARTx)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR2, USART_CR2_ABREN);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	605a      	str	r2, [r3, #4]
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <LL_USART_SetAutoBaudRateMode>:
  *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_7F_FRAME
  *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_55_FRAME
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetAutoBaudRateMode(USART_TypeDef *USARTx, uint32_t AutoBaudRateMode)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_ABRMODE, AutoBaudRateMode);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f423 02c0 	bic.w	r2, r3, #6291456	@ 0x600000
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	431a      	orrs	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	605a      	str	r2, [r3, #4]
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <LL_USART_IsActiveFlag_RXNE_RXFNE>:
  * @rmtoll ISR          RXNE_RXFNE    LL_USART_IsActiveFlag_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE_RXFNE(const USART_TypeDef *USARTx)
{
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	f003 0320 	and.w	r3, r3, #32
 800114a:	2b20      	cmp	r3, #32
 800114c:	d101      	bne.n	8001152 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 800114e:	2301      	movs	r3, #1
 8001150:	e000      	b.n	8001154 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8001152:	2300      	movs	r3, #0
}
 8001154:	4618      	mov	r0, r3
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	69db      	ldr	r3, [r3, #28]
 800116c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001170:	2b40      	cmp	r3, #64	@ 0x40
 8001172:	d101      	bne.n	8001178 <LL_USART_IsActiveFlag_TC+0x18>
 8001174:	2301      	movs	r3, #1
 8001176:	e000      	b.n	800117a <LL_USART_IsActiveFlag_TC+0x1a>
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8001186:	b480      	push	{r7}
 8001188:	b083      	sub	sp, #12
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001192:	b2db      	uxtb	r3, r3
}
 8001194:	4618      	mov	r0, r3
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 80011ac:	78fa      	ldrb	r2, [r7, #3]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
	...

080011c0 <OPENBL_USART_Init>:
static void OPENBL_USART_Init(void);

/* Private functions ---------------------------------------------------------*/

static void OPENBL_USART_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct;

  USART_InitStruct.PrescalerValue      = LL_USART_PRESCALER_DIV1;
 80011c6:	2300      	movs	r3, #0
 80011c8:	603b      	str	r3, [r7, #0]
  USART_InitStruct.BaudRate            = 115200U;
 80011ca:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80011ce:	607b      	str	r3, [r7, #4]
  USART_InitStruct.DataWidth           = LL_USART_DATAWIDTH_9B;
 80011d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011d4:	60bb      	str	r3, [r7, #8]
  USART_InitStruct.StopBits            = LL_USART_STOPBITS_1;
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
  USART_InitStruct.Parity              = LL_USART_PARITY_EVEN;
 80011da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011de:	613b      	str	r3, [r7, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.TransferDirection   = LL_USART_DIRECTION_TX_RX;
 80011e4:	230c      	movs	r3, #12
 80011e6:	617b      	str	r3, [r7, #20]
  USART_InitStruct.OverSampling        = LL_USART_OVERSAMPLING_16;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]

  if (IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx))
  {
    LL_USART_EnableAutoBaudRate(USARTx);
 80011ec:	4809      	ldr	r0, [pc, #36]	@ (8001214 <OPENBL_USART_Init+0x54>)
 80011ee:	f7ff ff81 	bl	80010f4 <LL_USART_EnableAutoBaudRate>
    LL_USART_SetAutoBaudRateMode(USARTx, LL_USART_AUTOBAUD_DETECT_ON_7F_FRAME);
 80011f2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80011f6:	4807      	ldr	r0, [pc, #28]	@ (8001214 <OPENBL_USART_Init+0x54>)
 80011f8:	f7ff ff8c 	bl	8001114 <LL_USART_SetAutoBaudRateMode>
  {
    LL_USART_DisableAutoBaudRate(USARTx);
    USART_InitStruct.BaudRate = 115200;
  }

  LL_USART_Init(USARTx, &USART_InitStruct);
 80011fc:	463b      	mov	r3, r7
 80011fe:	4619      	mov	r1, r3
 8001200:	4804      	ldr	r0, [pc, #16]	@ (8001214 <OPENBL_USART_Init+0x54>)
 8001202:	f003 fdff 	bl	8004e04 <LL_USART_Init>
  LL_USART_Enable(USARTx);
 8001206:	4803      	ldr	r0, [pc, #12]	@ (8001214 <OPENBL_USART_Init+0x54>)
 8001208:	f7ff ff64 	bl	80010d4 <LL_USART_Enable>
}
 800120c:	bf00      	nop
 800120e:	3720      	adds	r7, #32
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40013800 	.word	0x40013800

08001218 <OPENBL_USART_Configuration>:
/**
 * @brief  This function is used to configure USART pins and then initialize the used USART instance.
 * @retval None.
 */
void OPENBL_USART_Configuration(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b088      	sub	sp, #32
 800121c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable all resources clocks --------------------------------------------*/
  /* Enable used GPIOx clocks */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	4b1d      	ldr	r3, [pc, #116]	@ (8001294 <OPENBL_USART_Configuration+0x7c>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001222:	4a1c      	ldr	r2, [pc, #112]	@ (8001294 <OPENBL_USART_Configuration+0x7c>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800122a:	4b1a      	ldr	r3, [pc, #104]	@ (8001294 <OPENBL_USART_Configuration+0x7c>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]

  /* Enable USART clock */
  __HAL_RCC_USART1_CLK_ENABLE();
 8001236:	4b17      	ldr	r3, [pc, #92]	@ (8001294 <OPENBL_USART_Configuration+0x7c>)
 8001238:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800123a:	4a16      	ldr	r2, [pc, #88]	@ (8001294 <OPENBL_USART_Configuration+0x7c>)
 800123c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001240:	6613      	str	r3, [r2, #96]	@ 0x60
 8001242:	4b14      	ldr	r3, [pc, #80]	@ (8001294 <OPENBL_USART_Configuration+0x7c>)
 8001244:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001246:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
     | TX  |     PA9     |
     +-----+-------------+
     | RX  |     PA10    |
     +-----+-------------+ */

  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 800124e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001252:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8001258:	2301      	movs	r3, #1
 800125a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 800125c:	2302      	movs	r3, #2
 800125e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = USARTx_ALTERNATE;
 8001260:	2307      	movs	r3, #7
 8001262:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	4619      	mov	r1, r3
 800126a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800126e:	f001 fe9b 	bl	8002fa8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8001272:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001276:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8001278:	f107 030c 	add.w	r3, r7, #12
 800127c:	4619      	mov	r1, r3
 800127e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001282:	f001 fe91 	bl	8002fa8 <HAL_GPIO_Init>

  OPENBL_USART_Init();
 8001286:	f7ff ff9b 	bl	80011c0 <OPENBL_USART_Init>
}
 800128a:	bf00      	nop
 800128c:	3720      	adds	r7, #32
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40021000 	.word	0x40021000

08001298 <OPENBL_USART_ProtocolDetection>:
/**
 * @brief  This function is used to detect if there is any activity on USART protocol.
 * @retval None.
 */
uint8_t OPENBL_USART_ProtocolDetection(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
  uint8_t detected;

  /* Check if the USART1 is addressed */
  if (((USART1->ISR & LL_USART_ISR_ABRF) != 0) && ((USART1->ISR & LL_USART_ISR_ABRE) == 0))
 800129e:	4b0d      	ldr	r3, [pc, #52]	@ (80012d4 <OPENBL_USART_ProtocolDetection+0x3c>)
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d00d      	beq.n	80012c6 <OPENBL_USART_ProtocolDetection+0x2e>
 80012aa:	4b0a      	ldr	r3, [pc, #40]	@ (80012d4 <OPENBL_USART_ProtocolDetection+0x3c>)
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d107      	bne.n	80012c6 <OPENBL_USART_ProtocolDetection+0x2e>
  {
    /* Read byte in order to flush the 0x7F synchronization byte */
    OPENBL_USART_ReadByte();
 80012b6:	f000 f829 	bl	800130c <OPENBL_USART_ReadByte>

    /* Acknowledge the host */
    OPENBL_USART_SendByte(ACK_BYTE);
 80012ba:	2079      	movs	r0, #121	@ 0x79
 80012bc:	f000 f83a 	bl	8001334 <OPENBL_USART_SendByte>

    detected = 1;
 80012c0:	2301      	movs	r3, #1
 80012c2:	71fb      	strb	r3, [r7, #7]
 80012c4:	e001      	b.n	80012ca <OPENBL_USART_ProtocolDetection+0x32>
  }
  else
  {
    detected = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	71fb      	strb	r3, [r7, #7]
  }

  return detected;
 80012ca:	79fb      	ldrb	r3, [r7, #7]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40013800 	.word	0x40013800

080012d8 <OPENBL_USART_GetCommandOpcode>:
/**
 * @brief  This function is used to get the command opcode from the host.
 * @retval Returns the command.
 */
uint8_t OPENBL_USART_GetCommandOpcode(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
  uint8_t command_opc = 0x0;
 80012de:	2300      	movs	r3, #0
 80012e0:	71fb      	strb	r3, [r7, #7]

  /* Get the command opcode */
  command_opc = OPENBL_USART_ReadByte();
 80012e2:	f000 f813 	bl	800130c <OPENBL_USART_ReadByte>
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]

  /* Check the data integrity */
  if ((command_opc ^ OPENBL_USART_ReadByte()) != 0xFF)
 80012ea:	f000 f80f 	bl	800130c <OPENBL_USART_ReadByte>
 80012ee:	4603      	mov	r3, r0
 80012f0:	461a      	mov	r2, r3
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	4053      	eors	r3, r2
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	2bff      	cmp	r3, #255	@ 0xff
 80012fa:	d001      	beq.n	8001300 <OPENBL_USART_GetCommandOpcode+0x28>
  {
    command_opc = ERROR_COMMAND;
 80012fc:	23ec      	movs	r3, #236	@ 0xec
 80012fe:	71fb      	strb	r3, [r7, #7]
  else
  {
    /* nothing to do */
  }

  return command_opc;
 8001300:	79fb      	ldrb	r3, [r7, #7]
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <OPENBL_USART_ReadByte>:
/**
  * @brief  This function is used to read one byte from USART pipe.
  * @retval Returns the read byte.
  */
uint8_t OPENBL_USART_ReadByte(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  while (!LL_USART_IsActiveFlag_RXNE_RXFNE(USARTx))
 8001310:	e001      	b.n	8001316 <OPENBL_USART_ReadByte+0xa>
  {
    OPENBL_IWDG_Refresh();
 8001312:	f7ff fd2f 	bl	8000d74 <OPENBL_IWDG_Refresh>
  while (!LL_USART_IsActiveFlag_RXNE_RXFNE(USARTx))
 8001316:	4806      	ldr	r0, [pc, #24]	@ (8001330 <OPENBL_USART_ReadByte+0x24>)
 8001318:	f7ff ff0f 	bl	800113a <LL_USART_IsActiveFlag_RXNE_RXFNE>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d0f7      	beq.n	8001312 <OPENBL_USART_ReadByte+0x6>
  }

  return LL_USART_ReceiveData8(USARTx);
 8001322:	4803      	ldr	r0, [pc, #12]	@ (8001330 <OPENBL_USART_ReadByte+0x24>)
 8001324:	f7ff ff2f 	bl	8001186 <LL_USART_ReceiveData8>
 8001328:	4603      	mov	r3, r0
}
 800132a:	4618      	mov	r0, r3
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40013800 	.word	0x40013800

08001334 <OPENBL_USART_SendByte>:
  * @brief  This function is used to send one byte through USART pipe.
  * @param  Byte The byte to be sent.
  * @retval None.
  */
void OPENBL_USART_SendByte(uint8_t Byte)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]
  LL_USART_TransmitData8(USARTx, (Byte & 0xFF));
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	4619      	mov	r1, r3
 8001342:	4807      	ldr	r0, [pc, #28]	@ (8001360 <OPENBL_USART_SendByte+0x2c>)
 8001344:	f7ff ff2c 	bl	80011a0 <LL_USART_TransmitData8>

  while (!LL_USART_IsActiveFlag_TC(USARTx))
 8001348:	bf00      	nop
 800134a:	4805      	ldr	r0, [pc, #20]	@ (8001360 <OPENBL_USART_SendByte+0x2c>)
 800134c:	f7ff ff08 	bl	8001160 <LL_USART_IsActiveFlag_TC>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d0f9      	beq.n	800134a <OPENBL_USART_SendByte+0x16>
  {
  }
}
 8001356:	bf00      	nop
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40013800 	.word	0x40013800

08001364 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001364:	480d      	ldr	r0, [pc, #52]	@ (800139c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001366:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001368:	480d      	ldr	r0, [pc, #52]	@ (80013a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800136a:	490e      	ldr	r1, [pc, #56]	@ (80013a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800136c:	4a0e      	ldr	r2, [pc, #56]	@ (80013a8 <LoopForever+0xe>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001370:	e002      	b.n	8001378 <LoopCopyDataInit>

08001372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001376:	3304      	adds	r3, #4

08001378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800137a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800137c:	d3f9      	bcc.n	8001372 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137e:	4a0b      	ldr	r2, [pc, #44]	@ (80013ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001380:	4c0b      	ldr	r4, [pc, #44]	@ (80013b0 <LoopForever+0x16>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001384:	e001      	b.n	800138a <LoopFillZerobss>

08001386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001388:	3204      	adds	r2, #4

0800138a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800138a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800138c:	d3fb      	bcc.n	8001386 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800138e:	f000 f813 	bl	80013b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001392:	f005 f877 	bl	8006484 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001396:	f7fe ff55 	bl	8000244 <main>

0800139a <LoopForever>:

LoopForever:
    b LoopForever
 800139a:	e7fe      	b.n	800139a <LoopForever>
  ldr   r0, =_estack
 800139c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a4:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 80013a8:	0800655c 	.word	0x0800655c
  ldr r2, =_sbss
 80013ac:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 80013b0:	20001230 	.word	0x20001230

080013b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013b4:	e7fe      	b.n	80013b4 <ADC1_2_IRQHandler>
	...

080013b8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013bc:	4b08      	ldr	r3, [pc, #32]	@ (80013e0 <SystemInit+0x28>)
 80013be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013c2:	4a07      	ldr	r2, [pc, #28]	@ (80013e0 <SystemInit+0x28>)
 80013c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013cc:	4b04      	ldr	r3, [pc, #16]	@ (80013e0 <SystemInit+0x28>)
 80013ce:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80013d2:	609a      	str	r2, [r3, #8]
#endif
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013ea:	2300      	movs	r3, #0
 80013ec:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ee:	2003      	movs	r0, #3
 80013f0:	f000 f91a 	bl	8001628 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013f4:	200f      	movs	r0, #15
 80013f6:	f000 f80d 	bl	8001414 <HAL_InitTick>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d002      	beq.n	8001406 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	71fb      	strb	r3, [r7, #7]
 8001404:	e001      	b.n	800140a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001406:	f7ff f805 	bl	8000414 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800140a:	79fb      	ldrb	r3, [r7, #7]

}
 800140c:	4618      	mov	r0, r3
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800141c:	2300      	movs	r3, #0
 800141e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001420:	4b16      	ldr	r3, [pc, #88]	@ (800147c <HAL_InitTick+0x68>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d022      	beq.n	800146e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001428:	4b15      	ldr	r3, [pc, #84]	@ (8001480 <HAL_InitTick+0x6c>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4b13      	ldr	r3, [pc, #76]	@ (800147c <HAL_InitTick+0x68>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001434:	fbb1 f3f3 	udiv	r3, r1, r3
 8001438:	fbb2 f3f3 	udiv	r3, r2, r3
 800143c:	4618      	mov	r0, r3
 800143e:	f000 f918 	bl	8001672 <HAL_SYSTICK_Config>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d10f      	bne.n	8001468 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b0f      	cmp	r3, #15
 800144c:	d809      	bhi.n	8001462 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800144e:	2200      	movs	r2, #0
 8001450:	6879      	ldr	r1, [r7, #4]
 8001452:	f04f 30ff 	mov.w	r0, #4294967295
 8001456:	f000 f8f2 	bl	800163e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800145a:	4a0a      	ldr	r2, [pc, #40]	@ (8001484 <HAL_InitTick+0x70>)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	e007      	b.n	8001472 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	73fb      	strb	r3, [r7, #15]
 8001466:	e004      	b.n	8001472 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	73fb      	strb	r3, [r7, #15]
 800146c:	e001      	b.n	8001472 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001472:	7bfb      	ldrb	r3, [r7, #15]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000178 	.word	0x20000178
 8001480:	20000170 	.word	0x20000170
 8001484:	20000174 	.word	0x20000174

08001488 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800148c:	4b05      	ldr	r3, [pc, #20]	@ (80014a4 <HAL_IncTick+0x1c>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4b05      	ldr	r3, [pc, #20]	@ (80014a8 <HAL_IncTick+0x20>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4413      	add	r3, r2
 8001496:	4a03      	ldr	r2, [pc, #12]	@ (80014a4 <HAL_IncTick+0x1c>)
 8001498:	6013      	str	r3, [r2, #0]
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	20000c40 	.word	0x20000c40
 80014a8:	20000178 	.word	0x20000178

080014ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  return uwTick;
 80014b0:	4b03      	ldr	r3, [pc, #12]	@ (80014c0 <HAL_GetTick+0x14>)
 80014b2:	681b      	ldr	r3, [r3, #0]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	20000c40 	.word	0x20000c40

080014c4 <__NVIC_SetPriorityGrouping>:
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001508 <__NVIC_SetPriorityGrouping+0x44>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014e0:	4013      	ands	r3, r2
 80014e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014f6:	4a04      	ldr	r2, [pc, #16]	@ (8001508 <__NVIC_SetPriorityGrouping+0x44>)
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	60d3      	str	r3, [r2, #12]
}
 80014fc:	bf00      	nop
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <__NVIC_GetPriorityGrouping>:
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001510:	4b04      	ldr	r3, [pc, #16]	@ (8001524 <__NVIC_GetPriorityGrouping+0x18>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	0a1b      	lsrs	r3, r3, #8
 8001516:	f003 0307 	and.w	r3, r3, #7
}
 800151a:	4618      	mov	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <__NVIC_SetPriority>:
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	6039      	str	r1, [r7, #0]
 8001532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001538:	2b00      	cmp	r3, #0
 800153a:	db0a      	blt.n	8001552 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	b2da      	uxtb	r2, r3
 8001540:	490c      	ldr	r1, [pc, #48]	@ (8001574 <__NVIC_SetPriority+0x4c>)
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	0112      	lsls	r2, r2, #4
 8001548:	b2d2      	uxtb	r2, r2
 800154a:	440b      	add	r3, r1
 800154c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001550:	e00a      	b.n	8001568 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	b2da      	uxtb	r2, r3
 8001556:	4908      	ldr	r1, [pc, #32]	@ (8001578 <__NVIC_SetPriority+0x50>)
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	f003 030f 	and.w	r3, r3, #15
 800155e:	3b04      	subs	r3, #4
 8001560:	0112      	lsls	r2, r2, #4
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	440b      	add	r3, r1
 8001566:	761a      	strb	r2, [r3, #24]
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000e100 	.word	0xe000e100
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <NVIC_EncodePriority>:
{
 800157c:	b480      	push	{r7}
 800157e:	b089      	sub	sp, #36	@ 0x24
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	f1c3 0307 	rsb	r3, r3, #7
 8001596:	2b04      	cmp	r3, #4
 8001598:	bf28      	it	cs
 800159a:	2304      	movcs	r3, #4
 800159c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3304      	adds	r3, #4
 80015a2:	2b06      	cmp	r3, #6
 80015a4:	d902      	bls.n	80015ac <NVIC_EncodePriority+0x30>
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	3b03      	subs	r3, #3
 80015aa:	e000      	b.n	80015ae <NVIC_EncodePriority+0x32>
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b0:	f04f 32ff 	mov.w	r2, #4294967295
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43da      	mvns	r2, r3
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	401a      	ands	r2, r3
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c4:	f04f 31ff 	mov.w	r1, #4294967295
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	fa01 f303 	lsl.w	r3, r1, r3
 80015ce:	43d9      	mvns	r1, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d4:	4313      	orrs	r3, r2
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3724      	adds	r7, #36	@ 0x24
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
	...

080015e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015f4:	d301      	bcc.n	80015fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015f6:	2301      	movs	r3, #1
 80015f8:	e00f      	b.n	800161a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001624 <SysTick_Config+0x40>)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3b01      	subs	r3, #1
 8001600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001602:	210f      	movs	r1, #15
 8001604:	f04f 30ff 	mov.w	r0, #4294967295
 8001608:	f7ff ff8e 	bl	8001528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800160c:	4b05      	ldr	r3, [pc, #20]	@ (8001624 <SysTick_Config+0x40>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001612:	4b04      	ldr	r3, [pc, #16]	@ (8001624 <SysTick_Config+0x40>)
 8001614:	2207      	movs	r2, #7
 8001616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	e000e010 	.word	0xe000e010

08001628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff ff47 	bl	80014c4 <__NVIC_SetPriorityGrouping>
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b086      	sub	sp, #24
 8001642:	af00      	add	r7, sp, #0
 8001644:	4603      	mov	r3, r0
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607a      	str	r2, [r7, #4]
 800164a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800164c:	f7ff ff5e 	bl	800150c <__NVIC_GetPriorityGrouping>
 8001650:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	68b9      	ldr	r1, [r7, #8]
 8001656:	6978      	ldr	r0, [r7, #20]
 8001658:	f7ff ff90 	bl	800157c <NVIC_EncodePriority>
 800165c:	4602      	mov	r2, r0
 800165e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001662:	4611      	mov	r1, r2
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ff5f 	bl	8001528 <__NVIC_SetPriority>
}
 800166a:	bf00      	nop
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff ffb2 	bl	80015e4 <SysTick_Config>
 8001680:	4603      	mov	r3, r0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e147      	b.n	800192e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d106      	bne.n	80016b8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7fe feb6 	bl	8000424 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	699a      	ldr	r2, [r3, #24]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f022 0210 	bic.w	r2, r2, #16
 80016c6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016c8:	f7ff fef0 	bl	80014ac <HAL_GetTick>
 80016cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80016ce:	e012      	b.n	80016f6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80016d0:	f7ff feec 	bl	80014ac <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b0a      	cmp	r3, #10
 80016dc:	d90b      	bls.n	80016f6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016e2:	f043 0201 	orr.w	r2, r3, #1
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2203      	movs	r2, #3
 80016ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e11b      	b.n	800192e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	f003 0308 	and.w	r3, r3, #8
 8001700:	2b08      	cmp	r3, #8
 8001702:	d0e5      	beq.n	80016d0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	699a      	ldr	r2, [r3, #24]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f042 0201 	orr.w	r2, r2, #1
 8001712:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001714:	f7ff feca 	bl	80014ac <HAL_GetTick>
 8001718:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800171a:	e012      	b.n	8001742 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800171c:	f7ff fec6 	bl	80014ac <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b0a      	cmp	r3, #10
 8001728:	d90b      	bls.n	8001742 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800172e:	f043 0201 	orr.w	r2, r3, #1
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2203      	movs	r2, #3
 800173a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e0f5      	b.n	800192e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0e5      	beq.n	800171c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	699a      	ldr	r2, [r3, #24]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f042 0202 	orr.w	r2, r2, #2
 800175e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a74      	ldr	r2, [pc, #464]	@ (8001938 <HAL_FDCAN_Init+0x2ac>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d103      	bne.n	8001772 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800176a:	4a74      	ldr	r2, [pc, #464]	@ (800193c <HAL_FDCAN_Init+0x2b0>)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	7c1b      	ldrb	r3, [r3, #16]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d108      	bne.n	800178c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	699a      	ldr	r2, [r3, #24]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001788:	619a      	str	r2, [r3, #24]
 800178a:	e007      	b.n	800179c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	699a      	ldr	r2, [r3, #24]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800179a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	7c5b      	ldrb	r3, [r3, #17]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d108      	bne.n	80017b6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	699a      	ldr	r2, [r3, #24]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80017b2:	619a      	str	r2, [r3, #24]
 80017b4:	e007      	b.n	80017c6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	699a      	ldr	r2, [r3, #24]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80017c4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	7c9b      	ldrb	r3, [r3, #18]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d108      	bne.n	80017e0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	699a      	ldr	r2, [r3, #24]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80017dc:	619a      	str	r2, [r3, #24]
 80017de:	e007      	b.n	80017f0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	699a      	ldr	r2, [r3, #24]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80017ee:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689a      	ldr	r2, [r3, #8]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	430a      	orrs	r2, r1
 8001804:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	699a      	ldr	r2, [r3, #24]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001814:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	691a      	ldr	r2, [r3, #16]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f022 0210 	bic.w	r2, r2, #16
 8001824:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d108      	bne.n	8001840 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	699a      	ldr	r2, [r3, #24]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f042 0204 	orr.w	r2, r2, #4
 800183c:	619a      	str	r2, [r3, #24]
 800183e:	e02c      	b.n	800189a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d028      	beq.n	800189a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	2b02      	cmp	r3, #2
 800184e:	d01c      	beq.n	800188a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	699a      	ldr	r2, [r3, #24]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800185e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	691a      	ldr	r2, [r3, #16]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f042 0210 	orr.w	r2, r2, #16
 800186e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	2b03      	cmp	r3, #3
 8001876:	d110      	bne.n	800189a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	699a      	ldr	r2, [r3, #24]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f042 0220 	orr.w	r2, r2, #32
 8001886:	619a      	str	r2, [r3, #24]
 8001888:	e007      	b.n	800189a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	699a      	ldr	r2, [r3, #24]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f042 0220 	orr.w	r2, r2, #32
 8001898:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	3b01      	subs	r3, #1
 80018a0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80018aa:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80018b2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	695b      	ldr	r3, [r3, #20]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80018c2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80018c4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80018ce:	d115      	bne.n	80018fc <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018d4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018da:	3b01      	subs	r3, #1
 80018dc:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80018de:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e4:	3b01      	subs	r3, #1
 80018e6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80018e8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f0:	3b01      	subs	r3, #1
 80018f2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80018f8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80018fa:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	430a      	orrs	r2, r1
 800190e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 fa12 	bl	8001d3c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40006400 	.word	0x40006400
 800193c:	40006500 	.word	0x40006500

08001940 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8001940:	b480      	push	{r7}
 8001942:	b087      	sub	sp, #28
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001950:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001952:	7dfb      	ldrb	r3, [r7, #23]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d002      	beq.n	800195e <HAL_FDCAN_ConfigFilter+0x1e>
 8001958:	7dfb      	ldrb	r3, [r7, #23]
 800195a:	2b02      	cmp	r3, #2
 800195c:	d13d      	bne.n	80019da <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d119      	bne.n	800199a <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001972:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800197a:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001980:	4313      	orrs	r3, r2
 8001982:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	e01d      	b.n	80019d6 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	075a      	lsls	r2, r3, #29
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	079a      	lsls	r2, r3, #30
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	4413      	add	r3, r2
 80019c2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	3304      	adds	r3, #4
 80019ce:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80019d6:	2300      	movs	r3, #0
 80019d8:	e006      	b.n	80019e8 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019de:	f043 0202 	orr.w	r2, r3, #2
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
  }
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	371c      	adds	r7, #28
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d110      	bne.n	8001a2a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	699a      	ldr	r2, [r3, #24]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f022 0201 	bic.w	r2, r2, #1
 8001a1e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8001a26:	2300      	movs	r3, #0
 8001a28:	e006      	b.n	8001a38 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a2e:	f043 0204 	orr.w	r2, r3, #4
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
  }
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d12c      	bne.n	8001ab6 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001a64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d007      	beq.n	8001a7c <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a70:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e023      	b.n	8001ac4 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001a84:	0c1b      	lsrs	r3, r3, #16
 8001a86:	f003 0303 	and.w	r3, r3, #3
 8001a8a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	68b9      	ldr	r1, [r7, #8]
 8001a92:	68f8      	ldr	r0, [r7, #12]
 8001a94:	f000 f9be 	bl	8001e14 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	fa01 f202 	lsl.w	r2, r1, r2
 8001aa4:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	409a      	lsls	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	e006      	b.n	8001ac4 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aba:	f043 0208 	orr.w	r2, r3, #8
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
  }
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b08b      	sub	sp, #44	@ 0x2c
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
 8001ad8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001ae4:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001ae6:	7efb      	ldrb	r3, [r7, #27]
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	f040 80e8 	bne.w	8001cbe <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	2b40      	cmp	r3, #64	@ 0x40
 8001af2:	d137      	bne.n	8001b64 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001afc:	f003 030f 	and.w	r3, r3, #15
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d107      	bne.n	8001b14 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b08:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e0db      	b.n	8001ccc <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b1c:	0e1b      	lsrs	r3, r3, #24
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d10a      	bne.n	8001b3c <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b2e:	0a5b      	lsrs	r3, r3, #9
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d101      	bne.n	8001b3c <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b44:	0a1b      	lsrs	r3, r3, #8
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	69fa      	ldr	r2, [r7, #28]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8001b54:	69fa      	ldr	r2, [r7, #28]
 8001b56:	4613      	mov	r3, r2
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	440b      	add	r3, r1
 8001b60:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b62:	e036      	b.n	8001bd2 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b6c:	f003 030f 	and.w	r3, r3, #15
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d107      	bne.n	8001b84 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b78:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e0a3      	b.n	8001ccc <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b8c:	0e1b      	lsrs	r3, r3, #24
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d10a      	bne.n	8001bac <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b9e:	0a1b      	lsrs	r3, r3, #8
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d101      	bne.n	8001bac <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001bb4:	0a1b      	lsrs	r3, r3, #8
 8001bb6:	f003 0303 	and.w	r3, r3, #3
 8001bba:	69fa      	ldr	r2, [r7, #28]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001bc4:	69fa      	ldr	r2, [r7, #28]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	4413      	add	r3, r2
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	440b      	add	r3, r1
 8001bd0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d107      	bne.n	8001bf6 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	0c9b      	lsrs	r3, r3, #18
 8001bec:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	e005      	b.n	8001c02 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	0c1b      	lsrs	r3, r3, #16
 8001c30:	f003 020f 	and.w	r2, r3, #15
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	0e1b      	lsrs	r3, r3, #24
 8001c56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	0fda      	lsrs	r2, r3, #31
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6a:	3304      	adds	r3, #4
 8001c6c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c70:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001c72:	2300      	movs	r3, #0
 8001c74:	623b      	str	r3, [r7, #32]
 8001c76:	e00a      	b.n	8001c8e <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	6a3b      	ldr	r3, [r7, #32]
 8001c7c:	441a      	add	r2, r3
 8001c7e:	6839      	ldr	r1, [r7, #0]
 8001c80:	6a3b      	ldr	r3, [r7, #32]
 8001c82:	440b      	add	r3, r1
 8001c84:	7812      	ldrb	r2, [r2, #0]
 8001c86:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001c88:	6a3b      	ldr	r3, [r7, #32]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	623b      	str	r3, [r7, #32]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	4a11      	ldr	r2, [pc, #68]	@ (8001cd8 <HAL_FDCAN_GetRxMessage+0x20c>)
 8001c94:	5cd3      	ldrb	r3, [r2, r3]
 8001c96:	461a      	mov	r2, r3
 8001c98:	6a3b      	ldr	r3, [r7, #32]
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d3ec      	bcc.n	8001c78 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	2b40      	cmp	r3, #64	@ 0x40
 8001ca2:	d105      	bne.n	8001cb0 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	69fa      	ldr	r2, [r7, #28]
 8001caa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8001cae:	e004      	b.n	8001cba <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	69fa      	ldr	r2, [r7, #28]
 8001cb6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	e006      	b.n	8001ccc <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cc2:	f043 0208 	orr.w	r2, r3, #8
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
  }
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	372c      	adds	r7, #44	@ 0x2c
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	08006514 	.word	0x08006514

08001cdc <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(const FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	2b40      	cmp	r3, #64	@ 0x40
 8001cea:	d107      	bne.n	8001cfc <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cf4:	f003 030f 	and.w	r3, r3, #15
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	e006      	b.n	8001d0a <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d04:	f003 030f 	and.w	r3, r3, #15
 8001d08:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3714      	adds	r7, #20
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001d44:	4b30      	ldr	r3, [pc, #192]	@ (8001e08 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8001d46:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a2f      	ldr	r2, [pc, #188]	@ (8001e0c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d103      	bne.n	8001d5a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001d58:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a2c      	ldr	r2, [pc, #176]	@ (8001e10 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d103      	bne.n	8001d6c <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8001d6a:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d7a:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d82:	041a      	lsls	r2, r3, #16
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001da0:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001da8:	061a      	lsls	r2, r3, #24
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	430a      	orrs	r2, r1
 8001db0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	e005      	b.n	8001dee <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	3304      	adds	r3, #4
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d3f3      	bcc.n	8001de2 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8001dfa:	bf00      	nop
 8001dfc:	bf00      	nop
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	4000a400 	.word	0x4000a400
 8001e0c:	40006800 	.word	0x40006800
 8001e10:	40006c00 	.word	0x40006c00

08001e14 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b089      	sub	sp, #36	@ 0x24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
 8001e20:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10a      	bne.n	8001e40 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001e32:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61fb      	str	r3, [r7, #28]
 8001e3e:	e00a      	b.n	8001e56 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001e48:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001e4e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001e50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001e54:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001e60:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001e66:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001e6c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001e74:	4313      	orrs	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	4413      	add	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	440b      	add	r3, r1
 8001e88:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	69fa      	ldr	r2, [r7, #28]
 8001e8e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	3304      	adds	r3, #4
 8001e94:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	3304      	adds	r3, #4
 8001ea0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	e020      	b.n	8001eea <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	3303      	adds	r3, #3
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	4413      	add	r3, r2
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	3302      	adds	r3, #2
 8001eb8:	6879      	ldr	r1, [r7, #4]
 8001eba:	440b      	add	r3, r1
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001ec0:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	440b      	add	r3, r1
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001ece:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	440a      	add	r2, r1
 8001ed6:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001ed8:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	3304      	adds	r3, #4
 8001ee8:	617b      	str	r3, [r7, #20]
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	4a06      	ldr	r2, [pc, #24]	@ (8001f08 <FDCAN_CopyMessageToRAM+0xf4>)
 8001ef0:	5cd3      	ldrb	r3, [r2, r3]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d3d6      	bcc.n	8001ea8 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8001efa:	bf00      	nop
 8001efc:	bf00      	nop
 8001efe:	3724      	adds	r7, #36	@ 0x24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	08006514 	.word	0x08006514

08001f0c <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001f1e:	4b2f      	ldr	r3, [pc, #188]	@ (8001fdc <HAL_FLASH_Program+0xd0>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d101      	bne.n	8001f2a <HAL_FLASH_Program+0x1e>
 8001f26:	2302      	movs	r3, #2
 8001f28:	e053      	b.n	8001fd2 <HAL_FLASH_Program+0xc6>
 8001f2a:	4b2c      	ldr	r3, [pc, #176]	@ (8001fdc <HAL_FLASH_Program+0xd0>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f30:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f34:	f000 f8ca 	bl	80020cc <FLASH_WaitForLastOperation>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8001f3c:	7dfb      	ldrb	r3, [r7, #23]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d143      	bne.n	8001fca <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001f42:	4b26      	ldr	r3, [pc, #152]	@ (8001fdc <HAL_FLASH_Program+0xd0>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001f48:	4b25      	ldr	r3, [pc, #148]	@ (8001fe0 <HAL_FLASH_Program+0xd4>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d009      	beq.n	8001f68 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001f54:	4b22      	ldr	r3, [pc, #136]	@ (8001fe0 <HAL_FLASH_Program+0xd4>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a21      	ldr	r2, [pc, #132]	@ (8001fe0 <HAL_FLASH_Program+0xd4>)
 8001f5a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001f5e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001f60:	4b1e      	ldr	r3, [pc, #120]	@ (8001fdc <HAL_FLASH_Program+0xd0>)
 8001f62:	2202      	movs	r2, #2
 8001f64:	771a      	strb	r2, [r3, #28]
 8001f66:	e002      	b.n	8001f6e <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001f68:	4b1c      	ldr	r3, [pc, #112]	@ (8001fdc <HAL_FLASH_Program+0xd0>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	771a      	strb	r2, [r3, #28]
    }
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d107      	bne.n	8001f84 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8001f74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f78:	68b8      	ldr	r0, [r7, #8]
 8001f7a:	f000 f8f9 	bl	8002170 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	613b      	str	r3, [r7, #16]
 8001f82:	e010      	b.n	8001fa6 <HAL_FLASH_Program+0x9a>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d002      	beq.n	8001f90 <HAL_FLASH_Program+0x84>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d10a      	bne.n	8001fa6 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	4619      	mov	r1, r3
 8001f94:	68b8      	ldr	r0, [r7, #8]
 8001f96:	f000 f911 	bl	80021bc <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d102      	bne.n	8001fa6 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8001fa0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001fa4:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001fa6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001faa:	f000 f88f 	bl	80020cc <FLASH_WaitForLastOperation>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d006      	beq.n	8001fc6 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8001fb8:	4b09      	ldr	r3, [pc, #36]	@ (8001fe0 <HAL_FLASH_Program+0xd4>)
 8001fba:	695a      	ldr	r2, [r3, #20]
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	4907      	ldr	r1, [pc, #28]	@ (8001fe0 <HAL_FLASH_Program+0xd4>)
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001fc6:	f000 fb47 	bl	8002658 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001fca:	4b04      	ldr	r3, [pc, #16]	@ (8001fdc <HAL_FLASH_Program+0xd0>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8001fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3718      	adds	r7, #24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	2000017c 	.word	0x2000017c
 8001fe0:	40022000 	.word	0x40022000

08001fe4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001fee:	4b0b      	ldr	r3, [pc, #44]	@ (800201c <HAL_FLASH_Unlock+0x38>)
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	da0b      	bge.n	800200e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001ff6:	4b09      	ldr	r3, [pc, #36]	@ (800201c <HAL_FLASH_Unlock+0x38>)
 8001ff8:	4a09      	ldr	r2, [pc, #36]	@ (8002020 <HAL_FLASH_Unlock+0x3c>)
 8001ffa:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001ffc:	4b07      	ldr	r3, [pc, #28]	@ (800201c <HAL_FLASH_Unlock+0x38>)
 8001ffe:	4a09      	ldr	r2, [pc, #36]	@ (8002024 <HAL_FLASH_Unlock+0x40>)
 8002000:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002002:	4b06      	ldr	r3, [pc, #24]	@ (800201c <HAL_FLASH_Unlock+0x38>)
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	2b00      	cmp	r3, #0
 8002008:	da01      	bge.n	800200e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800200e:	79fb      	ldrb	r3, [r7, #7]
}
 8002010:	4618      	mov	r0, r3
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	40022000 	.word	0x40022000
 8002020:	45670123 	.word	0x45670123
 8002024:	cdef89ab 	.word	0xcdef89ab

08002028 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002032:	4b09      	ldr	r3, [pc, #36]	@ (8002058 <HAL_FLASH_Lock+0x30>)
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	4a08      	ldr	r2, [pc, #32]	@ (8002058 <HAL_FLASH_Lock+0x30>)
 8002038:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800203c:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800203e:	4b06      	ldr	r3, [pc, #24]	@ (8002058 <HAL_FLASH_Lock+0x30>)
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	2b00      	cmp	r3, #0
 8002044:	da01      	bge.n	800204a <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8002046:	2300      	movs	r3, #0
 8002048:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800204a:	79fb      	ldrb	r3, [r7, #7]
}
 800204c:	4618      	mov	r0, r3
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	40022000 	.word	0x40022000

0800205c <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002062:	2300      	movs	r3, #0
 8002064:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 8002066:	4b0d      	ldr	r3, [pc, #52]	@ (800209c <HAL_FLASH_OB_Unlock+0x40>)
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00d      	beq.n	800208e <HAL_FLASH_OB_Unlock+0x32>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8002072:	4b0a      	ldr	r3, [pc, #40]	@ (800209c <HAL_FLASH_OB_Unlock+0x40>)
 8002074:	4a0a      	ldr	r2, [pc, #40]	@ (80020a0 <HAL_FLASH_OB_Unlock+0x44>)
 8002076:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8002078:	4b08      	ldr	r3, [pc, #32]	@ (800209c <HAL_FLASH_OB_Unlock+0x40>)
 800207a:	4a0a      	ldr	r2, [pc, #40]	@ (80020a4 <HAL_FLASH_OB_Unlock+0x48>)
 800207c:	60da      	str	r2, [r3, #12]

    /* verify option bytes are unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 800207e:	4b07      	ldr	r3, [pc, #28]	@ (800209c <HAL_FLASH_OB_Unlock+0x40>)
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_FLASH_OB_Unlock+0x32>
    {
      status = HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800208e:	79fb      	ldrb	r3, [r7, #7]
}
 8002090:	4618      	mov	r0, r3
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	40022000 	.word	0x40022000
 80020a0:	08192a3b 	.word	0x08192a3b
 80020a4:	4c5d6e7f 	.word	0x4c5d6e7f

080020a8 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* Set the bit to force the option byte reloading */
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 80020ac:	4b06      	ldr	r3, [pc, #24]	@ (80020c8 <HAL_FLASH_OB_Launch+0x20>)
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	4a05      	ldr	r2, [pc, #20]	@ (80020c8 <HAL_FLASH_OB_Launch+0x20>)
 80020b2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80020b6:	6153      	str	r3, [r2, #20]

  /* Wait for last operation to be completed */
  return (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE));
 80020b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020bc:	f000 f806 	bl	80020cc <FLASH_WaitForLastOperation>
 80020c0:	4603      	mov	r3, r0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40022000 	.word	0x40022000

080020cc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80020d4:	f7ff f9ea 	bl	80014ac <HAL_GetTick>
 80020d8:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80020da:	e009      	b.n	80020f0 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 80020dc:	f7ff f9e6 	bl	80014ac <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d201      	bcs.n	80020f0 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e037      	b.n	8002160 <FLASH_WaitForLastOperation+0x94>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80020f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002168 <FLASH_WaitForLastOperation+0x9c>)
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020fc:	d0ee      	beq.n	80020dc <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80020fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002168 <FLASH_WaitForLastOperation+0x9c>)
 8002100:	691a      	ldr	r2, [r3, #16]
 8002102:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8002106:	4013      	ands	r3, r2
 8002108:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d01d      	beq.n	800214c <FLASH_WaitForLastOperation+0x80>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8002110:	4b16      	ldr	r3, [pc, #88]	@ (800216c <FLASH_WaitForLastOperation+0xa0>)
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	4313      	orrs	r3, r2
 8002118:	4a14      	ldr	r2, [pc, #80]	@ (800216c <FLASH_WaitForLastOperation+0xa0>)
 800211a:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002122:	d307      	bcc.n	8002134 <FLASH_WaitForLastOperation+0x68>
 8002124:	4b10      	ldr	r3, [pc, #64]	@ (8002168 <FLASH_WaitForLastOperation+0x9c>)
 8002126:	699a      	ldr	r2, [r3, #24]
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800212e:	490e      	ldr	r1, [pc, #56]	@ (8002168 <FLASH_WaitForLastOperation+0x9c>)
 8002130:	4313      	orrs	r3, r2
 8002132:	618b      	str	r3, [r1, #24]
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d004      	beq.n	8002148 <FLASH_WaitForLastOperation+0x7c>
 800213e:	4a0a      	ldr	r2, [pc, #40]	@ (8002168 <FLASH_WaitForLastOperation+0x9c>)
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002146:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e009      	b.n	8002160 <FLASH_WaitForLastOperation+0x94>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800214c:	4b06      	ldr	r3, [pc, #24]	@ (8002168 <FLASH_WaitForLastOperation+0x9c>)
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b01      	cmp	r3, #1
 8002156:	d102      	bne.n	800215e <FLASH_WaitForLastOperation+0x92>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002158:	4b03      	ldr	r3, [pc, #12]	@ (8002168 <FLASH_WaitForLastOperation+0x9c>)
 800215a:	2201      	movs	r2, #1
 800215c:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40022000 	.word	0x40022000
 800216c:	2000017c 	.word	0x2000017c

08002170 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800217c:	4b0e      	ldr	r3, [pc, #56]	@ (80021b8 <FLASH_Program_DoubleWord+0x48>)
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	4a0d      	ldr	r2, [pc, #52]	@ (80021b8 <FLASH_Program_DoubleWord+0x48>)
 8002182:	f043 0301 	orr.w	r3, r3, #1
 8002186:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800218e:	f3bf 8f6f 	isb	sy
}
 8002192:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8002194:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	f04f 0300 	mov.w	r3, #0
 80021a0:	000a      	movs	r2, r1
 80021a2:	2300      	movs	r3, #0
 80021a4:	68f9      	ldr	r1, [r7, #12]
 80021a6:	3104      	adds	r1, #4
 80021a8:	4613      	mov	r3, r2
 80021aa:	600b      	str	r3, [r1, #0]
}
 80021ac:	bf00      	nop
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	40022000 	.word	0x40022000

080021bc <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80021bc:	b480      	push	{r7}
 80021be:	b089      	sub	sp, #36	@ 0x24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80021c6:	2340      	movs	r3, #64	@ 0x40
 80021c8:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80021d2:	4b14      	ldr	r3, [pc, #80]	@ (8002224 <FLASH_Program_Fast+0x68>)
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	4a13      	ldr	r2, [pc, #76]	@ (8002224 <FLASH_Program_Fast+0x68>)
 80021d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021dc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021de:	f3ef 8310 	mrs	r3, PRIMASK
 80021e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80021e4:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80021e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80021e8:	b672      	cpsid	i
}
 80021ea:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	3304      	adds	r3, #4
 80021f8:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	3304      	adds	r3, #4
 80021fe:	617b      	str	r3, [r7, #20]
    row_index--;
 8002200:	7ffb      	ldrb	r3, [r7, #31]
 8002202:	3b01      	subs	r3, #1
 8002204:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8002206:	7ffb      	ldrb	r3, [r7, #31]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1ef      	bne.n	80021ec <FLASH_Program_Fast+0x30>
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	f383 8810 	msr	PRIMASK, r3
}
 8002216:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8002218:	bf00      	nop
 800221a:	3724      	adds	r7, #36	@ 0x24
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	40022000 	.word	0x40022000

08002228 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002232:	4b49      	ldr	r3, [pc, #292]	@ (8002358 <HAL_FLASHEx_Erase+0x130>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d101      	bne.n	800223e <HAL_FLASHEx_Erase+0x16>
 800223a:	2302      	movs	r3, #2
 800223c:	e087      	b.n	800234e <HAL_FLASHEx_Erase+0x126>
 800223e:	4b46      	ldr	r3, [pc, #280]	@ (8002358 <HAL_FLASHEx_Erase+0x130>)
 8002240:	2201      	movs	r2, #1
 8002242:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002244:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002248:	f7ff ff40 	bl	80020cc <FLASH_WaitForLastOperation>
 800224c:	4603      	mov	r3, r0
 800224e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d177      	bne.n	8002346 <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002256:	4b40      	ldr	r3, [pc, #256]	@ (8002358 <HAL_FLASHEx_Erase+0x130>)
 8002258:	2200      	movs	r2, #0
 800225a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800225c:	4b3f      	ldr	r3, [pc, #252]	@ (800235c <HAL_FLASHEx_Erase+0x134>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002264:	2b00      	cmp	r3, #0
 8002266:	d013      	beq.n	8002290 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002268:	4b3c      	ldr	r3, [pc, #240]	@ (800235c <HAL_FLASHEx_Erase+0x134>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002270:	2b00      	cmp	r3, #0
 8002272:	d009      	beq.n	8002288 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8002274:	4b39      	ldr	r3, [pc, #228]	@ (800235c <HAL_FLASHEx_Erase+0x134>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a38      	ldr	r2, [pc, #224]	@ (800235c <HAL_FLASHEx_Erase+0x134>)
 800227a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800227e:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8002280:	4b35      	ldr	r3, [pc, #212]	@ (8002358 <HAL_FLASHEx_Erase+0x130>)
 8002282:	2203      	movs	r2, #3
 8002284:	771a      	strb	r2, [r3, #28]
 8002286:	e016      	b.n	80022b6 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8002288:	4b33      	ldr	r3, [pc, #204]	@ (8002358 <HAL_FLASHEx_Erase+0x130>)
 800228a:	2201      	movs	r2, #1
 800228c:	771a      	strb	r2, [r3, #28]
 800228e:	e012      	b.n	80022b6 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002290:	4b32      	ldr	r3, [pc, #200]	@ (800235c <HAL_FLASHEx_Erase+0x134>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002298:	2b00      	cmp	r3, #0
 800229a:	d009      	beq.n	80022b0 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800229c:	4b2f      	ldr	r3, [pc, #188]	@ (800235c <HAL_FLASHEx_Erase+0x134>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a2e      	ldr	r2, [pc, #184]	@ (800235c <HAL_FLASHEx_Erase+0x134>)
 80022a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80022a6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80022a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002358 <HAL_FLASHEx_Erase+0x130>)
 80022aa:	2202      	movs	r2, #2
 80022ac:	771a      	strb	r2, [r3, #28]
 80022ae:	e002      	b.n	80022b6 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80022b0:	4b29      	ldr	r3, [pc, #164]	@ (8002358 <HAL_FLASHEx_Erase+0x130>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d113      	bne.n	80022e6 <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f000 f94c 	bl	8002560 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022c8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022cc:	f7ff fefe 	bl	80020cc <FLASH_WaitForLastOperation>
 80022d0:	4603      	mov	r3, r0
 80022d2:	73fb      	strb	r3, [r7, #15]

#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80022d4:	4b21      	ldr	r3, [pc, #132]	@ (800235c <HAL_FLASHEx_Erase+0x134>)
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	4a20      	ldr	r2, [pc, #128]	@ (800235c <HAL_FLASHEx_Erase+0x134>)
 80022da:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80022de:	f023 0304 	bic.w	r3, r3, #4
 80022e2:	6153      	str	r3, [r2, #20]
 80022e4:	e02d      	b.n	8002342 <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	f04f 32ff 	mov.w	r2, #4294967295
 80022ec:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	60bb      	str	r3, [r7, #8]
 80022f4:	e01d      	b.n	8002332 <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	4619      	mov	r1, r3
 80022fc:	68b8      	ldr	r0, [r7, #8]
 80022fe:	f000 f967 	bl	80025d0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002302:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002306:	f7ff fee1 	bl	80020cc <FLASH_WaitForLastOperation>
 800230a:	4603      	mov	r3, r0
 800230c:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800230e:	4b13      	ldr	r3, [pc, #76]	@ (800235c <HAL_FLASHEx_Erase+0x134>)
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	4a12      	ldr	r2, [pc, #72]	@ (800235c <HAL_FLASHEx_Erase+0x134>)
 8002314:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 8002318:	f023 0302 	bic.w	r3, r3, #2
 800231c:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800231e:	7bfb      	ldrb	r3, [r7, #15]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	601a      	str	r2, [r3, #0]
          break;
 800232a:	e00a      	b.n	8002342 <HAL_FLASHEx_Erase+0x11a>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	3301      	adds	r3, #1
 8002330:	60bb      	str	r3, [r7, #8]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689a      	ldr	r2, [r3, #8]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	4413      	add	r3, r2
 800233c:	68ba      	ldr	r2, [r7, #8]
 800233e:	429a      	cmp	r2, r3
 8002340:	d3d9      	bcc.n	80022f6 <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002342:	f000 f989 	bl	8002658 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002346:	4b04      	ldr	r3, [pc, #16]	@ (8002358 <HAL_FLASHEx_Erase+0x130>)
 8002348:	2200      	movs	r2, #0
 800234a:	701a      	strb	r2, [r3, #0]

  return status;
 800234c:	7bfb      	ldrb	r3, [r7, #15]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	2000017c 	.word	0x2000017c
 800235c:	40022000 	.word	0x40022000

08002360 <HAL_FLASHEx_OBProgram>:
  *         - after an option bytes launch through the call of HAL_FLASH_OB_Launch()
  *         - after a power reset (BOR reset or exit from Standby/Shutdown modes)
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002368:	2300      	movs	r3, #0
 800236a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800236c:	4b43      	ldr	r3, [pc, #268]	@ (800247c <HAL_FLASHEx_OBProgram+0x11c>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d101      	bne.n	8002378 <HAL_FLASHEx_OBProgram+0x18>
 8002374:	2302      	movs	r3, #2
 8002376:	e07d      	b.n	8002474 <HAL_FLASHEx_OBProgram+0x114>
 8002378:	4b40      	ldr	r3, [pc, #256]	@ (800247c <HAL_FLASHEx_OBProgram+0x11c>)
 800237a:	2201      	movs	r2, #1
 800237c:	701a      	strb	r2, [r3, #0]

  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800237e:	4b3f      	ldr	r3, [pc, #252]	@ (800247c <HAL_FLASHEx_OBProgram+0x11c>)
 8002380:	2200      	movs	r2, #0
 8002382:	605a      	str	r2, [r3, #4]

  /* Write protection configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) != 0U)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00d      	beq.n	80023ac <HAL_FLASHEx_OBProgram+0x4c>
  {
    /* Configure of Write protection on the selected area */
    if (FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset) != HAL_OK)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6858      	ldr	r0, [r3, #4]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6899      	ldr	r1, [r3, #8]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	461a      	mov	r2, r3
 800239e:	f000 f9a5 	bl	80026ec <FLASH_OB_WRPConfig>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <HAL_FLASHEx_OBProgram+0x4c>
    {
      status = HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Read protection configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d009      	beq.n	80023cc <HAL_FLASHEx_OBProgram+0x6c>
  {
    /* Configure the Read protection level */
    if (FLASH_OB_RDPConfig(pOBInit->RDPLevel) != HAL_OK)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	4618      	mov	r0, r3
 80023be:	f000 f9df 	bl	8002780 <FLASH_OB_RDPConfig>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <HAL_FLASHEx_OBProgram+0x6c>
    {
      status = HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* User Configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00c      	beq.n	80023f2 <HAL_FLASHEx_OBProgram+0x92>
  {
    /* Configure the user option bytes */
    if (FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig) != HAL_OK)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	695a      	ldr	r2, [r3, #20]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	4619      	mov	r1, r3
 80023e2:	4610      	mov	r0, r2
 80023e4:	f000 f9f4 	bl	80027d0 <FLASH_OB_UserConfig>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_FLASHEx_OBProgram+0x92>
    {
      status = HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* PCROP Configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0308 	and.w	r3, r3, #8
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d013      	beq.n	8002426 <HAL_FLASHEx_OBProgram+0xc6>
  {
    if (pOBInit->PCROPStartAddr != pOBInit->PCROPEndAddr)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a1a      	ldr	r2, [r3, #32]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002406:	429a      	cmp	r2, r3
 8002408:	d00d      	beq.n	8002426 <HAL_FLASHEx_OBProgram+0xc6>
    {
      /* Configure the Proprietary code readout protection */
      if (FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr) != HAL_OK)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69d8      	ldr	r0, [r3, #28]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a19      	ldr	r1, [r3, #32]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002416:	461a      	mov	r2, r3
 8002418:	f000 fafa 	bl	8002a10 <FLASH_OB_PCROPConfig>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <HAL_FLASHEx_OBProgram+0xc6>
      {
        status = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  /* Securable memory Configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_SEC) != 0U)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0320 	and.w	r3, r3, #32
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00c      	beq.n	800244c <HAL_FLASHEx_OBProgram+0xec>
  {
    /* Configure the securable memory area */
    if (FLASH_OB_SecMemConfig(pOBInit->SecBank, pOBInit->SecSize) != HAL_OK)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243a:	4619      	mov	r1, r3
 800243c:	4610      	mov	r0, r2
 800243e:	f000 fbe1 	bl	8002c04 <FLASH_OB_SecMemConfig>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <HAL_FLASHEx_OBProgram+0xec>
    {
      status = HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Boot Entry Point Configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_BOOT_LOCK) != 0U)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0310 	and.w	r3, r3, #16
 8002454:	2b00      	cmp	r3, #0
 8002456:	d009      	beq.n	800246c <HAL_FLASHEx_OBProgram+0x10c>
  {
    /* Configure the boot unique entry point option */
    if (FLASH_OB_BootLockConfig(pOBInit->BootEntryPoint) != HAL_OK)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800245c:	4618      	mov	r0, r3
 800245e:	f000 fc09 	bl	8002c74 <FLASH_OB_BootLockConfig>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <HAL_FLASHEx_OBProgram+0x10c>
    {
      status = HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800246c:	4b03      	ldr	r3, [pc, #12]	@ (800247c <HAL_FLASHEx_OBProgram+0x11c>)
 800246e:	2200      	movs	r2, #0
 8002470:	701a      	strb	r2, [r3, #0]

  return status;
 8002472:	7bfb      	ldrb	r3, [r7, #15]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	2000017c 	.word	0x2000017c

08002480 <HAL_FLASHEx_OBGetConfig>:
  * @note   The fields pOBInit->WRPArea and pOBInit->PCROPConfig should indicate
  *         which area is requested for the WRP and PCROP, else no information will be returned.
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_RDP | OPTIONBYTE_USER);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2206      	movs	r2, #6
 800248c:	601a      	str	r2, [r3, #0]

#if defined (FLASH_OPTR_DBANK)
  if ((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00b      	beq.n	80024ae <HAL_FLASHEx_OBGetConfig+0x2e>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d007      	beq.n	80024ae <HAL_FLASHEx_OBGetConfig+0x2e>
      (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
  if ((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d003      	beq.n	80024ae <HAL_FLASHEx_OBGetConfig+0x2e>
      (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	d10f      	bne.n	80024ce <HAL_FLASHEx_OBGetConfig+0x4e>
#else
  if ((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB))
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_WRP;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f043 0201 	orr.w	r2, r3, #1
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	601a      	str	r2, [r3, #0]
    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6858      	ldr	r0, [r3, #4]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f103 0108 	add.w	r1, r3, #8
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	330c      	adds	r3, #12
 80024c8:	461a      	mov	r2, r3
 80024ca:	f000 fc27 	bl	8002d1c <FLASH_OB_GetWRP>
  }

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 80024ce:	f000 fc77 	bl	8002dc0 <FLASH_OB_GetRDP>
 80024d2:	4602      	mov	r2, r0
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	611a      	str	r2, [r3, #16]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 80024d8:	f000 fc8a 	bl	8002df0 <FLASH_OB_GetUser>
 80024dc:	4602      	mov	r2, r0
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	619a      	str	r2, [r3, #24]

#if defined (FLASH_OPTR_DBANK)
  if ((pOBInit->PCROPConfig == FLASH_BANK_1) || (pOBInit->PCROPConfig == FLASH_BANK_2))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d003      	beq.n	80024f2 <HAL_FLASHEx_OBGetConfig+0x72>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d110      	bne.n	8002514 <HAL_FLASHEx_OBGetConfig+0x94>
#else
  if (pOBInit->PCROPConfig == FLASH_BANK_1)
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_PCROP;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f043 0208 	orr.w	r2, r3, #8
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	601a      	str	r2, [r3, #0]
    /* Get the Proprietary code readout protection */
    FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f103 001c 	add.w	r0, r3, #28
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f103 0120 	add.w	r1, r3, #32
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3324      	adds	r3, #36	@ 0x24
 800250e:	461a      	mov	r2, r3
 8002510:	f000 fc82 	bl	8002e18 <FLASH_OB_GetPCROP>
  }

  pOBInit->OptionType |= OPTIONBYTE_BOOT_LOCK;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f043 0210 	orr.w	r2, r3, #16
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	601a      	str	r2, [r3, #0]

  /* Get the boot entry point */
  pOBInit->BootEntryPoint = FLASH_OB_GetBootLock();
 8002520:	f000 fbee 	bl	8002d00 <FLASH_OB_GetBootLock>
 8002524:	4602      	mov	r2, r0
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Get the securable memory area configuration */
#if defined (FLASH_OPTR_DBANK)
  if ((pOBInit->SecBank == FLASH_BANK_1) || (pOBInit->SecBank == FLASH_BANK_2))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800252e:	2b01      	cmp	r3, #1
 8002530:	d003      	beq.n	800253a <HAL_FLASHEx_OBGetConfig+0xba>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002536:	2b02      	cmp	r3, #2
 8002538:	d10d      	bne.n	8002556 <HAL_FLASHEx_OBGetConfig+0xd6>
#else
  if (pOBInit->SecBank == FLASH_BANK_1)
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_SEC;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f043 0220 	orr.w	r2, r3, #32
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	601a      	str	r2, [r3, #0]
    FLASH_OB_GetSecMem(pOBInit->SecBank, &(pOBInit->SecSize));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3330      	adds	r3, #48	@ 0x30
 800254e:	4619      	mov	r1, r3
 8002550:	4610      	mov	r0, r2
 8002552:	f000 fbb7 	bl	8002cc4 <FLASH_OB_GetSecMem>
  }
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
	...

08002560 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 8002568:	4b18      	ldr	r3, [pc, #96]	@ (80025cc <FLASH_MassErase+0x6c>)
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d016      	beq.n	80025a2 <FLASH_MassErase+0x42>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	d005      	beq.n	800258a <FLASH_MassErase+0x2a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800257e:	4b13      	ldr	r3, [pc, #76]	@ (80025cc <FLASH_MassErase+0x6c>)
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	4a12      	ldr	r2, [pc, #72]	@ (80025cc <FLASH_MassErase+0x6c>)
 8002584:	f043 0304 	orr.w	r3, r3, #4
 8002588:	6153      	str	r3, [r2, #20]
    }

#if defined (FLASH_OPTR_DBANK)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if ((Banks & FLASH_BANK_2) != 0U)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00e      	beq.n	80025b2 <FLASH_MassErase+0x52>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8002594:	4b0d      	ldr	r3, [pc, #52]	@ (80025cc <FLASH_MassErase+0x6c>)
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	4a0c      	ldr	r2, [pc, #48]	@ (80025cc <FLASH_MassErase+0x6c>)
 800259a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800259e:	6153      	str	r3, [r2, #20]
 80025a0:	e007      	b.n	80025b2 <FLASH_MassErase+0x52>
#endif
  }
#if defined (FLASH_OPTR_DBANK)
  else
  {
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80025a2:	4b0a      	ldr	r3, [pc, #40]	@ (80025cc <FLASH_MassErase+0x6c>)
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	4a09      	ldr	r2, [pc, #36]	@ (80025cc <FLASH_MassErase+0x6c>)
 80025a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025ac:	f043 0304 	orr.w	r3, r3, #4
 80025b0:	6153      	str	r3, [r2, #20]
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80025b2:	4b06      	ldr	r3, [pc, #24]	@ (80025cc <FLASH_MassErase+0x6c>)
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	4a05      	ldr	r2, [pc, #20]	@ (80025cc <FLASH_MassErase+0x6c>)
 80025b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025bc:	6153      	str	r3, [r2, #20]
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40022000 	.word	0x40022000

080025d0 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 80025da:	4b1e      	ldr	r3, [pc, #120]	@ (8002654 <FLASH_PageErase+0x84>)
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d106      	bne.n	80025f4 <FLASH_PageErase+0x24>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 80025e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002654 <FLASH_PageErase+0x84>)
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	4a1a      	ldr	r2, [pc, #104]	@ (8002654 <FLASH_PageErase+0x84>)
 80025ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80025f0:	6153      	str	r3, [r2, #20]
 80025f2:	e011      	b.n	8002618 <FLASH_PageErase+0x48>
  }
  else
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if ((Banks & FLASH_BANK_1) != 0U)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d006      	beq.n	800260c <FLASH_PageErase+0x3c>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 80025fe:	4b15      	ldr	r3, [pc, #84]	@ (8002654 <FLASH_PageErase+0x84>)
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	4a14      	ldr	r2, [pc, #80]	@ (8002654 <FLASH_PageErase+0x84>)
 8002604:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002608:	6153      	str	r3, [r2, #20]
 800260a:	e005      	b.n	8002618 <FLASH_PageErase+0x48>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800260c:	4b11      	ldr	r3, [pc, #68]	@ (8002654 <FLASH_PageErase+0x84>)
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	4a10      	ldr	r2, [pc, #64]	@ (8002654 <FLASH_PageErase+0x84>)
 8002612:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002616:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_OPTR_DBANK */

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8002618:	4b0e      	ldr	r3, [pc, #56]	@ (8002654 <FLASH_PageErase+0x84>)
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	f423 727e 	bic.w	r2, r3, #1016	@ 0x3f8
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 8002628:	490a      	ldr	r1, [pc, #40]	@ (8002654 <FLASH_PageErase+0x84>)
 800262a:	4313      	orrs	r3, r2
 800262c:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800262e:	4b09      	ldr	r3, [pc, #36]	@ (8002654 <FLASH_PageErase+0x84>)
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	4a08      	ldr	r2, [pc, #32]	@ (8002654 <FLASH_PageErase+0x84>)
 8002634:	f043 0302 	orr.w	r3, r3, #2
 8002638:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800263a:	4b06      	ldr	r3, [pc, #24]	@ (8002654 <FLASH_PageErase+0x84>)
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	4a05      	ldr	r2, [pc, #20]	@ (8002654 <FLASH_PageErase+0x84>)
 8002640:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002644:	6153      	str	r3, [r2, #20]
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	40022000 	.word	0x40022000

08002658 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800265e:	4b21      	ldr	r3, [pc, #132]	@ (80026e4 <FLASH_FlushCaches+0x8c>)
 8002660:	7f1b      	ldrb	r3, [r3, #28]
 8002662:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8002664:	79fb      	ldrb	r3, [r7, #7]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d002      	beq.n	8002670 <FLASH_FlushCaches+0x18>
 800266a:	79fb      	ldrb	r3, [r7, #7]
 800266c:	2b03      	cmp	r3, #3
 800266e:	d117      	bne.n	80026a0 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002670:	4b1d      	ldr	r3, [pc, #116]	@ (80026e8 <FLASH_FlushCaches+0x90>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a1c      	ldr	r2, [pc, #112]	@ (80026e8 <FLASH_FlushCaches+0x90>)
 8002676:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800267a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800267c:	4b1a      	ldr	r3, [pc, #104]	@ (80026e8 <FLASH_FlushCaches+0x90>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a19      	ldr	r2, [pc, #100]	@ (80026e8 <FLASH_FlushCaches+0x90>)
 8002682:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	4b17      	ldr	r3, [pc, #92]	@ (80026e8 <FLASH_FlushCaches+0x90>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a16      	ldr	r2, [pc, #88]	@ (80026e8 <FLASH_FlushCaches+0x90>)
 800268e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002692:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002694:	4b14      	ldr	r3, [pc, #80]	@ (80026e8 <FLASH_FlushCaches+0x90>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a13      	ldr	r2, [pc, #76]	@ (80026e8 <FLASH_FlushCaches+0x90>)
 800269a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800269e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d002      	beq.n	80026ac <FLASH_FlushCaches+0x54>
 80026a6:	79fb      	ldrb	r3, [r7, #7]
 80026a8:	2b03      	cmp	r3, #3
 80026aa:	d111      	bne.n	80026d0 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80026ac:	4b0e      	ldr	r3, [pc, #56]	@ (80026e8 <FLASH_FlushCaches+0x90>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a0d      	ldr	r2, [pc, #52]	@ (80026e8 <FLASH_FlushCaches+0x90>)
 80026b2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80026b6:	6013      	str	r3, [r2, #0]
 80026b8:	4b0b      	ldr	r3, [pc, #44]	@ (80026e8 <FLASH_FlushCaches+0x90>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a0a      	ldr	r2, [pc, #40]	@ (80026e8 <FLASH_FlushCaches+0x90>)
 80026be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80026c2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80026c4:	4b08      	ldr	r3, [pc, #32]	@ (80026e8 <FLASH_FlushCaches+0x90>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a07      	ldr	r2, [pc, #28]	@ (80026e8 <FLASH_FlushCaches+0x90>)
 80026ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026ce:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80026d0:	4b04      	ldr	r3, [pc, #16]	@ (80026e4 <FLASH_FlushCaches+0x8c>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	771a      	strb	r2, [r3, #28]
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	2000017c 	.word	0x2000017c
 80026e8:	40022000 	.word	0x40022000

080026ec <FLASH_OB_WRPConfig>:
  * @param  WRDPEndOffset specifies the end page of the write protected area.
  *         This parameter can be page number between WRPStartOffset and (max number of pages in the bank - 1).
  * @retval HAL_Status
  */
static HAL_StatusTypeDef FLASH_OB_WRPConfig(uint32_t WRPArea, uint32_t WRPStartOffset, uint32_t WRDPEndOffset)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_WRPAREA(WRPArea));
  assert_param(IS_FLASH_PAGE(WRPStartOffset));
  assert_param(IS_FLASH_PAGE(WRDPEndOffset));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80026f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80026fc:	f7ff fce6 	bl	80020cc <FLASH_WaitForLastOperation>
 8002700:	4603      	mov	r3, r0
 8002702:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8002704:	7dfb      	ldrb	r3, [r7, #23]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d132      	bne.n	8002770 <FLASH_OB_WRPConfig+0x84>
  {
    /* Configure the write protected area */
    if (WRPArea == OB_WRPAREA_BANK1_AREAA)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d106      	bne.n	800271e <FLASH_OB_WRPConfig+0x32>
    {
      FLASH->WRP1AR = ((WRDPEndOffset << FLASH_WRP1AR_WRP1A_END_Pos) | WRPStartOffset);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	041a      	lsls	r2, r3, #16
 8002714:	4919      	ldr	r1, [pc, #100]	@ (800277c <FLASH_OB_WRPConfig+0x90>)
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	4313      	orrs	r3, r2
 800271a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800271c:	e01c      	b.n	8002758 <FLASH_OB_WRPConfig+0x6c>
    }
    else if (WRPArea == OB_WRPAREA_BANK1_AREAB)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d106      	bne.n	8002732 <FLASH_OB_WRPConfig+0x46>
    {
      FLASH->WRP1BR = ((WRDPEndOffset << FLASH_WRP1BR_WRP1B_END_Pos) | WRPStartOffset);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	041a      	lsls	r2, r3, #16
 8002728:	4914      	ldr	r1, [pc, #80]	@ (800277c <FLASH_OB_WRPConfig+0x90>)
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	4313      	orrs	r3, r2
 800272e:	630b      	str	r3, [r1, #48]	@ 0x30
 8002730:	e012      	b.n	8002758 <FLASH_OB_WRPConfig+0x6c>
    }
#if defined (FLASH_OPTR_DBANK)
    else if (WRPArea == OB_WRPAREA_BANK2_AREAA)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2b02      	cmp	r3, #2
 8002736:	d106      	bne.n	8002746 <FLASH_OB_WRPConfig+0x5a>
    {
      FLASH->WRP2AR = ((WRDPEndOffset << FLASH_WRP2AR_WRP2A_END_Pos) | WRPStartOffset);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	041a      	lsls	r2, r3, #16
 800273c:	490f      	ldr	r1, [pc, #60]	@ (800277c <FLASH_OB_WRPConfig+0x90>)
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	4313      	orrs	r3, r2
 8002742:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8002744:	e008      	b.n	8002758 <FLASH_OB_WRPConfig+0x6c>
    }
    else if (WRPArea == OB_WRPAREA_BANK2_AREAB)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2b04      	cmp	r3, #4
 800274a:	d105      	bne.n	8002758 <FLASH_OB_WRPConfig+0x6c>
    {
      FLASH->WRP2BR = ((WRDPEndOffset << FLASH_WRP2BR_WRP2B_END_Pos) | WRPStartOffset);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	041a      	lsls	r2, r3, #16
 8002750:	490a      	ldr	r1, [pc, #40]	@ (800277c <FLASH_OB_WRPConfig+0x90>)
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	4313      	orrs	r3, r2
 8002756:	650b      	str	r3, [r1, #80]	@ 0x50
    {
      /* Nothing to do */
    }

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8002758:	4b08      	ldr	r3, [pc, #32]	@ (800277c <FLASH_OB_WRPConfig+0x90>)
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	4a07      	ldr	r2, [pc, #28]	@ (800277c <FLASH_OB_WRPConfig+0x90>)
 800275e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002762:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002764:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002768:	f7ff fcb0 	bl	80020cc <FLASH_WaitForLastOperation>
 800276c:	4603      	mov	r3, r0
 800276e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002770:	7dfb      	ldrb	r3, [r7, #23]
}
 8002772:	4618      	mov	r0, r3
 8002774:	3718      	adds	r7, #24
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40022000 	.word	0x40022000

08002780 <FLASH_OB_RDPConfig>:
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  *
  * @retval HAL_Status
  */
static HAL_StatusTypeDef FLASH_OB_RDPConfig(uint32_t RDPLevel)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002788:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800278c:	f7ff fc9e 	bl	80020cc <FLASH_WaitForLastOperation>
 8002790:	4603      	mov	r3, r0
 8002792:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002794:	7bfb      	ldrb	r3, [r7, #15]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d113      	bne.n	80027c2 <FLASH_OB_RDPConfig+0x42>
  {
    /* Configure the RDP level in the option bytes register */
    MODIFY_REG(FLASH->OPTR, FLASH_OPTR_RDP, RDPLevel);
 800279a:	4b0c      	ldr	r3, [pc, #48]	@ (80027cc <FLASH_OB_RDPConfig+0x4c>)
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80027a2:	490a      	ldr	r1, [pc, #40]	@ (80027cc <FLASH_OB_RDPConfig+0x4c>)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 80027aa:	4b08      	ldr	r3, [pc, #32]	@ (80027cc <FLASH_OB_RDPConfig+0x4c>)
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	4a07      	ldr	r2, [pc, #28]	@ (80027cc <FLASH_OB_RDPConfig+0x4c>)
 80027b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027b4:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80027b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80027ba:	f7ff fc87 	bl	80020cc <FLASH_WaitForLastOperation>
 80027be:	4603      	mov	r3, r0
 80027c0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40022000 	.word	0x40022000

080027d0 <FLASH_OB_UserConfig>:
  *         @ref FLASH_OB_USER_NRST_MODE, @ref FLASH_OB_USER_INTERNAL_RESET_HOLDER
  * @note   (*) availability depends on devices
  * @retval HAL_Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint32_t UserType, uint32_t UserConfig)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t optr_reg_val = 0;
 80027da:	2300      	movs	r3, #0
 80027dc:	617b      	str	r3, [r7, #20]
  uint32_t optr_reg_mask = 0;
 80027de:	2300      	movs	r3, #0
 80027e0:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80027e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80027e6:	f7ff fc71 	bl	80020cc <FLASH_WaitForLastOperation>
 80027ea:	4603      	mov	r3, r0
 80027ec:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80027ee:	7bfb      	ldrb	r3, [r7, #15]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f040 8105 	bne.w	8002a00 <FLASH_OB_UserConfig+0x230>
      optr_reg_val |= (UserConfig & FLASH_OPTR_PB4_PUPEN);
      optr_reg_mask |= FLASH_OPTR_PB4_PUPEN;
    }
#endif /* FLASH_OPTR_PB4_PUPEN */

    if ((UserType & OB_USER_BOR_LEV) != 0U)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d009      	beq.n	8002814 <FLASH_OB_UserConfig+0x44>
    {
      /* BOR level option byte should be modified */
      assert_param(IS_OB_USER_BOR_LEVEL(UserConfig & FLASH_OPTR_BOR_LEV));

      /* Set value and mask for BOR level option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BOR_LEV);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	4313      	orrs	r3, r2
 800280a:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BOR_LEV;
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002812:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_nRST_STOP) != 0U)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d009      	beq.n	8002832 <FLASH_OB_UserConfig+0x62>
    {
      /* nRST_STOP option byte should be modified */
      assert_param(IS_OB_USER_STOP(UserConfig & FLASH_OPTR_nRST_STOP));

      /* Set value and mask for nRST_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STOP);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002824:	697a      	ldr	r2, [r7, #20]
 8002826:	4313      	orrs	r3, r2
 8002828:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STOP;
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002830:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_nRST_STDBY) != 0U)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f003 0304 	and.w	r3, r3, #4
 8002838:	2b00      	cmp	r3, #0
 800283a:	d009      	beq.n	8002850 <FLASH_OB_UserConfig+0x80>
    {
      /* nRST_STDBY option byte should be modified */
      assert_param(IS_OB_USER_STANDBY(UserConfig & FLASH_OPTR_nRST_STDBY));

      /* Set value and mask for nRST_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STDBY);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	4313      	orrs	r3, r2
 8002846:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STDBY;
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800284e:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_nRST_SHDW) != 0U)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d009      	beq.n	800286e <FLASH_OB_UserConfig+0x9e>
    {
      /* nRST_SHDW option byte should be modified */
      assert_param(IS_OB_USER_SHUTDOWN(UserConfig & FLASH_OPTR_nRST_SHDW));

      /* Set value and mask for nRST_SHDW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_SHDW);
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	4313      	orrs	r3, r2
 8002864:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_SHDW;
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800286c:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_IWDG_SW) != 0U)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f003 0308 	and.w	r3, r3, #8
 8002874:	2b00      	cmp	r3, #0
 8002876:	d009      	beq.n	800288c <FLASH_OB_UserConfig+0xbc>
    {
      /* IWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_IWDG(UserConfig & FLASH_OPTR_IWDG_SW));

      /* Set value and mask for IWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_SW);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	4313      	orrs	r3, r2
 8002882:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_SW;
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800288a:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_IWDG_STOP) != 0U)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f003 0310 	and.w	r3, r3, #16
 8002892:	2b00      	cmp	r3, #0
 8002894:	d009      	beq.n	80028aa <FLASH_OB_UserConfig+0xda>
    {
      /* IWDG_STOP option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTR_IWDG_STOP));

      /* Set value and mask for IWDG_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STOP);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	4313      	orrs	r3, r2
 80028a0:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STOP;
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028a8:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_IWDG_STDBY) != 0U)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f003 0320 	and.w	r3, r3, #32
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d009      	beq.n	80028c8 <FLASH_OB_UserConfig+0xf8>
    {
      /* IWDG_STDBY option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTR_IWDG_STDBY));

      /* Set value and mask for IWDG_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STDBY);
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	4313      	orrs	r3, r2
 80028be:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STDBY;
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028c6:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_WWDG_SW) != 0U)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d009      	beq.n	80028e6 <FLASH_OB_UserConfig+0x116>
    {
      /* WWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_WWDG(UserConfig & FLASH_OPTR_WWDG_SW));

      /* Set value and mask for WWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_WWDG_SW);
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	4313      	orrs	r3, r2
 80028dc:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_WWDG_SW;
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80028e4:	613b      	str	r3, [r7, #16]
    }

#if defined (FLASH_OPTR_BFB2)
    if ((UserType & OB_USER_BFB2) != 0U)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d009      	beq.n	8002904 <FLASH_OB_UserConfig+0x134>
    {
      /* BFB2 option byte should be modified */
      assert_param(IS_OB_USER_BFB2(UserConfig & FLASH_OPTR_BFB2));

      /* Set value and mask for BFB2 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BFB2);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BFB2;
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002902:	613b      	str	r3, [r7, #16]
    }
#endif

    if ((UserType & OB_USER_nBOOT1) != 0U)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800290a:	2b00      	cmp	r3, #0
 800290c:	d009      	beq.n	8002922 <FLASH_OB_UserConfig+0x152>
    {
      /* nBOOT1 option byte should be modified */
      assert_param(IS_OB_USER_BOOT1(UserConfig & FLASH_OPTR_nBOOT1));

      /* Set value and mask for nBOOT1 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT1);
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	4313      	orrs	r3, r2
 8002918:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nBOOT1;
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002920:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_SRAM_PE) != 0U)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002928:	2b00      	cmp	r3, #0
 800292a:	d009      	beq.n	8002940 <FLASH_OB_UserConfig+0x170>
    {
      /* SRAM_PE option byte should be modified */
      assert_param(IS_OB_USER_SRAM_PARITY(UserConfig & FLASH_OPTR_SRAM_PE));

      /* Set value and mask for SRAM_PE option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM_PE);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	4313      	orrs	r3, r2
 8002936:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM_PE;
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800293e:	613b      	str	r3, [r7, #16]
    }
    if ((UserType & OB_USER_CCMSRAM_RST) != 0U)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002946:	2b00      	cmp	r3, #0
 8002948:	d009      	beq.n	800295e <FLASH_OB_UserConfig+0x18e>
    {
      /* CCMSRAM_RST option byte should be modified */
      assert_param(IS_OB_USER_CCMSRAM_RST(UserConfig & FLASH_OPTR_CCMSRAM_RST));

      /* Set value and mask for CCMSRAM_RST option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_CCMSRAM_RST);
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	4313      	orrs	r3, r2
 8002954:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_CCMSRAM_RST;
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800295c:	613b      	str	r3, [r7, #16]
    }
    if ((UserType & OB_USER_nSWBOOT0) != 0U)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d009      	beq.n	800297c <FLASH_OB_UserConfig+0x1ac>
    {
      /* nSWBOOT0 option byte should be modified */
      assert_param(IS_OB_USER_SWBOOT0(UserConfig & FLASH_OPTR_nSWBOOT0));

      /* Set value and mask for nSWBOOT0 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nSWBOOT0);
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	4313      	orrs	r3, r2
 8002972:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nSWBOOT0;
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800297a:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_nBOOT0) != 0U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d009      	beq.n	800299a <FLASH_OB_UserConfig+0x1ca>
    {
      /* nBOOT0 option byte should be modified */
      assert_param(IS_OB_USER_BOOT0(UserConfig & FLASH_OPTR_nBOOT0));

      /* Set value and mask for nBOOT0 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT0);
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	4313      	orrs	r3, r2
 8002990:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nBOOT0;
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002998:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_NRST_MODE) != 0U)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d009      	beq.n	80029b8 <FLASH_OB_UserConfig+0x1e8>
    {
      /* Reset Configuration option byte should be modified */
      assert_param(IS_OB_USER_NRST_MODE(UserConfig & FLASH_OPTR_NRST_MODE));

      /* Set value and mask for Reset Configuration option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_NRST_MODE);
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_NRST_MODE;
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 80029b6:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_IRHEN) != 0U)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d009      	beq.n	80029d6 <FLASH_OB_UserConfig+0x206>
    {
      /* IRH option byte should be modified */
      assert_param(IS_OB_USER_IRHEN(UserConfig & FLASH_OPTR_IRHEN));

      /* Set value and mask for IRH option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IRHEN);
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IRHEN;
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80029d4:	613b      	str	r3, [r7, #16]
    }

    /* Configure the option bytes register */
    MODIFY_REG(FLASH->OPTR, optr_reg_mask, optr_reg_val);
 80029d6:	4b0d      	ldr	r3, [pc, #52]	@ (8002a0c <FLASH_OB_UserConfig+0x23c>)
 80029d8:	6a1a      	ldr	r2, [r3, #32]
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	43db      	mvns	r3, r3
 80029de:	401a      	ands	r2, r3
 80029e0:	490a      	ldr	r1, [pc, #40]	@ (8002a0c <FLASH_OB_UserConfig+0x23c>)
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 80029e8:	4b08      	ldr	r3, [pc, #32]	@ (8002a0c <FLASH_OB_UserConfig+0x23c>)
 80029ea:	695b      	ldr	r3, [r3, #20]
 80029ec:	4a07      	ldr	r2, [pc, #28]	@ (8002a0c <FLASH_OB_UserConfig+0x23c>)
 80029ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029f2:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80029f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80029f8:	f7ff fb68 	bl	80020cc <FLASH_WaitForLastOperation>
 80029fc:	4603      	mov	r3, r0
 80029fe:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3718      	adds	r7, #24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40022000 	.word	0x40022000

08002a10 <FLASH_OB_PCROPConfig>:
  * @param  PCROPEndAddr specifies the end address of the Proprietary code readout protection.
  *         This parameter can be an address between PCROPStartAddr and end of the bank.
  * @retval HAL_Status
  */
static HAL_StatusTypeDef FLASH_OB_PCROPConfig(uint32_t PCROPConfig, uint32_t PCROPStartAddr, uint32_t PCROPEndAddr)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b088      	sub	sp, #32
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_PCROP_RDP(PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPStartAddr));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPEndAddr));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a1c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a20:	f7ff fb54 	bl	80020cc <FLASH_WaitForLastOperation>
 8002a24:	4603      	mov	r3, r0
 8002a26:	77fb      	strb	r3, [r7, #31]

  if (status == HAL_OK)
 8002a28:	7ffb      	ldrb	r3, [r7, #31]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f040 80da 	bne.w	8002be4 <FLASH_OB_PCROPConfig+0x1d4>
  {
#if defined (FLASH_OPTR_DBANK)
    /* Get the information about the bank swapping */
    if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 8002a30:	4b6f      	ldr	r3, [pc, #444]	@ (8002bf0 <FLASH_OB_PCROPConfig+0x1e0>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d114      	bne.n	8002a66 <FLASH_OB_PCROPConfig+0x56>
    {
      bank1_addr = FLASH_BASE;
 8002a3c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002a40:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8002a42:	4b6c      	ldr	r3, [pc, #432]	@ (8002bf4 <FLASH_OB_PCROPConfig+0x1e4>)
 8002a44:	881b      	ldrh	r3, [r3, #0]
 8002a46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d008      	beq.n	8002a60 <FLASH_OB_PCROPConfig+0x50>
 8002a4e:	4b69      	ldr	r3, [pc, #420]	@ (8002bf4 <FLASH_OB_PCROPConfig+0x1e4>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	029b      	lsls	r3, r3, #10
 8002a54:	085a      	lsrs	r2, r3, #1
 8002a56:	4b68      	ldr	r3, [pc, #416]	@ (8002bf8 <FLASH_OB_PCROPConfig+0x1e8>)
 8002a58:	4013      	ands	r3, r2
 8002a5a:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8002a5e:	e000      	b.n	8002a62 <FLASH_OB_PCROPConfig+0x52>
 8002a60:	4b66      	ldr	r3, [pc, #408]	@ (8002bfc <FLASH_OB_PCROPConfig+0x1ec>)
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	e013      	b.n	8002a8e <FLASH_OB_PCROPConfig+0x7e>
    }
    else
    {
      bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8002a66:	4b63      	ldr	r3, [pc, #396]	@ (8002bf4 <FLASH_OB_PCROPConfig+0x1e4>)
 8002a68:	881b      	ldrh	r3, [r3, #0]
 8002a6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d008      	beq.n	8002a84 <FLASH_OB_PCROPConfig+0x74>
 8002a72:	4b60      	ldr	r3, [pc, #384]	@ (8002bf4 <FLASH_OB_PCROPConfig+0x1e4>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	029b      	lsls	r3, r3, #10
 8002a78:	085a      	lsrs	r2, r3, #1
 8002a7a:	4b5f      	ldr	r3, [pc, #380]	@ (8002bf8 <FLASH_OB_PCROPConfig+0x1e8>)
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8002a82:	e000      	b.n	8002a86 <FLASH_OB_PCROPConfig+0x76>
 8002a84:	4b5d      	ldr	r3, [pc, #372]	@ (8002bfc <FLASH_OB_PCROPConfig+0x1ec>)
 8002a86:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE;
 8002a88:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002a8c:	617b      	str	r3, [r7, #20]
#else
    bank1_addr = FLASH_BASE;
#endif

#if defined (FLASH_OPTR_DBANK)
    if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8002a8e:	4b5c      	ldr	r3, [pc, #368]	@ (8002c00 <FLASH_OB_PCROPConfig+0x1f0>)
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d147      	bne.n	8002b2a <FLASH_OB_PCROPConfig+0x11a>
    {
      /* Configure the Proprietary code readout protection */
      if ((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_1)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f003 0303 	and.w	r3, r3, #3
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d11e      	bne.n	8002ae2 <FLASH_OB_PCROPConfig+0xd2>
      {
        reg_value = ((PCROPStartAddr - FLASH_BASE) >> 4);
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8002aaa:	091b      	lsrs	r3, r3, #4
 8002aac:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 8002aae:	4b54      	ldr	r3, [pc, #336]	@ (8002c00 <FLASH_OB_PCROPConfig+0x1f0>)
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002ab6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002aba:	4951      	ldr	r1, [pc, #324]	@ (8002c00 <FLASH_OB_PCROPConfig+0x1f0>)
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	624b      	str	r3, [r1, #36]	@ 0x24

        reg_value = ((PCROPEndAddr - FLASH_BASE) >> 4);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8002ac8:	091b      	lsrs	r3, r3, #4
 8002aca:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 8002acc:	4b4c      	ldr	r3, [pc, #304]	@ (8002c00 <FLASH_OB_PCROPConfig+0x1f0>)
 8002ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ad0:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002ad4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002ad8:	4949      	ldr	r1, [pc, #292]	@ (8002c00 <FLASH_OB_PCROPConfig+0x1f0>)
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	628b      	str	r3, [r1, #40]	@ 0x28
 8002ae0:	e06a      	b.n	8002bb8 <FLASH_OB_PCROPConfig+0x1a8>
      }
      else if ((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_2)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f003 0303 	and.w	r3, r3, #3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d165      	bne.n	8002bb8 <FLASH_OB_PCROPConfig+0x1a8>
      {
        reg_value = ((PCROPStartAddr - FLASH_BASE) >> 4);
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8002af2:	091b      	lsrs	r3, r3, #4
 8002af4:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
 8002af6:	4b42      	ldr	r3, [pc, #264]	@ (8002c00 <FLASH_OB_PCROPConfig+0x1f0>)
 8002af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002afa:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002afe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002b02:	493f      	ldr	r1, [pc, #252]	@ (8002c00 <FLASH_OB_PCROPConfig+0x1f0>)
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	644b      	str	r3, [r1, #68]	@ 0x44

        reg_value = ((PCROPEndAddr - FLASH_BASE) >> 4);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8002b10:	091b      	lsrs	r3, r3, #4
 8002b12:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
 8002b14:	4b3a      	ldr	r3, [pc, #232]	@ (8002c00 <FLASH_OB_PCROPConfig+0x1f0>)
 8002b16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b18:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002b1c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002b20:	4937      	ldr	r1, [pc, #220]	@ (8002c00 <FLASH_OB_PCROPConfig+0x1f0>)
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	648b      	str	r3, [r1, #72]	@ 0x48
 8002b28:	e046      	b.n	8002bb8 <FLASH_OB_PCROPConfig+0x1a8>
    }
    else
#endif
    {
      /* Configure the Proprietary code readout protection */
      if ((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_1)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f003 0303 	and.w	r3, r3, #3
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d11e      	bne.n	8002b72 <FLASH_OB_PCROPConfig+0x162>
      {
        reg_value = ((PCROPStartAddr - bank1_addr) >> 3);
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	08db      	lsrs	r3, r3, #3
 8002b3c:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 8002b3e:	4b30      	ldr	r3, [pc, #192]	@ (8002c00 <FLASH_OB_PCROPConfig+0x1f0>)
 8002b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b42:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002b46:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002b4a:	492d      	ldr	r1, [pc, #180]	@ (8002c00 <FLASH_OB_PCROPConfig+0x1f0>)
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	624b      	str	r3, [r1, #36]	@ 0x24

        reg_value = ((PCROPEndAddr - bank1_addr) >> 3);
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	08db      	lsrs	r3, r3, #3
 8002b5a:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 8002b5c:	4b28      	ldr	r3, [pc, #160]	@ (8002c00 <FLASH_OB_PCROPConfig+0x1f0>)
 8002b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b60:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002b64:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002b68:	4925      	ldr	r1, [pc, #148]	@ (8002c00 <FLASH_OB_PCROPConfig+0x1f0>)
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	628b      	str	r3, [r1, #40]	@ 0x28
 8002b70:	e022      	b.n	8002bb8 <FLASH_OB_PCROPConfig+0x1a8>
      }
#if defined (FLASH_OPTR_DBANK)
      else if ((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_2)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f003 0303 	and.w	r3, r3, #3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d11d      	bne.n	8002bb8 <FLASH_OB_PCROPConfig+0x1a8>
      {
        reg_value = ((PCROPStartAddr - bank2_addr) >> 3);
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	08db      	lsrs	r3, r3, #3
 8002b84:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
 8002b86:	4b1e      	ldr	r3, [pc, #120]	@ (8002c00 <FLASH_OB_PCROPConfig+0x1f0>)
 8002b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002b8e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002b92:	491b      	ldr	r1, [pc, #108]	@ (8002c00 <FLASH_OB_PCROPConfig+0x1f0>)
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	644b      	str	r3, [r1, #68]	@ 0x44

        reg_value = ((PCROPEndAddr - bank2_addr) >> 3);
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	08db      	lsrs	r3, r3, #3
 8002ba2:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
 8002ba4:	4b16      	ldr	r3, [pc, #88]	@ (8002c00 <FLASH_OB_PCROPConfig+0x1f0>)
 8002ba6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ba8:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002bac:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002bb0:	4913      	ldr	r1, [pc, #76]	@ (8002c00 <FLASH_OB_PCROPConfig+0x1f0>)
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	648b      	str	r3, [r1, #72]	@ 0x48
      {
        /* Nothing to do */
      }
    }

    MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP_RDP, (PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
 8002bb8:	4b11      	ldr	r3, [pc, #68]	@ (8002c00 <FLASH_OB_PCROPConfig+0x1f0>)
 8002bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bbc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002bc6:	490e      	ldr	r1, [pc, #56]	@ (8002c00 <FLASH_OB_PCROPConfig+0x1f0>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	628b      	str	r3, [r1, #40]	@ 0x28

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8002bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8002c00 <FLASH_OB_PCROPConfig+0x1f0>)
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	4a0b      	ldr	r2, [pc, #44]	@ (8002c00 <FLASH_OB_PCROPConfig+0x1f0>)
 8002bd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bd6:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002bd8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002bdc:	f7ff fa76 	bl	80020cc <FLASH_WaitForLastOperation>
 8002be0:	4603      	mov	r3, r0
 8002be2:	77fb      	strb	r3, [r7, #31]
  }

  return status;
 8002be4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3720      	adds	r7, #32
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40010000 	.word	0x40010000
 8002bf4:	1fff75e0 	.word	0x1fff75e0
 8002bf8:	01fffe00 	.word	0x01fffe00
 8002bfc:	08040000 	.word	0x08040000
 8002c00:	40022000 	.word	0x40022000

08002c04 <FLASH_OB_SecMemConfig>:
  *         starting from first page of the bank.
  *         This parameter can be page number between 0 and (max number of pages in the bank - 1)
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_SecMemConfig(uint32_t SecBank, uint32_t SecSize)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK_EXCLUSIVE(SecBank));
  assert_param(IS_OB_SECMEM_SIZE(SecSize));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c0e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002c12:	f7ff fa5b 	bl	80020cc <FLASH_WaitForLastOperation>
 8002c16:	4603      	mov	r3, r0
 8002c18:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002c1a:	7bfb      	ldrb	r3, [r7, #15]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d122      	bne.n	8002c66 <FLASH_OB_SecMemConfig+0x62>
  {
    /* Configure the write protected area */
    if (SecBank == FLASH_BANK_1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d108      	bne.n	8002c38 <FLASH_OB_SecMemConfig+0x34>
    {
      MODIFY_REG(FLASH->SEC1R, FLASH_SEC1R_SEC_SIZE1, SecSize);
 8002c26:	4b12      	ldr	r3, [pc, #72]	@ (8002c70 <FLASH_OB_SecMemConfig+0x6c>)
 8002c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c2a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002c2e:	4910      	ldr	r1, [pc, #64]	@ (8002c70 <FLASH_OB_SecMemConfig+0x6c>)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	670b      	str	r3, [r1, #112]	@ 0x70
 8002c36:	e00a      	b.n	8002c4e <FLASH_OB_SecMemConfig+0x4a>
    }
#if defined (FLASH_OPTR_DBANK)
    else if (SecBank == FLASH_BANK_2)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d107      	bne.n	8002c4e <FLASH_OB_SecMemConfig+0x4a>
    {
      MODIFY_REG(FLASH->SEC2R, FLASH_SEC2R_SEC_SIZE2, SecSize);
 8002c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8002c70 <FLASH_OB_SecMemConfig+0x6c>)
 8002c40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c42:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002c46:	490a      	ldr	r1, [pc, #40]	@ (8002c70 <FLASH_OB_SecMemConfig+0x6c>)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	674b      	str	r3, [r1, #116]	@ 0x74
      /* Nothing to do */
    }
#endif

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8002c4e:	4b08      	ldr	r3, [pc, #32]	@ (8002c70 <FLASH_OB_SecMemConfig+0x6c>)
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	4a07      	ldr	r2, [pc, #28]	@ (8002c70 <FLASH_OB_SecMemConfig+0x6c>)
 8002c54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c58:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c5a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002c5e:	f7ff fa35 	bl	80020cc <FLASH_WaitForLastOperation>
 8002c62:	4603      	mov	r3, r0
 8002c64:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8002c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40022000 	.word	0x40022000

08002c74 <FLASH_OB_BootLockConfig>:
  *            @arg OB_BOOT_LOCK_DISABLE: Disable Boot Lock
  *
  * @retval HAL_Status
  */
static HAL_StatusTypeDef FLASH_OB_BootLockConfig(uint32_t BootLockConfig)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OB_BOOT_LOCK(BootLockConfig));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c7c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002c80:	f7ff fa24 	bl	80020cc <FLASH_WaitForLastOperation>
 8002c84:	4603      	mov	r3, r0
 8002c86:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002c88:	7bfb      	ldrb	r3, [r7, #15]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d113      	bne.n	8002cb6 <FLASH_OB_BootLockConfig+0x42>
  {
    MODIFY_REG(FLASH->SEC1R, FLASH_SEC1R_BOOT_LOCK, BootLockConfig);
 8002c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc0 <FLASH_OB_BootLockConfig+0x4c>)
 8002c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c92:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002c96:	490a      	ldr	r1, [pc, #40]	@ (8002cc0 <FLASH_OB_BootLockConfig+0x4c>)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	670b      	str	r3, [r1, #112]	@ 0x70

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8002c9e:	4b08      	ldr	r3, [pc, #32]	@ (8002cc0 <FLASH_OB_BootLockConfig+0x4c>)
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	4a07      	ldr	r2, [pc, #28]	@ (8002cc0 <FLASH_OB_BootLockConfig+0x4c>)
 8002ca4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ca8:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002caa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002cae:	f7ff fa0d 	bl	80020cc <FLASH_WaitForLastOperation>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8002cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40022000 	.word	0x40022000

08002cc4 <FLASH_OB_GetSecMem>:
  * @param[out]  SecSize specifies the number of pages used in the securable
                 memory area of the bank.
  * @retval None
  */
static void FLASH_OB_GetSecMem(uint32_t SecBank, uint32_t *SecSize)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  /* Get the configuration of the securable memory area */
  if (SecBank == FLASH_BANK_1)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d105      	bne.n	8002ce0 <FLASH_OB_GetSecMem+0x1c>
  {
    *SecSize = READ_BIT(FLASH->SEC1R, FLASH_SEC1R_SEC_SIZE1);
 8002cd4:	4b09      	ldr	r3, [pc, #36]	@ (8002cfc <FLASH_OB_GetSecMem+0x38>)
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }
#endif
}
 8002cde:	e007      	b.n	8002cf0 <FLASH_OB_GetSecMem+0x2c>
  else if (SecBank == FLASH_BANK_2)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d104      	bne.n	8002cf0 <FLASH_OB_GetSecMem+0x2c>
    *SecSize = READ_BIT(FLASH->SEC2R, FLASH_SEC2R_SEC_SIZE2);
 8002ce6:	4b05      	ldr	r3, [pc, #20]	@ (8002cfc <FLASH_OB_GetSecMem+0x38>)
 8002ce8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	601a      	str	r2, [r3, #0]
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	40022000 	.word	0x40022000

08002d00 <FLASH_OB_GetBootLock>:
  *         This return value can be one of the following values:
  *            @arg OB_BOOT_LOCK_ENABLE: Boot lock enabled
  *            @arg OB_BOOT_LOCK_DISABLE: Boot lock disabled
  */
static uint32_t FLASH_OB_GetBootLock(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  return (READ_REG(FLASH->SEC1R) & FLASH_SEC1R_BOOT_LOCK);
 8002d04:	4b04      	ldr	r3, [pc, #16]	@ (8002d18 <FLASH_OB_GetBootLock+0x18>)
 8002d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	40022000 	.word	0x40022000

08002d1c <FLASH_OB_GetWRP>:
  * @param[out]  WRDPEndOffset specifies the address where to copied the end page of
  *              the write protected area.
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t *WRPStartOffset, uint32_t *WRDPEndOffset)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
  /* Get the configuration of the write protected area */
  if (WRPArea == OB_WRPAREA_BANK1_AREAA)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10d      	bne.n	8002d4a <FLASH_OB_GetWRP+0x2e>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 8002d2e:	4b23      	ldr	r3, [pc, #140]	@ (8002dbc <FLASH_OB_GetWRP+0xa0>)
 8002d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> FLASH_WRP1AR_WRP1A_END_Pos);
 8002d3a:	4b20      	ldr	r3, [pc, #128]	@ (8002dbc <FLASH_OB_GetWRP+0xa0>)
 8002d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d3e:	0c1b      	lsrs	r3, r3, #16
 8002d40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	601a      	str	r2, [r3, #0]
#endif
  else
  {
    /* Nothing to do */
  }
}
 8002d48:	e031      	b.n	8002dae <FLASH_OB_GetWRP+0x92>
  else if (WRPArea == OB_WRPAREA_BANK1_AREAB)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d10d      	bne.n	8002d6c <FLASH_OB_GetWRP+0x50>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 8002d50:	4b1a      	ldr	r3, [pc, #104]	@ (8002dbc <FLASH_OB_GetWRP+0xa0>)
 8002d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d54:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> FLASH_WRP1BR_WRP1B_END_Pos);
 8002d5c:	4b17      	ldr	r3, [pc, #92]	@ (8002dbc <FLASH_OB_GetWRP+0xa0>)
 8002d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d60:	0c1b      	lsrs	r3, r3, #16
 8002d62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	601a      	str	r2, [r3, #0]
}
 8002d6a:	e020      	b.n	8002dae <FLASH_OB_GetWRP+0x92>
  else if (WRPArea == OB_WRPAREA_BANK2_AREAA)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d10d      	bne.n	8002d8e <FLASH_OB_GetWRP+0x72>
    *WRPStartOffset = READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_STRT);
 8002d72:	4b12      	ldr	r3, [pc, #72]	@ (8002dbc <FLASH_OB_GetWRP+0xa0>)
 8002d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_END) >> FLASH_WRP2AR_WRP2A_END_Pos);
 8002d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8002dbc <FLASH_OB_GetWRP+0xa0>)
 8002d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d82:	0c1b      	lsrs	r3, r3, #16
 8002d84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	601a      	str	r2, [r3, #0]
}
 8002d8c:	e00f      	b.n	8002dae <FLASH_OB_GetWRP+0x92>
  else if (WRPArea == OB_WRPAREA_BANK2_AREAB)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2b04      	cmp	r3, #4
 8002d92:	d10c      	bne.n	8002dae <FLASH_OB_GetWRP+0x92>
    *WRPStartOffset = READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_STRT);
 8002d94:	4b09      	ldr	r3, [pc, #36]	@ (8002dbc <FLASH_OB_GetWRP+0xa0>)
 8002d96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d98:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_END) >> FLASH_WRP2BR_WRP2B_END_Pos);
 8002da0:	4b06      	ldr	r3, [pc, #24]	@ (8002dbc <FLASH_OB_GetWRP+0xa0>)
 8002da2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002da4:	0c1b      	lsrs	r3, r3, #16
 8002da6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	601a      	str	r2, [r3, #0]
}
 8002dae:	bf00      	nop
 8002db0:	3714      	adds	r7, #20
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	40022000 	.word	0x40022000

08002dc0 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 8002dc6:	4b09      	ldr	r3, [pc, #36]	@ (8002dec <FLASH_OB_GetRDP+0x2c>)
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	607b      	str	r3, [r7, #4]

  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2baa      	cmp	r3, #170	@ 0xaa
 8002dd2:	d004      	beq.n	8002dde <FLASH_OB_GetRDP+0x1e>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2bcc      	cmp	r3, #204	@ 0xcc
 8002dd8:	d001      	beq.n	8002dde <FLASH_OB_GetRDP+0x1e>
  {
    return (OB_RDP_LEVEL_1);
 8002dda:	23bb      	movs	r3, #187	@ 0xbb
 8002ddc:	e000      	b.n	8002de0 <FLASH_OB_GetRDP+0x20>
  }
  else
  {
    return rdp_level;
 8002dde:	687b      	ldr	r3, [r7, #4]
  }
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	40022000 	.word	0x40022000

08002df0 <FLASH_OB_GetUser>:
  *         @ref FLASH_OB_USER_CCMSRAM_RST, @ref OB_USER_nSWBOOT0,@ref FLASH_OB_USER_nBOOT0,
  *         @ref FLASH_OB_USER_NRST_MODE, @ref FLASH_OB_USER_INTERNAL_RESET_HOLDER
  * @note  (*) availability depends on devices
  */
static uint32_t FLASH_OB_GetUser(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
  uint32_t user_config = READ_REG(FLASH->OPTR);
 8002df6:	4b07      	ldr	r3, [pc, #28]	@ (8002e14 <FLASH_OB_GetUser+0x24>)
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	607b      	str	r3, [r7, #4]
  CLEAR_BIT(user_config, FLASH_OPTR_RDP);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002e02:	607b      	str	r3, [r7, #4]

  return user_config;
 8002e04:	687b      	ldr	r3, [r7, #4]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	40022000 	.word	0x40022000

08002e18 <FLASH_OB_GetPCROP>:
  * @param[out] PCROPEndAddr specifies the address where to copied the end address of
  *        the Proprietary code readout protection.
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t *PCROPConfig, uint32_t *PCROPStartAddr, uint32_t *PCROPEndAddr)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b089      	sub	sp, #36	@ 0x24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
  uint32_t bank1_addr;
#if defined (FLASH_OPTR_DBANK)
  uint32_t bank2_addr;

  /* Get the information about the bank swapping */
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 8002e24:	4b5b      	ldr	r3, [pc, #364]	@ (8002f94 <FLASH_OB_GetPCROP+0x17c>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d114      	bne.n	8002e5a <FLASH_OB_GetPCROP+0x42>
  {
    bank1_addr = FLASH_BASE;
 8002e30:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002e34:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8002e36:	4b58      	ldr	r3, [pc, #352]	@ (8002f98 <FLASH_OB_GetPCROP+0x180>)
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d008      	beq.n	8002e54 <FLASH_OB_GetPCROP+0x3c>
 8002e42:	4b55      	ldr	r3, [pc, #340]	@ (8002f98 <FLASH_OB_GetPCROP+0x180>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	029b      	lsls	r3, r3, #10
 8002e48:	085a      	lsrs	r2, r3, #1
 8002e4a:	4b54      	ldr	r3, [pc, #336]	@ (8002f9c <FLASH_OB_GetPCROP+0x184>)
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8002e52:	e000      	b.n	8002e56 <FLASH_OB_GetPCROP+0x3e>
 8002e54:	4b52      	ldr	r3, [pc, #328]	@ (8002fa0 <FLASH_OB_GetPCROP+0x188>)
 8002e56:	61bb      	str	r3, [r7, #24]
 8002e58:	e013      	b.n	8002e82 <FLASH_OB_GetPCROP+0x6a>
  }
  else
  {
    bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8002e5a:	4b4f      	ldr	r3, [pc, #316]	@ (8002f98 <FLASH_OB_GetPCROP+0x180>)
 8002e5c:	881b      	ldrh	r3, [r3, #0]
 8002e5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d008      	beq.n	8002e78 <FLASH_OB_GetPCROP+0x60>
 8002e66:	4b4c      	ldr	r3, [pc, #304]	@ (8002f98 <FLASH_OB_GetPCROP+0x180>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	029b      	lsls	r3, r3, #10
 8002e6c:	085a      	lsrs	r2, r3, #1
 8002e6e:	4b4b      	ldr	r3, [pc, #300]	@ (8002f9c <FLASH_OB_GetPCROP+0x184>)
 8002e70:	4013      	ands	r3, r2
 8002e72:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8002e76:	e000      	b.n	8002e7a <FLASH_OB_GetPCROP+0x62>
 8002e78:	4b49      	ldr	r3, [pc, #292]	@ (8002fa0 <FLASH_OB_GetPCROP+0x188>)
 8002e7a:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE;
 8002e7c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002e80:	61bb      	str	r3, [r7, #24]
#else
  bank1_addr = FLASH_BASE;
#endif

#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8002e82:	4b48      	ldr	r3, [pc, #288]	@ (8002fa4 <FLASH_OB_GetPCROP+0x18c>)
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d139      	bne.n	8002f02 <FLASH_OB_GetPCROP+0xea>
  {
    if (((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d116      	bne.n	8002ec8 <FLASH_OB_GetPCROP+0xb0>
    {
      reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
 8002e9a:	4b42      	ldr	r3, [pc, #264]	@ (8002fa4 <FLASH_OB_GetPCROP+0x18c>)
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002ea2:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 4) + FLASH_BASE;
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	011b      	lsls	r3, r3, #4
 8002ea8:	f103 6200 	add.w	r2, r3, #134217728	@ 0x8000000
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
 8002eb0:	4b3c      	ldr	r3, [pc, #240]	@ (8002fa4 <FLASH_OB_GetPCROP+0x18c>)
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002eb8:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 4) + FLASH_BASE;
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	f103 6200 	add.w	r2, r3, #134217728	@ 0x8000000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	e055      	b.n	8002f74 <FLASH_OB_GetPCROP+0x15c>
    }
    else if (((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_2)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0303 	and.w	r3, r3, #3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d14f      	bne.n	8002f74 <FLASH_OB_GetPCROP+0x15c>
    {
      reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
 8002ed4:	4b33      	ldr	r3, [pc, #204]	@ (8002fa4 <FLASH_OB_GetPCROP+0x18c>)
 8002ed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002edc:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 4) + FLASH_BASE;
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	011b      	lsls	r3, r3, #4
 8002ee2:	f103 6200 	add.w	r2, r3, #134217728	@ 0x8000000
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
 8002eea:	4b2e      	ldr	r3, [pc, #184]	@ (8002fa4 <FLASH_OB_GetPCROP+0x18c>)
 8002eec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eee:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002ef2:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 4) + FLASH_BASE;
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	011b      	lsls	r3, r3, #4
 8002ef8:	f103 6200 	add.w	r2, r3, #134217728	@ 0x8000000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	e038      	b.n	8002f74 <FLASH_OB_GetPCROP+0x15c>
    }
  }
  else
#endif
  {
    if (((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d116      	bne.n	8002f3c <FLASH_OB_GetPCROP+0x124>
    {
      reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
 8002f0e:	4b25      	ldr	r3, [pc, #148]	@ (8002fa4 <FLASH_OB_GetPCROP+0x18c>)
 8002f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f12:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002f16:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank1_addr;
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	00da      	lsls	r2, r3, #3
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	441a      	add	r2, r3
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
 8002f24:	4b1f      	ldr	r3, [pc, #124]	@ (8002fa4 <FLASH_OB_GetPCROP+0x18c>)
 8002f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f28:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002f2c:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank1_addr;
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	00da      	lsls	r2, r3, #3
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	441a      	add	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	e01b      	b.n	8002f74 <FLASH_OB_GetPCROP+0x15c>
    }
#if defined (FLASH_OPTR_DBANK)
    else if (((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_2)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0303 	and.w	r3, r3, #3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d115      	bne.n	8002f74 <FLASH_OB_GetPCROP+0x15c>
    {
      reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
 8002f48:	4b16      	ldr	r3, [pc, #88]	@ (8002fa4 <FLASH_OB_GetPCROP+0x18c>)
 8002f4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f4c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002f50:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank2_addr;
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	00da      	lsls	r2, r3, #3
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	441a      	add	r2, r3
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
 8002f5e:	4b11      	ldr	r3, [pc, #68]	@ (8002fa4 <FLASH_OB_GetPCROP+0x18c>)
 8002f60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f62:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002f66:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank2_addr;
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	00da      	lsls	r2, r3, #3
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	441a      	add	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	601a      	str	r2, [r3, #0]
    {
      /* Nothing to do */
    }
  }

  *PCROPConfig |= (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP_RDP);
 8002f74:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa4 <FLASH_OB_GetPCROP+0x18c>)
 8002f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f78:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	431a      	orrs	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	601a      	str	r2, [r3, #0]
}
 8002f86:	bf00      	nop
 8002f88:	3724      	adds	r7, #36	@ 0x24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	40010000 	.word	0x40010000
 8002f98:	1fff75e0 	.word	0x1fff75e0
 8002f9c:	01fffe00 	.word	0x01fffe00
 8002fa0:	08040000 	.word	0x08040000
 8002fa4:	40022000 	.word	0x40022000

08002fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b087      	sub	sp, #28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002fb6:	e15a      	b.n	800326e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 814c 	beq.w	8003268 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 0303 	and.w	r3, r3, #3
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d005      	beq.n	8002fe8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d130      	bne.n	800304a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	2203      	movs	r2, #3
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	4313      	orrs	r3, r2
 8003010:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800301e:	2201      	movs	r2, #1
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	43db      	mvns	r3, r3
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	4013      	ands	r3, r2
 800302c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	091b      	lsrs	r3, r3, #4
 8003034:	f003 0201 	and.w	r2, r3, #1
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	4313      	orrs	r3, r2
 8003042:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	2b03      	cmp	r3, #3
 8003054:	d017      	beq.n	8003086 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	2203      	movs	r2, #3
 8003062:	fa02 f303 	lsl.w	r3, r2, r3
 8003066:	43db      	mvns	r3, r3
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	4013      	ands	r3, r2
 800306c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	689a      	ldr	r2, [r3, #8]
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	4313      	orrs	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d123      	bne.n	80030da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	08da      	lsrs	r2, r3, #3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	3208      	adds	r2, #8
 800309a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800309e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	220f      	movs	r2, #15
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43db      	mvns	r3, r3
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	4013      	ands	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	691a      	ldr	r2, [r3, #16]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	08da      	lsrs	r2, r3, #3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3208      	adds	r2, #8
 80030d4:	6939      	ldr	r1, [r7, #16]
 80030d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	2203      	movs	r2, #3
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	43db      	mvns	r3, r3
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	4013      	ands	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f003 0203 	and.w	r2, r3, #3
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	4313      	orrs	r3, r2
 8003106:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 80a6 	beq.w	8003268 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800311c:	4b5b      	ldr	r3, [pc, #364]	@ (800328c <HAL_GPIO_Init+0x2e4>)
 800311e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003120:	4a5a      	ldr	r2, [pc, #360]	@ (800328c <HAL_GPIO_Init+0x2e4>)
 8003122:	f043 0301 	orr.w	r3, r3, #1
 8003126:	6613      	str	r3, [r2, #96]	@ 0x60
 8003128:	4b58      	ldr	r3, [pc, #352]	@ (800328c <HAL_GPIO_Init+0x2e4>)
 800312a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	60bb      	str	r3, [r7, #8]
 8003132:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003134:	4a56      	ldr	r2, [pc, #344]	@ (8003290 <HAL_GPIO_Init+0x2e8>)
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	089b      	lsrs	r3, r3, #2
 800313a:	3302      	adds	r3, #2
 800313c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003140:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f003 0303 	and.w	r3, r3, #3
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	220f      	movs	r2, #15
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	43db      	mvns	r3, r3
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	4013      	ands	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800315e:	d01f      	beq.n	80031a0 <HAL_GPIO_Init+0x1f8>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a4c      	ldr	r2, [pc, #304]	@ (8003294 <HAL_GPIO_Init+0x2ec>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d019      	beq.n	800319c <HAL_GPIO_Init+0x1f4>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a4b      	ldr	r2, [pc, #300]	@ (8003298 <HAL_GPIO_Init+0x2f0>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d013      	beq.n	8003198 <HAL_GPIO_Init+0x1f0>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a4a      	ldr	r2, [pc, #296]	@ (800329c <HAL_GPIO_Init+0x2f4>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d00d      	beq.n	8003194 <HAL_GPIO_Init+0x1ec>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a49      	ldr	r2, [pc, #292]	@ (80032a0 <HAL_GPIO_Init+0x2f8>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d007      	beq.n	8003190 <HAL_GPIO_Init+0x1e8>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a48      	ldr	r2, [pc, #288]	@ (80032a4 <HAL_GPIO_Init+0x2fc>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d101      	bne.n	800318c <HAL_GPIO_Init+0x1e4>
 8003188:	2305      	movs	r3, #5
 800318a:	e00a      	b.n	80031a2 <HAL_GPIO_Init+0x1fa>
 800318c:	2306      	movs	r3, #6
 800318e:	e008      	b.n	80031a2 <HAL_GPIO_Init+0x1fa>
 8003190:	2304      	movs	r3, #4
 8003192:	e006      	b.n	80031a2 <HAL_GPIO_Init+0x1fa>
 8003194:	2303      	movs	r3, #3
 8003196:	e004      	b.n	80031a2 <HAL_GPIO_Init+0x1fa>
 8003198:	2302      	movs	r3, #2
 800319a:	e002      	b.n	80031a2 <HAL_GPIO_Init+0x1fa>
 800319c:	2301      	movs	r3, #1
 800319e:	e000      	b.n	80031a2 <HAL_GPIO_Init+0x1fa>
 80031a0:	2300      	movs	r3, #0
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	f002 0203 	and.w	r2, r2, #3
 80031a8:	0092      	lsls	r2, r2, #2
 80031aa:	4093      	lsls	r3, r2
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031b2:	4937      	ldr	r1, [pc, #220]	@ (8003290 <HAL_GPIO_Init+0x2e8>)
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	089b      	lsrs	r3, r3, #2
 80031b8:	3302      	adds	r3, #2
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031c0:	4b39      	ldr	r3, [pc, #228]	@ (80032a8 <HAL_GPIO_Init+0x300>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	43db      	mvns	r3, r3
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	4013      	ands	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d003      	beq.n	80031e4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031e4:	4a30      	ldr	r2, [pc, #192]	@ (80032a8 <HAL_GPIO_Init+0x300>)
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80031ea:	4b2f      	ldr	r3, [pc, #188]	@ (80032a8 <HAL_GPIO_Init+0x300>)
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	43db      	mvns	r3, r3
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	4013      	ands	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	4313      	orrs	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800320e:	4a26      	ldr	r2, [pc, #152]	@ (80032a8 <HAL_GPIO_Init+0x300>)
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003214:	4b24      	ldr	r3, [pc, #144]	@ (80032a8 <HAL_GPIO_Init+0x300>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	43db      	mvns	r3, r3
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	4013      	ands	r3, r2
 8003222:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	4313      	orrs	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003238:	4a1b      	ldr	r2, [pc, #108]	@ (80032a8 <HAL_GPIO_Init+0x300>)
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800323e:	4b1a      	ldr	r3, [pc, #104]	@ (80032a8 <HAL_GPIO_Init+0x300>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	43db      	mvns	r3, r3
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	4013      	ands	r3, r2
 800324c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4313      	orrs	r3, r2
 8003260:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003262:	4a11      	ldr	r2, [pc, #68]	@ (80032a8 <HAL_GPIO_Init+0x300>)
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	3301      	adds	r3, #1
 800326c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	fa22 f303 	lsr.w	r3, r2, r3
 8003278:	2b00      	cmp	r3, #0
 800327a:	f47f ae9d 	bne.w	8002fb8 <HAL_GPIO_Init+0x10>
  }
}
 800327e:	bf00      	nop
 8003280:	bf00      	nop
 8003282:	371c      	adds	r7, #28
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	40021000 	.word	0x40021000
 8003290:	40010000 	.word	0x40010000
 8003294:	48000400 	.word	0x48000400
 8003298:	48000800 	.word	0x48000800
 800329c:	48000c00 	.word	0x48000c00
 80032a0:	48001000 	.word	0x48001000
 80032a4:	48001400 	.word	0x48001400
 80032a8:	40010400 	.word	0x40010400

080032ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	460b      	mov	r3, r1
 80032b6:	807b      	strh	r3, [r7, #2]
 80032b8:	4613      	mov	r3, r2
 80032ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032bc:	787b      	ldrb	r3, [r7, #1]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032c2:	887a      	ldrh	r2, [r7, #2]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032c8:	e002      	b.n	80032d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032ca:	887a      	ldrh	r2, [r7, #2]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	460b      	mov	r3, r1
 80032e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032ee:	887a      	ldrh	r2, [r7, #2]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4013      	ands	r3, r2
 80032f4:	041a      	lsls	r2, r3, #16
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	43d9      	mvns	r1, r3
 80032fa:	887b      	ldrh	r3, [r7, #2]
 80032fc:	400b      	ands	r3, r1
 80032fe:	431a      	orrs	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	619a      	str	r2, [r3, #24]
}
 8003304:	bf00      	nop
 8003306:	3714      	adds	r7, #20
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8003320:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d141      	bne.n	80033c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800333e:	4b4b      	ldr	r3, [pc, #300]	@ (800346c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003346:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800334a:	d131      	bne.n	80033b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800334c:	4b47      	ldr	r3, [pc, #284]	@ (800346c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800334e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003352:	4a46      	ldr	r2, [pc, #280]	@ (800346c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003354:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003358:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800335c:	4b43      	ldr	r3, [pc, #268]	@ (800346c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003364:	4a41      	ldr	r2, [pc, #260]	@ (800346c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003366:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800336a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800336c:	4b40      	ldr	r3, [pc, #256]	@ (8003470 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2232      	movs	r2, #50	@ 0x32
 8003372:	fb02 f303 	mul.w	r3, r2, r3
 8003376:	4a3f      	ldr	r2, [pc, #252]	@ (8003474 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003378:	fba2 2303 	umull	r2, r3, r2, r3
 800337c:	0c9b      	lsrs	r3, r3, #18
 800337e:	3301      	adds	r3, #1
 8003380:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003382:	e002      	b.n	800338a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	3b01      	subs	r3, #1
 8003388:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800338a:	4b38      	ldr	r3, [pc, #224]	@ (800346c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003392:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003396:	d102      	bne.n	800339e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1f2      	bne.n	8003384 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800339e:	4b33      	ldr	r3, [pc, #204]	@ (800346c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033aa:	d158      	bne.n	800345e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e057      	b.n	8003460 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033b0:	4b2e      	ldr	r3, [pc, #184]	@ (800346c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033b6:	4a2d      	ldr	r2, [pc, #180]	@ (800346c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80033c0:	e04d      	b.n	800345e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033c8:	d141      	bne.n	800344e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80033ca:	4b28      	ldr	r3, [pc, #160]	@ (800346c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80033d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033d6:	d131      	bne.n	800343c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033d8:	4b24      	ldr	r3, [pc, #144]	@ (800346c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033de:	4a23      	ldr	r2, [pc, #140]	@ (800346c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033e8:	4b20      	ldr	r3, [pc, #128]	@ (800346c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80033f0:	4a1e      	ldr	r2, [pc, #120]	@ (800346c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003470 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2232      	movs	r2, #50	@ 0x32
 80033fe:	fb02 f303 	mul.w	r3, r2, r3
 8003402:	4a1c      	ldr	r2, [pc, #112]	@ (8003474 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003404:	fba2 2303 	umull	r2, r3, r2, r3
 8003408:	0c9b      	lsrs	r3, r3, #18
 800340a:	3301      	adds	r3, #1
 800340c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800340e:	e002      	b.n	8003416 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	3b01      	subs	r3, #1
 8003414:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003416:	4b15      	ldr	r3, [pc, #84]	@ (800346c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800341e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003422:	d102      	bne.n	800342a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f2      	bne.n	8003410 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800342a:	4b10      	ldr	r3, [pc, #64]	@ (800346c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003432:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003436:	d112      	bne.n	800345e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e011      	b.n	8003460 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800343c:	4b0b      	ldr	r3, [pc, #44]	@ (800346c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800343e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003442:	4a0a      	ldr	r2, [pc, #40]	@ (800346c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003444:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003448:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800344c:	e007      	b.n	800345e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800344e:	4b07      	ldr	r3, [pc, #28]	@ (800346c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003456:	4a05      	ldr	r2, [pc, #20]	@ (800346c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003458:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800345c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	40007000 	.word	0x40007000
 8003470:	20000170 	.word	0x20000170
 8003474:	431bde83 	.word	0x431bde83

08003478 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800347e:	f7fe f815 	bl	80014ac <HAL_GetTick>
 8003482:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003484:	4b39      	ldr	r3, [pc, #228]	@ (800356c <HAL_RCC_DeInit+0xf4>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a38      	ldr	r2, [pc, #224]	@ (800356c <HAL_RCC_DeInit+0xf4>)
 800348a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800348e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003490:	e008      	b.n	80034a4 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003492:	f7fe f80b 	bl	80014ac <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e05f      	b.n	8003564 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034a4:	4b31      	ldr	r3, [pc, #196]	@ (800356c <HAL_RCC_DeInit+0xf4>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0f0      	beq.n	8003492 <HAL_RCC_DeInit+0x1a>
    }
  }

 /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->ICSCR, RCC_HSICALIBRATION_DEFAULT << RCC_ICSCR_HSITRIM_Pos);
 80034b0:	4b2e      	ldr	r3, [pc, #184]	@ (800356c <HAL_RCC_DeInit+0xf4>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	4a2d      	ldr	r2, [pc, #180]	@ (800356c <HAL_RCC_DeInit+0xf4>)
 80034b6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80034ba:	6053      	str	r3, [r2, #4]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80034bc:	f7fd fff6 	bl	80014ac <HAL_GetTick>
 80034c0:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register (HSI is selected as system clock source) */
  RCC->CFGR = 0x00000001u;
 80034c2:	4b2a      	ldr	r3, [pc, #168]	@ (800356c <HAL_RCC_DeInit+0xf4>)
 80034c4:	2201      	movs	r2, #1
 80034c6:	609a      	str	r2, [r3, #8]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80034c8:	e00a      	b.n	80034e0 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034ca:	f7fd ffef 	bl	80014ac <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034d8:	4293      	cmp	r3, r2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e041      	b.n	8003564 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80034e0:	4b22      	ldr	r3, [pc, #136]	@ (800356c <HAL_RCC_DeInit+0xf4>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f003 030c 	and.w	r3, r3, #12
 80034e8:	2b04      	cmp	r3, #4
 80034ea:	d1ee      	bne.n	80034ca <HAL_RCC_DeInit+0x52>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80034ec:	4b20      	ldr	r3, [pc, #128]	@ (8003570 <HAL_RCC_DeInit+0xf8>)
 80034ee:	4a21      	ldr	r2, [pc, #132]	@ (8003574 <HAL_RCC_DeInit+0xfc>)
 80034f0:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80034f2:	4b21      	ldr	r3, [pc, #132]	@ (8003578 <HAL_RCC_DeInit+0x100>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7fd ff8c 	bl	8001414 <HAL_InitTick>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <HAL_RCC_DeInit+0x8e>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e02e      	b.n	8003564 <HAL_RCC_DeInit+0xec>
  }

  /* Clear CR register in 2 steps: first to clear HSEON in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 8003506:	4b19      	ldr	r3, [pc, #100]	@ (800356c <HAL_RCC_DeInit+0xf4>)
 8003508:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800350c:	601a      	str	r2, [r3, #0]

  /* Then again to HSEBYP in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 800350e:	4b17      	ldr	r3, [pc, #92]	@ (800356c <HAL_RCC_DeInit+0xf4>)
 8003510:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003514:	601a      	str	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003516:	f7fd ffc9 	bl	80014ac <HAL_GetTick>
 800351a:	6078      	str	r0, [r7, #4]

  /* Wait till PLL is OFF */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800351c:	e008      	b.n	8003530 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800351e:	f7fd ffc5 	bl	80014ac <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d901      	bls.n	8003530 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e019      	b.n	8003564 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003530:	4b0e      	ldr	r3, [pc, #56]	@ (800356c <HAL_RCC_DeInit+0xf4>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1f0      	bne.n	800351e <HAL_RCC_DeInit+0xa6>
    }
  }

  /* once PLL is OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLN_4;
 800353c:	4b0b      	ldr	r3, [pc, #44]	@ (800356c <HAL_RCC_DeInit+0xf4>)
 800353e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003542:	60da      	str	r2, [r3, #12]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8003544:	4b09      	ldr	r3, [pc, #36]	@ (800356c <HAL_RCC_DeInit+0xf4>)
 8003546:	2200      	movs	r2, #0
 8003548:	619a      	str	r2, [r3, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 800354a:	4b08      	ldr	r3, [pc, #32]	@ (800356c <HAL_RCC_DeInit+0xf4>)
 800354c:	f04f 32ff 	mov.w	r2, #4294967295
 8003550:	621a      	str	r2, [r3, #32]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8003552:	4b06      	ldr	r3, [pc, #24]	@ (800356c <HAL_RCC_DeInit+0xf4>)
 8003554:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003558:	4a04      	ldr	r2, [pc, #16]	@ (800356c <HAL_RCC_DeInit+0xf4>)
 800355a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800355e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40021000 	.word	0x40021000
 8003570:	20000170 	.word	0x20000170
 8003574:	00f42400 	.word	0x00f42400
 8003578:	20000174 	.word	0x20000174

0800357c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b088      	sub	sp, #32
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e2fe      	b.n	8003b8c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d075      	beq.n	8003686 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800359a:	4b97      	ldr	r3, [pc, #604]	@ (80037f8 <HAL_RCC_OscConfig+0x27c>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 030c 	and.w	r3, r3, #12
 80035a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035a4:	4b94      	ldr	r3, [pc, #592]	@ (80037f8 <HAL_RCC_OscConfig+0x27c>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	f003 0303 	and.w	r3, r3, #3
 80035ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	2b0c      	cmp	r3, #12
 80035b2:	d102      	bne.n	80035ba <HAL_RCC_OscConfig+0x3e>
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	2b03      	cmp	r3, #3
 80035b8:	d002      	beq.n	80035c0 <HAL_RCC_OscConfig+0x44>
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d10b      	bne.n	80035d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c0:	4b8d      	ldr	r3, [pc, #564]	@ (80037f8 <HAL_RCC_OscConfig+0x27c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d05b      	beq.n	8003684 <HAL_RCC_OscConfig+0x108>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d157      	bne.n	8003684 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e2d9      	b.n	8003b8c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035e0:	d106      	bne.n	80035f0 <HAL_RCC_OscConfig+0x74>
 80035e2:	4b85      	ldr	r3, [pc, #532]	@ (80037f8 <HAL_RCC_OscConfig+0x27c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a84      	ldr	r2, [pc, #528]	@ (80037f8 <HAL_RCC_OscConfig+0x27c>)
 80035e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035ec:	6013      	str	r3, [r2, #0]
 80035ee:	e01d      	b.n	800362c <HAL_RCC_OscConfig+0xb0>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035f8:	d10c      	bne.n	8003614 <HAL_RCC_OscConfig+0x98>
 80035fa:	4b7f      	ldr	r3, [pc, #508]	@ (80037f8 <HAL_RCC_OscConfig+0x27c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a7e      	ldr	r2, [pc, #504]	@ (80037f8 <HAL_RCC_OscConfig+0x27c>)
 8003600:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003604:	6013      	str	r3, [r2, #0]
 8003606:	4b7c      	ldr	r3, [pc, #496]	@ (80037f8 <HAL_RCC_OscConfig+0x27c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a7b      	ldr	r2, [pc, #492]	@ (80037f8 <HAL_RCC_OscConfig+0x27c>)
 800360c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	e00b      	b.n	800362c <HAL_RCC_OscConfig+0xb0>
 8003614:	4b78      	ldr	r3, [pc, #480]	@ (80037f8 <HAL_RCC_OscConfig+0x27c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a77      	ldr	r2, [pc, #476]	@ (80037f8 <HAL_RCC_OscConfig+0x27c>)
 800361a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800361e:	6013      	str	r3, [r2, #0]
 8003620:	4b75      	ldr	r3, [pc, #468]	@ (80037f8 <HAL_RCC_OscConfig+0x27c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a74      	ldr	r2, [pc, #464]	@ (80037f8 <HAL_RCC_OscConfig+0x27c>)
 8003626:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800362a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d013      	beq.n	800365c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003634:	f7fd ff3a 	bl	80014ac <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800363c:	f7fd ff36 	bl	80014ac <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b64      	cmp	r3, #100	@ 0x64
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e29e      	b.n	8003b8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800364e:	4b6a      	ldr	r3, [pc, #424]	@ (80037f8 <HAL_RCC_OscConfig+0x27c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d0f0      	beq.n	800363c <HAL_RCC_OscConfig+0xc0>
 800365a:	e014      	b.n	8003686 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365c:	f7fd ff26 	bl	80014ac <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003664:	f7fd ff22 	bl	80014ac <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b64      	cmp	r3, #100	@ 0x64
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e28a      	b.n	8003b8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003676:	4b60      	ldr	r3, [pc, #384]	@ (80037f8 <HAL_RCC_OscConfig+0x27c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f0      	bne.n	8003664 <HAL_RCC_OscConfig+0xe8>
 8003682:	e000      	b.n	8003686 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d075      	beq.n	800377e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003692:	4b59      	ldr	r3, [pc, #356]	@ (80037f8 <HAL_RCC_OscConfig+0x27c>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 030c 	and.w	r3, r3, #12
 800369a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800369c:	4b56      	ldr	r3, [pc, #344]	@ (80037f8 <HAL_RCC_OscConfig+0x27c>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f003 0303 	and.w	r3, r3, #3
 80036a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	2b0c      	cmp	r3, #12
 80036aa:	d102      	bne.n	80036b2 <HAL_RCC_OscConfig+0x136>
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d002      	beq.n	80036b8 <HAL_RCC_OscConfig+0x13c>
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	2b04      	cmp	r3, #4
 80036b6:	d11f      	bne.n	80036f8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036b8:	4b4f      	ldr	r3, [pc, #316]	@ (80037f8 <HAL_RCC_OscConfig+0x27c>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d005      	beq.n	80036d0 <HAL_RCC_OscConfig+0x154>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e25d      	b.n	8003b8c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d0:	4b49      	ldr	r3, [pc, #292]	@ (80037f8 <HAL_RCC_OscConfig+0x27c>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	061b      	lsls	r3, r3, #24
 80036de:	4946      	ldr	r1, [pc, #280]	@ (80037f8 <HAL_RCC_OscConfig+0x27c>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80036e4:	4b45      	ldr	r3, [pc, #276]	@ (80037fc <HAL_RCC_OscConfig+0x280>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7fd fe93 	bl	8001414 <HAL_InitTick>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d043      	beq.n	800377c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e249      	b.n	8003b8c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d023      	beq.n	8003748 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003700:	4b3d      	ldr	r3, [pc, #244]	@ (80037f8 <HAL_RCC_OscConfig+0x27c>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a3c      	ldr	r2, [pc, #240]	@ (80037f8 <HAL_RCC_OscConfig+0x27c>)
 8003706:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800370a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370c:	f7fd fece 	bl	80014ac <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003714:	f7fd feca 	bl	80014ac <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e232      	b.n	8003b8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003726:	4b34      	ldr	r3, [pc, #208]	@ (80037f8 <HAL_RCC_OscConfig+0x27c>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0f0      	beq.n	8003714 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003732:	4b31      	ldr	r3, [pc, #196]	@ (80037f8 <HAL_RCC_OscConfig+0x27c>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	061b      	lsls	r3, r3, #24
 8003740:	492d      	ldr	r1, [pc, #180]	@ (80037f8 <HAL_RCC_OscConfig+0x27c>)
 8003742:	4313      	orrs	r3, r2
 8003744:	604b      	str	r3, [r1, #4]
 8003746:	e01a      	b.n	800377e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003748:	4b2b      	ldr	r3, [pc, #172]	@ (80037f8 <HAL_RCC_OscConfig+0x27c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a2a      	ldr	r2, [pc, #168]	@ (80037f8 <HAL_RCC_OscConfig+0x27c>)
 800374e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003752:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003754:	f7fd feaa 	bl	80014ac <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800375c:	f7fd fea6 	bl	80014ac <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e20e      	b.n	8003b8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800376e:	4b22      	ldr	r3, [pc, #136]	@ (80037f8 <HAL_RCC_OscConfig+0x27c>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1f0      	bne.n	800375c <HAL_RCC_OscConfig+0x1e0>
 800377a:	e000      	b.n	800377e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800377c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b00      	cmp	r3, #0
 8003788:	d041      	beq.n	800380e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d01c      	beq.n	80037cc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003792:	4b19      	ldr	r3, [pc, #100]	@ (80037f8 <HAL_RCC_OscConfig+0x27c>)
 8003794:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003798:	4a17      	ldr	r2, [pc, #92]	@ (80037f8 <HAL_RCC_OscConfig+0x27c>)
 800379a:	f043 0301 	orr.w	r3, r3, #1
 800379e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a2:	f7fd fe83 	bl	80014ac <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037a8:	e008      	b.n	80037bc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037aa:	f7fd fe7f 	bl	80014ac <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e1e7      	b.n	8003b8c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037bc:	4b0e      	ldr	r3, [pc, #56]	@ (80037f8 <HAL_RCC_OscConfig+0x27c>)
 80037be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d0ef      	beq.n	80037aa <HAL_RCC_OscConfig+0x22e>
 80037ca:	e020      	b.n	800380e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037cc:	4b0a      	ldr	r3, [pc, #40]	@ (80037f8 <HAL_RCC_OscConfig+0x27c>)
 80037ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037d2:	4a09      	ldr	r2, [pc, #36]	@ (80037f8 <HAL_RCC_OscConfig+0x27c>)
 80037d4:	f023 0301 	bic.w	r3, r3, #1
 80037d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037dc:	f7fd fe66 	bl	80014ac <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037e2:	e00d      	b.n	8003800 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037e4:	f7fd fe62 	bl	80014ac <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d906      	bls.n	8003800 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e1ca      	b.n	8003b8c <HAL_RCC_OscConfig+0x610>
 80037f6:	bf00      	nop
 80037f8:	40021000 	.word	0x40021000
 80037fc:	20000174 	.word	0x20000174
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003800:	4b8c      	ldr	r3, [pc, #560]	@ (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 8003802:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1ea      	bne.n	80037e4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0304 	and.w	r3, r3, #4
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 80a6 	beq.w	8003968 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800381c:	2300      	movs	r3, #0
 800381e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003820:	4b84      	ldr	r3, [pc, #528]	@ (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 8003822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003824:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <HAL_RCC_OscConfig+0x2b4>
 800382c:	2301      	movs	r3, #1
 800382e:	e000      	b.n	8003832 <HAL_RCC_OscConfig+0x2b6>
 8003830:	2300      	movs	r3, #0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00d      	beq.n	8003852 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003836:	4b7f      	ldr	r3, [pc, #508]	@ (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 8003838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800383a:	4a7e      	ldr	r2, [pc, #504]	@ (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 800383c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003840:	6593      	str	r3, [r2, #88]	@ 0x58
 8003842:	4b7c      	ldr	r3, [pc, #496]	@ (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 8003844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800384e:	2301      	movs	r3, #1
 8003850:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003852:	4b79      	ldr	r3, [pc, #484]	@ (8003a38 <HAL_RCC_OscConfig+0x4bc>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800385a:	2b00      	cmp	r3, #0
 800385c:	d118      	bne.n	8003890 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800385e:	4b76      	ldr	r3, [pc, #472]	@ (8003a38 <HAL_RCC_OscConfig+0x4bc>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a75      	ldr	r2, [pc, #468]	@ (8003a38 <HAL_RCC_OscConfig+0x4bc>)
 8003864:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003868:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800386a:	f7fd fe1f 	bl	80014ac <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003872:	f7fd fe1b 	bl	80014ac <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e183      	b.n	8003b8c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003884:	4b6c      	ldr	r3, [pc, #432]	@ (8003a38 <HAL_RCC_OscConfig+0x4bc>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0f0      	beq.n	8003872 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d108      	bne.n	80038aa <HAL_RCC_OscConfig+0x32e>
 8003898:	4b66      	ldr	r3, [pc, #408]	@ (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 800389a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800389e:	4a65      	ldr	r2, [pc, #404]	@ (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 80038a0:	f043 0301 	orr.w	r3, r3, #1
 80038a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038a8:	e024      	b.n	80038f4 <HAL_RCC_OscConfig+0x378>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	2b05      	cmp	r3, #5
 80038b0:	d110      	bne.n	80038d4 <HAL_RCC_OscConfig+0x358>
 80038b2:	4b60      	ldr	r3, [pc, #384]	@ (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 80038b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038b8:	4a5e      	ldr	r2, [pc, #376]	@ (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 80038ba:	f043 0304 	orr.w	r3, r3, #4
 80038be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038c2:	4b5c      	ldr	r3, [pc, #368]	@ (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 80038c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038c8:	4a5a      	ldr	r2, [pc, #360]	@ (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 80038ca:	f043 0301 	orr.w	r3, r3, #1
 80038ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038d2:	e00f      	b.n	80038f4 <HAL_RCC_OscConfig+0x378>
 80038d4:	4b57      	ldr	r3, [pc, #348]	@ (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 80038d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038da:	4a56      	ldr	r2, [pc, #344]	@ (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 80038dc:	f023 0301 	bic.w	r3, r3, #1
 80038e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038e4:	4b53      	ldr	r3, [pc, #332]	@ (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 80038e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ea:	4a52      	ldr	r2, [pc, #328]	@ (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 80038ec:	f023 0304 	bic.w	r3, r3, #4
 80038f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d016      	beq.n	800392a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038fc:	f7fd fdd6 	bl	80014ac <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003902:	e00a      	b.n	800391a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003904:	f7fd fdd2 	bl	80014ac <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003912:	4293      	cmp	r3, r2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e138      	b.n	8003b8c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800391a:	4b46      	ldr	r3, [pc, #280]	@ (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 800391c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0ed      	beq.n	8003904 <HAL_RCC_OscConfig+0x388>
 8003928:	e015      	b.n	8003956 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800392a:	f7fd fdbf 	bl	80014ac <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003930:	e00a      	b.n	8003948 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003932:	f7fd fdbb 	bl	80014ac <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003940:	4293      	cmp	r3, r2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e121      	b.n	8003b8c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003948:	4b3a      	ldr	r3, [pc, #232]	@ (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 800394a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1ed      	bne.n	8003932 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003956:	7ffb      	ldrb	r3, [r7, #31]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d105      	bne.n	8003968 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800395c:	4b35      	ldr	r3, [pc, #212]	@ (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 800395e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003960:	4a34      	ldr	r2, [pc, #208]	@ (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 8003962:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003966:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0320 	and.w	r3, r3, #32
 8003970:	2b00      	cmp	r3, #0
 8003972:	d03c      	beq.n	80039ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d01c      	beq.n	80039b6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800397c:	4b2d      	ldr	r3, [pc, #180]	@ (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 800397e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003982:	4a2c      	ldr	r2, [pc, #176]	@ (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 8003984:	f043 0301 	orr.w	r3, r3, #1
 8003988:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398c:	f7fd fd8e 	bl	80014ac <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003994:	f7fd fd8a 	bl	80014ac <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e0f2      	b.n	8003b8c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039a6:	4b23      	ldr	r3, [pc, #140]	@ (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 80039a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0ef      	beq.n	8003994 <HAL_RCC_OscConfig+0x418>
 80039b4:	e01b      	b.n	80039ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80039b6:	4b1f      	ldr	r3, [pc, #124]	@ (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 80039b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80039bc:	4a1d      	ldr	r2, [pc, #116]	@ (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 80039be:	f023 0301 	bic.w	r3, r3, #1
 80039c2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c6:	f7fd fd71 	bl	80014ac <HAL_GetTick>
 80039ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039cc:	e008      	b.n	80039e0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039ce:	f7fd fd6d 	bl	80014ac <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e0d5      	b.n	8003b8c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039e0:	4b14      	ldr	r3, [pc, #80]	@ (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 80039e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1ef      	bne.n	80039ce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f000 80c9 	beq.w	8003b8a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f003 030c 	and.w	r3, r3, #12
 8003a00:	2b0c      	cmp	r3, #12
 8003a02:	f000 8083 	beq.w	8003b0c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d15e      	bne.n	8003acc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a0e:	4b09      	ldr	r3, [pc, #36]	@ (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a08      	ldr	r2, [pc, #32]	@ (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 8003a14:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1a:	f7fd fd47 	bl	80014ac <HAL_GetTick>
 8003a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a20:	e00c      	b.n	8003a3c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a22:	f7fd fd43 	bl	80014ac <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d905      	bls.n	8003a3c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e0ab      	b.n	8003b8c <HAL_RCC_OscConfig+0x610>
 8003a34:	40021000 	.word	0x40021000
 8003a38:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a3c:	4b55      	ldr	r3, [pc, #340]	@ (8003b94 <HAL_RCC_OscConfig+0x618>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1ec      	bne.n	8003a22 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a48:	4b52      	ldr	r3, [pc, #328]	@ (8003b94 <HAL_RCC_OscConfig+0x618>)
 8003a4a:	68da      	ldr	r2, [r3, #12]
 8003a4c:	4b52      	ldr	r3, [pc, #328]	@ (8003b98 <HAL_RCC_OscConfig+0x61c>)
 8003a4e:	4013      	ands	r3, r2
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6a11      	ldr	r1, [r2, #32]
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a58:	3a01      	subs	r2, #1
 8003a5a:	0112      	lsls	r2, r2, #4
 8003a5c:	4311      	orrs	r1, r2
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003a62:	0212      	lsls	r2, r2, #8
 8003a64:	4311      	orrs	r1, r2
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003a6a:	0852      	lsrs	r2, r2, #1
 8003a6c:	3a01      	subs	r2, #1
 8003a6e:	0552      	lsls	r2, r2, #21
 8003a70:	4311      	orrs	r1, r2
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003a76:	0852      	lsrs	r2, r2, #1
 8003a78:	3a01      	subs	r2, #1
 8003a7a:	0652      	lsls	r2, r2, #25
 8003a7c:	4311      	orrs	r1, r2
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003a82:	06d2      	lsls	r2, r2, #27
 8003a84:	430a      	orrs	r2, r1
 8003a86:	4943      	ldr	r1, [pc, #268]	@ (8003b94 <HAL_RCC_OscConfig+0x618>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a8c:	4b41      	ldr	r3, [pc, #260]	@ (8003b94 <HAL_RCC_OscConfig+0x618>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a40      	ldr	r2, [pc, #256]	@ (8003b94 <HAL_RCC_OscConfig+0x618>)
 8003a92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a96:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a98:	4b3e      	ldr	r3, [pc, #248]	@ (8003b94 <HAL_RCC_OscConfig+0x618>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	4a3d      	ldr	r2, [pc, #244]	@ (8003b94 <HAL_RCC_OscConfig+0x618>)
 8003a9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003aa2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa4:	f7fd fd02 	bl	80014ac <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aac:	f7fd fcfe 	bl	80014ac <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e066      	b.n	8003b8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003abe:	4b35      	ldr	r3, [pc, #212]	@ (8003b94 <HAL_RCC_OscConfig+0x618>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0f0      	beq.n	8003aac <HAL_RCC_OscConfig+0x530>
 8003aca:	e05e      	b.n	8003b8a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003acc:	4b31      	ldr	r3, [pc, #196]	@ (8003b94 <HAL_RCC_OscConfig+0x618>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a30      	ldr	r2, [pc, #192]	@ (8003b94 <HAL_RCC_OscConfig+0x618>)
 8003ad2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ad6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad8:	f7fd fce8 	bl	80014ac <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ae0:	f7fd fce4 	bl	80014ac <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e04c      	b.n	8003b8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003af2:	4b28      	ldr	r3, [pc, #160]	@ (8003b94 <HAL_RCC_OscConfig+0x618>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1f0      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003afe:	4b25      	ldr	r3, [pc, #148]	@ (8003b94 <HAL_RCC_OscConfig+0x618>)
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	4924      	ldr	r1, [pc, #144]	@ (8003b94 <HAL_RCC_OscConfig+0x618>)
 8003b04:	4b25      	ldr	r3, [pc, #148]	@ (8003b9c <HAL_RCC_OscConfig+0x620>)
 8003b06:	4013      	ands	r3, r2
 8003b08:	60cb      	str	r3, [r1, #12]
 8003b0a:	e03e      	b.n	8003b8a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d101      	bne.n	8003b18 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e039      	b.n	8003b8c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003b18:	4b1e      	ldr	r3, [pc, #120]	@ (8003b94 <HAL_RCC_OscConfig+0x618>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f003 0203 	and.w	r2, r3, #3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d12c      	bne.n	8003b86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b36:	3b01      	subs	r3, #1
 8003b38:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d123      	bne.n	8003b86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b48:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d11b      	bne.n	8003b86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b58:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d113      	bne.n	8003b86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b68:	085b      	lsrs	r3, r3, #1
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d109      	bne.n	8003b86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b7c:	085b      	lsrs	r3, r3, #1
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d001      	beq.n	8003b8a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e000      	b.n	8003b8c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3720      	adds	r7, #32
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	40021000 	.word	0x40021000
 8003b98:	019f800c 	.word	0x019f800c
 8003b9c:	feeefffc 	.word	0xfeeefffc

08003ba0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003baa:	2300      	movs	r3, #0
 8003bac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d101      	bne.n	8003bb8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e11e      	b.n	8003df6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bb8:	4b91      	ldr	r3, [pc, #580]	@ (8003e00 <HAL_RCC_ClockConfig+0x260>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 030f 	and.w	r3, r3, #15
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d910      	bls.n	8003be8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bc6:	4b8e      	ldr	r3, [pc, #568]	@ (8003e00 <HAL_RCC_ClockConfig+0x260>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f023 020f 	bic.w	r2, r3, #15
 8003bce:	498c      	ldr	r1, [pc, #560]	@ (8003e00 <HAL_RCC_ClockConfig+0x260>)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bd6:	4b8a      	ldr	r3, [pc, #552]	@ (8003e00 <HAL_RCC_ClockConfig+0x260>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 030f 	and.w	r3, r3, #15
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d001      	beq.n	8003be8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e106      	b.n	8003df6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d073      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	2b03      	cmp	r3, #3
 8003bfa:	d129      	bne.n	8003c50 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bfc:	4b81      	ldr	r3, [pc, #516]	@ (8003e04 <HAL_RCC_ClockConfig+0x264>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d101      	bne.n	8003c0c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e0f4      	b.n	8003df6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003c0c:	f000 f966 	bl	8003edc <RCC_GetSysClockFreqFromPLLSource>
 8003c10:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	4a7c      	ldr	r2, [pc, #496]	@ (8003e08 <HAL_RCC_ClockConfig+0x268>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d93f      	bls.n	8003c9a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003c1a:	4b7a      	ldr	r3, [pc, #488]	@ (8003e04 <HAL_RCC_ClockConfig+0x264>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d009      	beq.n	8003c3a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d033      	beq.n	8003c9a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d12f      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c3a:	4b72      	ldr	r3, [pc, #456]	@ (8003e04 <HAL_RCC_ClockConfig+0x264>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c42:	4a70      	ldr	r2, [pc, #448]	@ (8003e04 <HAL_RCC_ClockConfig+0x264>)
 8003c44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c48:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003c4a:	2380      	movs	r3, #128	@ 0x80
 8003c4c:	617b      	str	r3, [r7, #20]
 8003c4e:	e024      	b.n	8003c9a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d107      	bne.n	8003c68 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c58:	4b6a      	ldr	r3, [pc, #424]	@ (8003e04 <HAL_RCC_ClockConfig+0x264>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d109      	bne.n	8003c78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e0c6      	b.n	8003df6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c68:	4b66      	ldr	r3, [pc, #408]	@ (8003e04 <HAL_RCC_ClockConfig+0x264>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d101      	bne.n	8003c78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e0be      	b.n	8003df6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003c78:	f000 f8ce 	bl	8003e18 <HAL_RCC_GetSysClockFreq>
 8003c7c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	4a61      	ldr	r2, [pc, #388]	@ (8003e08 <HAL_RCC_ClockConfig+0x268>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d909      	bls.n	8003c9a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c86:	4b5f      	ldr	r3, [pc, #380]	@ (8003e04 <HAL_RCC_ClockConfig+0x264>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c8e:	4a5d      	ldr	r2, [pc, #372]	@ (8003e04 <HAL_RCC_ClockConfig+0x264>)
 8003c90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c94:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003c96:	2380      	movs	r3, #128	@ 0x80
 8003c98:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c9a:	4b5a      	ldr	r3, [pc, #360]	@ (8003e04 <HAL_RCC_ClockConfig+0x264>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f023 0203 	bic.w	r2, r3, #3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	4957      	ldr	r1, [pc, #348]	@ (8003e04 <HAL_RCC_ClockConfig+0x264>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cac:	f7fd fbfe 	bl	80014ac <HAL_GetTick>
 8003cb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cb2:	e00a      	b.n	8003cca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cb4:	f7fd fbfa 	bl	80014ac <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e095      	b.n	8003df6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cca:	4b4e      	ldr	r3, [pc, #312]	@ (8003e04 <HAL_RCC_ClockConfig+0x264>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 020c 	and.w	r2, r3, #12
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d1eb      	bne.n	8003cb4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d023      	beq.n	8003d30 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0304 	and.w	r3, r3, #4
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d005      	beq.n	8003d00 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cf4:	4b43      	ldr	r3, [pc, #268]	@ (8003e04 <HAL_RCC_ClockConfig+0x264>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	4a42      	ldr	r2, [pc, #264]	@ (8003e04 <HAL_RCC_ClockConfig+0x264>)
 8003cfa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003cfe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0308 	and.w	r3, r3, #8
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d007      	beq.n	8003d1c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003d0c:	4b3d      	ldr	r3, [pc, #244]	@ (8003e04 <HAL_RCC_ClockConfig+0x264>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003d14:	4a3b      	ldr	r2, [pc, #236]	@ (8003e04 <HAL_RCC_ClockConfig+0x264>)
 8003d16:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003d1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d1c:	4b39      	ldr	r3, [pc, #228]	@ (8003e04 <HAL_RCC_ClockConfig+0x264>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	4936      	ldr	r1, [pc, #216]	@ (8003e04 <HAL_RCC_ClockConfig+0x264>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	608b      	str	r3, [r1, #8]
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	2b80      	cmp	r3, #128	@ 0x80
 8003d34:	d105      	bne.n	8003d42 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003d36:	4b33      	ldr	r3, [pc, #204]	@ (8003e04 <HAL_RCC_ClockConfig+0x264>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	4a32      	ldr	r2, [pc, #200]	@ (8003e04 <HAL_RCC_ClockConfig+0x264>)
 8003d3c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d40:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d42:	4b2f      	ldr	r3, [pc, #188]	@ (8003e00 <HAL_RCC_ClockConfig+0x260>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 030f 	and.w	r3, r3, #15
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d21d      	bcs.n	8003d8c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d50:	4b2b      	ldr	r3, [pc, #172]	@ (8003e00 <HAL_RCC_ClockConfig+0x260>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f023 020f 	bic.w	r2, r3, #15
 8003d58:	4929      	ldr	r1, [pc, #164]	@ (8003e00 <HAL_RCC_ClockConfig+0x260>)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003d60:	f7fd fba4 	bl	80014ac <HAL_GetTick>
 8003d64:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d66:	e00a      	b.n	8003d7e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d68:	f7fd fba0 	bl	80014ac <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e03b      	b.n	8003df6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d7e:	4b20      	ldr	r3, [pc, #128]	@ (8003e00 <HAL_RCC_ClockConfig+0x260>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 030f 	and.w	r3, r3, #15
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d1ed      	bne.n	8003d68 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0304 	and.w	r3, r3, #4
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d008      	beq.n	8003daa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d98:	4b1a      	ldr	r3, [pc, #104]	@ (8003e04 <HAL_RCC_ClockConfig+0x264>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	4917      	ldr	r1, [pc, #92]	@ (8003e04 <HAL_RCC_ClockConfig+0x264>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0308 	and.w	r3, r3, #8
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d009      	beq.n	8003dca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003db6:	4b13      	ldr	r3, [pc, #76]	@ (8003e04 <HAL_RCC_ClockConfig+0x264>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	490f      	ldr	r1, [pc, #60]	@ (8003e04 <HAL_RCC_ClockConfig+0x264>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003dca:	f000 f825 	bl	8003e18 <HAL_RCC_GetSysClockFreq>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8003e04 <HAL_RCC_ClockConfig+0x264>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	091b      	lsrs	r3, r3, #4
 8003dd6:	f003 030f 	and.w	r3, r3, #15
 8003dda:	490c      	ldr	r1, [pc, #48]	@ (8003e0c <HAL_RCC_ClockConfig+0x26c>)
 8003ddc:	5ccb      	ldrb	r3, [r1, r3]
 8003dde:	f003 031f 	and.w	r3, r3, #31
 8003de2:	fa22 f303 	lsr.w	r3, r2, r3
 8003de6:	4a0a      	ldr	r2, [pc, #40]	@ (8003e10 <HAL_RCC_ClockConfig+0x270>)
 8003de8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003dea:	4b0a      	ldr	r3, [pc, #40]	@ (8003e14 <HAL_RCC_ClockConfig+0x274>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fd fb10 	bl	8001414 <HAL_InitTick>
 8003df4:	4603      	mov	r3, r0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3718      	adds	r7, #24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	40022000 	.word	0x40022000
 8003e04:	40021000 	.word	0x40021000
 8003e08:	04c4b400 	.word	0x04c4b400
 8003e0c:	080064fc 	.word	0x080064fc
 8003e10:	20000170 	.word	0x20000170
 8003e14:	20000174 	.word	0x20000174

08003e18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b087      	sub	sp, #28
 8003e1c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003e1e:	4b2c      	ldr	r3, [pc, #176]	@ (8003ed0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 030c 	and.w	r3, r3, #12
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d102      	bne.n	8003e30 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e2a:	4b2a      	ldr	r3, [pc, #168]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e2c:	613b      	str	r3, [r7, #16]
 8003e2e:	e047      	b.n	8003ec0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003e30:	4b27      	ldr	r3, [pc, #156]	@ (8003ed0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 030c 	and.w	r3, r3, #12
 8003e38:	2b08      	cmp	r3, #8
 8003e3a:	d102      	bne.n	8003e42 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e3c:	4b26      	ldr	r3, [pc, #152]	@ (8003ed8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e3e:	613b      	str	r3, [r7, #16]
 8003e40:	e03e      	b.n	8003ec0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003e42:	4b23      	ldr	r3, [pc, #140]	@ (8003ed0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 030c 	and.w	r3, r3, #12
 8003e4a:	2b0c      	cmp	r3, #12
 8003e4c:	d136      	bne.n	8003ebc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e4e:	4b20      	ldr	r3, [pc, #128]	@ (8003ed0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f003 0303 	and.w	r3, r3, #3
 8003e56:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e58:	4b1d      	ldr	r3, [pc, #116]	@ (8003ed0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	091b      	lsrs	r3, r3, #4
 8003e5e:	f003 030f 	and.w	r3, r3, #15
 8003e62:	3301      	adds	r3, #1
 8003e64:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2b03      	cmp	r3, #3
 8003e6a:	d10c      	bne.n	8003e86 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e6c:	4a1a      	ldr	r2, [pc, #104]	@ (8003ed8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e74:	4a16      	ldr	r2, [pc, #88]	@ (8003ed0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e76:	68d2      	ldr	r2, [r2, #12]
 8003e78:	0a12      	lsrs	r2, r2, #8
 8003e7a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e7e:	fb02 f303 	mul.w	r3, r2, r3
 8003e82:	617b      	str	r3, [r7, #20]
      break;
 8003e84:	e00c      	b.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e86:	4a13      	ldr	r2, [pc, #76]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e8e:	4a10      	ldr	r2, [pc, #64]	@ (8003ed0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e90:	68d2      	ldr	r2, [r2, #12]
 8003e92:	0a12      	lsrs	r2, r2, #8
 8003e94:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e98:	fb02 f303 	mul.w	r3, r2, r3
 8003e9c:	617b      	str	r3, [r7, #20]
      break;
 8003e9e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ed0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	0e5b      	lsrs	r3, r3, #25
 8003ea6:	f003 0303 	and.w	r3, r3, #3
 8003eaa:	3301      	adds	r3, #1
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb8:	613b      	str	r3, [r7, #16]
 8003eba:	e001      	b.n	8003ec0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003ec0:	693b      	ldr	r3, [r7, #16]
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	371c      	adds	r7, #28
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	00f42400 	.word	0x00f42400
 8003ed8:	016e3600 	.word	0x016e3600

08003edc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b087      	sub	sp, #28
 8003ee0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ee2:	4b1e      	ldr	r3, [pc, #120]	@ (8003f5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	f003 0303 	and.w	r3, r3, #3
 8003eea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003eec:	4b1b      	ldr	r3, [pc, #108]	@ (8003f5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	091b      	lsrs	r3, r3, #4
 8003ef2:	f003 030f 	and.w	r3, r3, #15
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	2b03      	cmp	r3, #3
 8003efe:	d10c      	bne.n	8003f1a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f00:	4a17      	ldr	r2, [pc, #92]	@ (8003f60 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f08:	4a14      	ldr	r2, [pc, #80]	@ (8003f5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f0a:	68d2      	ldr	r2, [r2, #12]
 8003f0c:	0a12      	lsrs	r2, r2, #8
 8003f0e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003f12:	fb02 f303 	mul.w	r3, r2, r3
 8003f16:	617b      	str	r3, [r7, #20]
    break;
 8003f18:	e00c      	b.n	8003f34 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f1a:	4a12      	ldr	r2, [pc, #72]	@ (8003f64 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f22:	4a0e      	ldr	r2, [pc, #56]	@ (8003f5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f24:	68d2      	ldr	r2, [r2, #12]
 8003f26:	0a12      	lsrs	r2, r2, #8
 8003f28:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003f2c:	fb02 f303 	mul.w	r3, r2, r3
 8003f30:	617b      	str	r3, [r7, #20]
    break;
 8003f32:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f34:	4b09      	ldr	r3, [pc, #36]	@ (8003f5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	0e5b      	lsrs	r3, r3, #25
 8003f3a:	f003 0303 	and.w	r3, r3, #3
 8003f3e:	3301      	adds	r3, #1
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f4c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003f4e:	687b      	ldr	r3, [r7, #4]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	371c      	adds	r7, #28
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	40021000 	.word	0x40021000
 8003f60:	016e3600 	.word	0x016e3600
 8003f64:	00f42400 	.word	0x00f42400

08003f68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f70:	2300      	movs	r3, #0
 8003f72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f74:	2300      	movs	r3, #0
 8003f76:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 8098 	beq.w	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f86:	2300      	movs	r3, #0
 8003f88:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f8a:	4b43      	ldr	r3, [pc, #268]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10d      	bne.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f96:	4b40      	ldr	r3, [pc, #256]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f9a:	4a3f      	ldr	r2, [pc, #252]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fa0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fa2:	4b3d      	ldr	r3, [pc, #244]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003faa:	60bb      	str	r3, [r7, #8]
 8003fac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fb2:	4b3a      	ldr	r3, [pc, #232]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a39      	ldr	r2, [pc, #228]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003fb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fbc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fbe:	f7fd fa75 	bl	80014ac <HAL_GetTick>
 8003fc2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fc4:	e009      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc6:	f7fd fa71 	bl	80014ac <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d902      	bls.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	74fb      	strb	r3, [r7, #19]
        break;
 8003fd8:	e005      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fda:	4b30      	ldr	r3, [pc, #192]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0ef      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003fe6:	7cfb      	ldrb	r3, [r7, #19]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d159      	bne.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fec:	4b2a      	ldr	r3, [pc, #168]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ff2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ff6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d01e      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	429a      	cmp	r2, r3
 8004006:	d019      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004008:	4b23      	ldr	r3, [pc, #140]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800400a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800400e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004012:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004014:	4b20      	ldr	r3, [pc, #128]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800401a:	4a1f      	ldr	r2, [pc, #124]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800401c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004020:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004024:	4b1c      	ldr	r3, [pc, #112]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800402a:	4a1b      	ldr	r2, [pc, #108]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800402c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004030:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004034:	4a18      	ldr	r2, [pc, #96]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	d016      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004046:	f7fd fa31 	bl	80014ac <HAL_GetTick>
 800404a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800404c:	e00b      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800404e:	f7fd fa2d 	bl	80014ac <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	f241 3288 	movw	r2, #5000	@ 0x1388
 800405c:	4293      	cmp	r3, r2
 800405e:	d902      	bls.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	74fb      	strb	r3, [r7, #19]
            break;
 8004064:	e006      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004066:	4b0c      	ldr	r3, [pc, #48]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d0ec      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004074:	7cfb      	ldrb	r3, [r7, #19]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10b      	bne.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800407a:	4b07      	ldr	r3, [pc, #28]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800407c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004080:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004088:	4903      	ldr	r1, [pc, #12]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800408a:	4313      	orrs	r3, r2
 800408c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004090:	e008      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004092:	7cfb      	ldrb	r3, [r7, #19]
 8004094:	74bb      	strb	r3, [r7, #18]
 8004096:	e005      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004098:	40021000 	.word	0x40021000
 800409c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a0:	7cfb      	ldrb	r3, [r7, #19]
 80040a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040a4:	7c7b      	ldrb	r3, [r7, #17]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d105      	bne.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040aa:	4ba7      	ldr	r3, [pc, #668]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ae:	4aa6      	ldr	r2, [pc, #664]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040b4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00a      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040c2:	4ba1      	ldr	r3, [pc, #644]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c8:	f023 0203 	bic.w	r2, r3, #3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	499d      	ldr	r1, [pc, #628]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00a      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040e4:	4b98      	ldr	r3, [pc, #608]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ea:	f023 020c 	bic.w	r2, r3, #12
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	4995      	ldr	r1, [pc, #596]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0304 	and.w	r3, r3, #4
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00a      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004106:	4b90      	ldr	r3, [pc, #576]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800410c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	498c      	ldr	r1, [pc, #560]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004116:	4313      	orrs	r3, r2
 8004118:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0308 	and.w	r3, r3, #8
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00a      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004128:	4b87      	ldr	r3, [pc, #540]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800412a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800412e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	4984      	ldr	r1, [pc, #528]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004138:	4313      	orrs	r3, r2
 800413a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0310 	and.w	r3, r3, #16
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00a      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800414a:	4b7f      	ldr	r3, [pc, #508]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800414c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004150:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	497b      	ldr	r1, [pc, #492]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800415a:	4313      	orrs	r3, r2
 800415c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0320 	and.w	r3, r3, #32
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00a      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800416c:	4b76      	ldr	r3, [pc, #472]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800416e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004172:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	4973      	ldr	r1, [pc, #460]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800417c:	4313      	orrs	r3, r2
 800417e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00a      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800418e:	4b6e      	ldr	r3, [pc, #440]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004194:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	69db      	ldr	r3, [r3, #28]
 800419c:	496a      	ldr	r1, [pc, #424]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041b0:	4b65      	ldr	r3, [pc, #404]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041b6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	4962      	ldr	r1, [pc, #392]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041d2:	4b5d      	ldr	r3, [pc, #372]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e0:	4959      	ldr	r1, [pc, #356]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00a      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041f4:	4b54      	ldr	r3, [pc, #336]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041fa:	f023 0203 	bic.w	r2, r3, #3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004202:	4951      	ldr	r1, [pc, #324]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004204:	4313      	orrs	r3, r2
 8004206:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00a      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004216:	4b4c      	ldr	r3, [pc, #304]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800421c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004224:	4948      	ldr	r1, [pc, #288]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004226:	4313      	orrs	r3, r2
 8004228:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004234:	2b00      	cmp	r3, #0
 8004236:	d015      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004238:	4b43      	ldr	r3, [pc, #268]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800423a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800423e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004246:	4940      	ldr	r1, [pc, #256]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004248:	4313      	orrs	r3, r2
 800424a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004252:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004256:	d105      	bne.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004258:	4b3b      	ldr	r3, [pc, #236]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	4a3a      	ldr	r2, [pc, #232]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800425e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004262:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800426c:	2b00      	cmp	r3, #0
 800426e:	d015      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004270:	4b35      	ldr	r3, [pc, #212]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004276:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800427e:	4932      	ldr	r1, [pc, #200]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004280:	4313      	orrs	r3, r2
 8004282:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800428a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800428e:	d105      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004290:	4b2d      	ldr	r3, [pc, #180]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	4a2c      	ldr	r2, [pc, #176]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004296:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800429a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d015      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80042a8:	4b27      	ldr	r3, [pc, #156]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ae:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042b6:	4924      	ldr	r1, [pc, #144]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042c6:	d105      	bne.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042c8:	4b1f      	ldr	r3, [pc, #124]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	4a1e      	ldr	r2, [pc, #120]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042d2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d015      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042e0:	4b19      	ldr	r3, [pc, #100]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ee:	4916      	ldr	r1, [pc, #88]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042fe:	d105      	bne.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004300:	4b11      	ldr	r3, [pc, #68]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	4a10      	ldr	r2, [pc, #64]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004306:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800430a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d019      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004318:	4b0b      	ldr	r3, [pc, #44]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800431a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800431e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004326:	4908      	ldr	r1, [pc, #32]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004328:	4313      	orrs	r3, r2
 800432a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004332:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004336:	d109      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004338:	4b03      	ldr	r3, [pc, #12]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	4a02      	ldr	r2, [pc, #8]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800433e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004342:	60d3      	str	r3, [r2, #12]
 8004344:	e002      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004346:	bf00      	nop
 8004348:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d015      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004358:	4b29      	ldr	r3, [pc, #164]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800435a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800435e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004366:	4926      	ldr	r1, [pc, #152]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004368:	4313      	orrs	r3, r2
 800436a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004372:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004376:	d105      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004378:	4b21      	ldr	r3, [pc, #132]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	4a20      	ldr	r2, [pc, #128]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800437e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004382:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d015      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004390:	4b1b      	ldr	r3, [pc, #108]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004396:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800439e:	4918      	ldr	r1, [pc, #96]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043ae:	d105      	bne.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80043b0:	4b13      	ldr	r3, [pc, #76]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	4a12      	ldr	r2, [pc, #72]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043ba:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d015      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80043c8:	4b0d      	ldr	r3, [pc, #52]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043d6:	490a      	ldr	r1, [pc, #40]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80043e6:	d105      	bne.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043e8:	4b05      	ldr	r3, [pc, #20]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	4a04      	ldr	r2, [pc, #16]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80043f2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80043f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3718      	adds	r7, #24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	40021000 	.word	0x40021000

08004404 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8004404:	b480      	push	{r7}
 8004406:	b08b      	sub	sp, #44	@ 0x2c
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	fa93 f3a3 	rbit	r3, r3
 800441e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 800442a:	2320      	movs	r3, #32
 800442c:	e003      	b.n	8004436 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	fab3 f383 	clz	r3, r3
 8004434:	b2db      	uxtb	r3, r3
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	2103      	movs	r1, #3
 800443a:	fa01 f303 	lsl.w	r3, r1, r3
 800443e:	43db      	mvns	r3, r3
 8004440:	401a      	ands	r2, r3
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004446:	6a3b      	ldr	r3, [r7, #32]
 8004448:	fa93 f3a3 	rbit	r3, r3
 800444c:	61fb      	str	r3, [r7, #28]
  return result;
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004454:	2b00      	cmp	r3, #0
 8004456:	d101      	bne.n	800445c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8004458:	2320      	movs	r3, #32
 800445a:	e003      	b.n	8004464 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800445c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445e:	fab3 f383 	clz	r3, r3
 8004462:	b2db      	uxtb	r3, r3
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	6879      	ldr	r1, [r7, #4]
 8004468:	fa01 f303 	lsl.w	r3, r1, r3
 800446c:	431a      	orrs	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	601a      	str	r2, [r3, #0]
}
 8004472:	bf00      	nop
 8004474:	372c      	adds	r7, #44	@ 0x2c
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr

0800447e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800447e:	b480      	push	{r7}
 8004480:	b085      	sub	sp, #20
 8004482:	af00      	add	r7, sp, #0
 8004484:	60f8      	str	r0, [r7, #12]
 8004486:	60b9      	str	r1, [r7, #8]
 8004488:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	43db      	mvns	r3, r3
 8004492:	401a      	ands	r2, r3
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	6879      	ldr	r1, [r7, #4]
 8004498:	fb01 f303 	mul.w	r3, r1, r3
 800449c:	431a      	orrs	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	605a      	str	r2, [r3, #4]
}
 80044a2:	bf00      	nop
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr

080044ae <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80044ae:	b480      	push	{r7}
 80044b0:	b08b      	sub	sp, #44	@ 0x2c
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	60f8      	str	r0, [r7, #12]
 80044b6:	60b9      	str	r1, [r7, #8]
 80044b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	689a      	ldr	r2, [r3, #8]
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	fa93 f3a3 	rbit	r3, r3
 80044c8:	613b      	str	r3, [r7, #16]
  return result;
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80044d4:	2320      	movs	r3, #32
 80044d6:	e003      	b.n	80044e0 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	fab3 f383 	clz	r3, r3
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	2103      	movs	r1, #3
 80044e4:	fa01 f303 	lsl.w	r3, r1, r3
 80044e8:	43db      	mvns	r3, r3
 80044ea:	401a      	ands	r2, r3
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f0:	6a3b      	ldr	r3, [r7, #32]
 80044f2:	fa93 f3a3 	rbit	r3, r3
 80044f6:	61fb      	str	r3, [r7, #28]
  return result;
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80044fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8004502:	2320      	movs	r3, #32
 8004504:	e003      	b.n	800450e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8004506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004508:	fab3 f383 	clz	r3, r3
 800450c:	b2db      	uxtb	r3, r3
 800450e:	005b      	lsls	r3, r3, #1
 8004510:	6879      	ldr	r1, [r7, #4]
 8004512:	fa01 f303 	lsl.w	r3, r1, r3
 8004516:	431a      	orrs	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800451c:	bf00      	nop
 800451e:	372c      	adds	r7, #44	@ 0x2c
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8004528:	b480      	push	{r7}
 800452a:	b08b      	sub	sp, #44	@ 0x2c
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	68da      	ldr	r2, [r3, #12]
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	fa93 f3a3 	rbit	r3, r3
 8004542:	613b      	str	r3, [r7, #16]
  return result;
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800454e:	2320      	movs	r3, #32
 8004550:	e003      	b.n	800455a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	fab3 f383 	clz	r3, r3
 8004558:	b2db      	uxtb	r3, r3
 800455a:	005b      	lsls	r3, r3, #1
 800455c:	2103      	movs	r1, #3
 800455e:	fa01 f303 	lsl.w	r3, r1, r3
 8004562:	43db      	mvns	r3, r3
 8004564:	401a      	ands	r2, r3
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800456a:	6a3b      	ldr	r3, [r7, #32]
 800456c:	fa93 f3a3 	rbit	r3, r3
 8004570:	61fb      	str	r3, [r7, #28]
  return result;
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004578:	2b00      	cmp	r3, #0
 800457a:	d101      	bne.n	8004580 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800457c:	2320      	movs	r3, #32
 800457e:	e003      	b.n	8004588 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8004580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004582:	fab3 f383 	clz	r3, r3
 8004586:	b2db      	uxtb	r3, r3
 8004588:	005b      	lsls	r3, r3, #1
 800458a:	6879      	ldr	r1, [r7, #4]
 800458c:	fa01 f303 	lsl.w	r3, r1, r3
 8004590:	431a      	orrs	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	60da      	str	r2, [r3, #12]
}
 8004596:	bf00      	nop
 8004598:	372c      	adds	r7, #44	@ 0x2c
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b08b      	sub	sp, #44	@ 0x2c
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	60f8      	str	r0, [r7, #12]
 80045aa:	60b9      	str	r1, [r7, #8]
 80045ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6a1a      	ldr	r2, [r3, #32]
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	fa93 f3a3 	rbit	r3, r3
 80045bc:	613b      	str	r3, [r7, #16]
  return result;
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d101      	bne.n	80045cc <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80045c8:	2320      	movs	r3, #32
 80045ca:	e003      	b.n	80045d4 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	fab3 f383 	clz	r3, r3
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	210f      	movs	r1, #15
 80045d8:	fa01 f303 	lsl.w	r3, r1, r3
 80045dc:	43db      	mvns	r3, r3
 80045de:	401a      	ands	r2, r3
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e4:	6a3b      	ldr	r3, [r7, #32]
 80045e6:	fa93 f3a3 	rbit	r3, r3
 80045ea:	61fb      	str	r3, [r7, #28]
  return result;
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80045f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80045f6:	2320      	movs	r3, #32
 80045f8:	e003      	b.n	8004602 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80045fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fc:	fab3 f383 	clz	r3, r3
 8004600:	b2db      	uxtb	r3, r3
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	6879      	ldr	r1, [r7, #4]
 8004606:	fa01 f303 	lsl.w	r3, r1, r3
 800460a:	431a      	orrs	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8004610:	bf00      	nop
 8004612:	372c      	adds	r7, #44	@ 0x2c
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800461c:	b480      	push	{r7}
 800461e:	b08b      	sub	sp, #44	@ 0x2c
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	0a1b      	lsrs	r3, r3, #8
 8004630:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	fa93 f3a3 	rbit	r3, r3
 8004638:	613b      	str	r3, [r7, #16]
  return result;
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d101      	bne.n	8004648 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8004644:	2320      	movs	r3, #32
 8004646:	e003      	b.n	8004650 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	fab3 f383 	clz	r3, r3
 800464e:	b2db      	uxtb	r3, r3
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	210f      	movs	r1, #15
 8004654:	fa01 f303 	lsl.w	r3, r1, r3
 8004658:	43db      	mvns	r3, r3
 800465a:	401a      	ands	r2, r3
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	0a1b      	lsrs	r3, r3, #8
 8004660:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004662:	6a3b      	ldr	r3, [r7, #32]
 8004664:	fa93 f3a3 	rbit	r3, r3
 8004668:	61fb      	str	r3, [r7, #28]
  return result;
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800466e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004670:	2b00      	cmp	r3, #0
 8004672:	d101      	bne.n	8004678 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8004674:	2320      	movs	r3, #32
 8004676:	e003      	b.n	8004680 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8004678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467a:	fab3 f383 	clz	r3, r3
 800467e:	b2db      	uxtb	r3, r3
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	6879      	ldr	r1, [r7, #4]
 8004684:	fa01 f303 	lsl.w	r3, r1, r3
 8004688:	431a      	orrs	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800468e:	bf00      	nop
 8004690:	372c      	adds	r7, #44	@ 0x2c
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b088      	sub	sp, #32
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
 80046a2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	fa93 f3a3 	rbit	r3, r3
 80046b0:	60fb      	str	r3, [r7, #12]
  return result;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d101      	bne.n	80046c0 <LL_GPIO_Init+0x26>
    return 32U;
 80046bc:	2320      	movs	r3, #32
 80046be:	e003      	b.n	80046c8 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	fab3 f383 	clz	r3, r3
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80046ca:	e048      	b.n	800475e <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	2101      	movs	r1, #1
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	fa01 f303 	lsl.w	r3, r1, r3
 80046d8:	4013      	ands	r3, r2
 80046da:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d03a      	beq.n	8004758 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d003      	beq.n	80046f2 <LL_GPIO_Init+0x58>
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d10e      	bne.n	8004710 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	461a      	mov	r2, r3
 80046f8:	69b9      	ldr	r1, [r7, #24]
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7ff fed7 	bl	80044ae <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	6819      	ldr	r1, [r3, #0]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	461a      	mov	r2, r3
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f7ff feb7 	bl	800447e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	461a      	mov	r2, r3
 8004716:	69b9      	ldr	r1, [r7, #24]
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f7ff ff05 	bl	8004528 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	2b02      	cmp	r3, #2
 8004724:	d111      	bne.n	800474a <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	2bff      	cmp	r3, #255	@ 0xff
 800472a:	d807      	bhi.n	800473c <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	461a      	mov	r2, r3
 8004732:	69b9      	ldr	r1, [r7, #24]
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f7ff ff34 	bl	80045a2 <LL_GPIO_SetAFPin_0_7>
 800473a:	e006      	b.n	800474a <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	695b      	ldr	r3, [r3, #20]
 8004740:	461a      	mov	r2, r3
 8004742:	69b9      	ldr	r1, [r7, #24]
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f7ff ff69 	bl	800461c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	461a      	mov	r2, r3
 8004750:	69b9      	ldr	r1, [r7, #24]
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7ff fe56 	bl	8004404 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	3301      	adds	r3, #1
 800475c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	fa22 f303 	lsr.w	r3, r2, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1af      	bne.n	80046cc <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3720      	adds	r7, #32
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
	...

08004778 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800477c:	4b07      	ldr	r3, [pc, #28]	@ (800479c <LL_RCC_HSI_IsReady+0x24>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004784:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004788:	d101      	bne.n	800478e <LL_RCC_HSI_IsReady+0x16>
 800478a:	2301      	movs	r3, #1
 800478c:	e000      	b.n	8004790 <LL_RCC_HSI_IsReady+0x18>
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	40021000 	.word	0x40021000

080047a0 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80047a4:	4b07      	ldr	r3, [pc, #28]	@ (80047c4 <LL_RCC_LSE_IsReady+0x24>)
 80047a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d101      	bne.n	80047b6 <LL_RCC_LSE_IsReady+0x16>
 80047b2:	2301      	movs	r3, #1
 80047b4:	e000      	b.n	80047b8 <LL_RCC_LSE_IsReady+0x18>
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	40021000 	.word	0x40021000

080047c8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80047c8:	b480      	push	{r7}
 80047ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80047cc:	4b04      	ldr	r3, [pc, #16]	@ (80047e0 <LL_RCC_GetSysClkSource+0x18>)
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f003 030c 	and.w	r3, r3, #12
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	40021000 	.word	0x40021000

080047e4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80047e4:	b480      	push	{r7}
 80047e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80047e8:	4b04      	ldr	r3, [pc, #16]	@ (80047fc <LL_RCC_GetAHBPrescaler+0x18>)
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	40021000 	.word	0x40021000

08004800 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004800:	b480      	push	{r7}
 8004802:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004804:	4b04      	ldr	r3, [pc, #16]	@ (8004818 <LL_RCC_GetAPB1Prescaler+0x18>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800480c:	4618      	mov	r0, r3
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	40021000 	.word	0x40021000

0800481c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800481c:	b480      	push	{r7}
 800481e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004820:	4b04      	ldr	r3, [pc, #16]	@ (8004834 <LL_RCC_GetAPB2Prescaler+0x18>)
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8004828:	4618      	mov	r0, r3
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	40021000 	.word	0x40021000

08004838 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8004840:	4b06      	ldr	r3, [pc, #24]	@ (800485c <LL_RCC_GetUSARTClockSource+0x24>)
 8004842:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	401a      	ands	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	041b      	lsls	r3, r3, #16
 800484e:	4313      	orrs	r3, r2
}
 8004850:	4618      	mov	r0, r3
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	40021000 	.word	0x40021000

08004860 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8004868:	4b06      	ldr	r3, [pc, #24]	@ (8004884 <LL_RCC_GetUARTClockSource+0x24>)
 800486a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	401a      	ands	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	041b      	lsls	r3, r3, #16
 8004876:	4313      	orrs	r3, r2
}
 8004878:	4618      	mov	r0, r3
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	40021000 	.word	0x40021000

08004888 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800488c:	4b04      	ldr	r3, [pc, #16]	@ (80048a0 <LL_RCC_PLL_GetMainSource+0x18>)
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f003 0303 	and.w	r3, r3, #3
}
 8004894:	4618      	mov	r0, r3
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	40021000 	.word	0x40021000

080048a4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between Min_Data = 8 and Max_Data = 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80048a4:	b480      	push	{r7}
 80048a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80048a8:	4b04      	ldr	r3, [pc, #16]	@ (80048bc <LL_RCC_PLL_GetN+0x18>)
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	0a1b      	lsrs	r3, r3, #8
 80048ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr
 80048bc:	40021000 	.word	0x40021000

080048c0 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80048c0:	b480      	push	{r7}
 80048c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80048c4:	4b04      	ldr	r3, [pc, #16]	@ (80048d8 <LL_RCC_PLL_GetR+0x18>)
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	40021000 	.word	0x40021000

080048dc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_14
  *         @arg @ref LL_RCC_PLLM_DIV_15
  *         @arg @ref LL_RCC_PLLM_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80048e0:	4b04      	ldr	r3, [pc, #16]	@ (80048f4 <LL_RCC_PLL_GetDivider+0x18>)
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	40021000 	.word	0x40021000

080048f8 <LL_RCC_GetUSARTClockFreq>:
  *
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004900:	2300      	movs	r3, #0
 8004902:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b03      	cmp	r3, #3
 8004908:	d132      	bne.n	8004970 <LL_RCC_GetUSARTClockFreq+0x78>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7ff ff94 	bl	8004838 <LL_RCC_GetUSARTClockSource>
 8004910:	4603      	mov	r3, r0
 8004912:	f1b3 1f03 	cmp.w	r3, #196611	@ 0x30003
 8004916:	d016      	beq.n	8004946 <LL_RCC_GetUSARTClockFreq+0x4e>
 8004918:	f1b3 1f03 	cmp.w	r3, #196611	@ 0x30003
 800491c:	d81c      	bhi.n	8004958 <LL_RCC_GetUSARTClockFreq+0x60>
 800491e:	4a51      	ldr	r2, [pc, #324]	@ (8004a64 <LL_RCC_GetUSARTClockFreq+0x16c>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d003      	beq.n	800492c <LL_RCC_GetUSARTClockFreq+0x34>
 8004924:	4a50      	ldr	r2, [pc, #320]	@ (8004a68 <LL_RCC_GetUSARTClockFreq+0x170>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d004      	beq.n	8004934 <LL_RCC_GetUSARTClockFreq+0x3c>
 800492a:	e015      	b.n	8004958 <LL_RCC_GetUSARTClockFreq+0x60>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800492c:	f000 f92e 	bl	8004b8c <RCC_GetSystemClockFreq>
 8004930:	60f8      	str	r0, [r7, #12]
        break;
 8004932:	e092      	b.n	8004a5a <LL_RCC_GetUSARTClockFreq+0x162>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8004934:	f7ff ff20 	bl	8004778 <LL_RCC_HSI_IsReady>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 8082 	beq.w	8004a44 <LL_RCC_GetUSARTClockFreq+0x14c>
        {
          usart_frequency = HSI_VALUE;
 8004940:	4b4a      	ldr	r3, [pc, #296]	@ (8004a6c <LL_RCC_GetUSARTClockFreq+0x174>)
 8004942:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004944:	e07e      	b.n	8004a44 <LL_RCC_GetUSARTClockFreq+0x14c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8004946:	f7ff ff2b 	bl	80047a0 <LL_RCC_LSE_IsReady>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d07b      	beq.n	8004a48 <LL_RCC_GetUSARTClockFreq+0x150>
        {
          usart_frequency = LSE_VALUE;
 8004950:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004954:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004956:	e077      	b.n	8004a48 <LL_RCC_GetUSARTClockFreq+0x150>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004958:	f000 f918 	bl	8004b8c <RCC_GetSystemClockFreq>
 800495c:	4603      	mov	r3, r0
 800495e:	4618      	mov	r0, r3
 8004960:	f000 f93a 	bl	8004bd8 <RCC_GetHCLKClockFreq>
 8004964:	4603      	mov	r3, r0
 8004966:	4618      	mov	r0, r3
 8004968:	f000 f964 	bl	8004c34 <RCC_GetPCLK2ClockFreq>
 800496c:	60f8      	str	r0, [r7, #12]
        break;
 800496e:	e074      	b.n	8004a5a <LL_RCC_GetUSARTClockFreq+0x162>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b0c      	cmp	r3, #12
 8004974:	d131      	bne.n	80049da <LL_RCC_GetUSARTClockFreq+0xe2>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7ff ff5e 	bl	8004838 <LL_RCC_GetUSARTClockSource>
 800497c:	4603      	mov	r3, r0
 800497e:	f1b3 1f0c 	cmp.w	r3, #786444	@ 0xc000c
 8004982:	d015      	beq.n	80049b0 <LL_RCC_GetUSARTClockFreq+0xb8>
 8004984:	f1b3 1f0c 	cmp.w	r3, #786444	@ 0xc000c
 8004988:	d81b      	bhi.n	80049c2 <LL_RCC_GetUSARTClockFreq+0xca>
 800498a:	4a39      	ldr	r2, [pc, #228]	@ (8004a70 <LL_RCC_GetUSARTClockFreq+0x178>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d003      	beq.n	8004998 <LL_RCC_GetUSARTClockFreq+0xa0>
 8004990:	4a38      	ldr	r2, [pc, #224]	@ (8004a74 <LL_RCC_GetUSARTClockFreq+0x17c>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d004      	beq.n	80049a0 <LL_RCC_GetUSARTClockFreq+0xa8>
 8004996:	e014      	b.n	80049c2 <LL_RCC_GetUSARTClockFreq+0xca>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8004998:	f000 f8f8 	bl	8004b8c <RCC_GetSystemClockFreq>
 800499c:	60f8      	str	r0, [r7, #12]
        break;
 800499e:	e05c      	b.n	8004a5a <LL_RCC_GetUSARTClockFreq+0x162>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80049a0:	f7ff feea 	bl	8004778 <LL_RCC_HSI_IsReady>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d050      	beq.n	8004a4c <LL_RCC_GetUSARTClockFreq+0x154>
        {
          usart_frequency = HSI_VALUE;
 80049aa:	4b30      	ldr	r3, [pc, #192]	@ (8004a6c <LL_RCC_GetUSARTClockFreq+0x174>)
 80049ac:	60fb      	str	r3, [r7, #12]
        }
        break;
 80049ae:	e04d      	b.n	8004a4c <LL_RCC_GetUSARTClockFreq+0x154>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80049b0:	f7ff fef6 	bl	80047a0 <LL_RCC_LSE_IsReady>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d04a      	beq.n	8004a50 <LL_RCC_GetUSARTClockFreq+0x158>
        {
          usart_frequency = LSE_VALUE;
 80049ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049be:	60fb      	str	r3, [r7, #12]
        }
        break;
 80049c0:	e046      	b.n	8004a50 <LL_RCC_GetUSARTClockFreq+0x158>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80049c2:	f000 f8e3 	bl	8004b8c <RCC_GetSystemClockFreq>
 80049c6:	4603      	mov	r3, r0
 80049c8:	4618      	mov	r0, r3
 80049ca:	f000 f905 	bl	8004bd8 <RCC_GetHCLKClockFreq>
 80049ce:	4603      	mov	r3, r0
 80049d0:	4618      	mov	r0, r3
 80049d2:	f000 f919 	bl	8004c08 <RCC_GetPCLK1ClockFreq>
 80049d6:	60f8      	str	r0, [r7, #12]
        break;
 80049d8:	e03f      	b.n	8004a5a <LL_RCC_GetUSARTClockFreq+0x162>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2b30      	cmp	r3, #48	@ 0x30
 80049de:	d13c      	bne.n	8004a5a <LL_RCC_GetUSARTClockFreq+0x162>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f7ff ff29 	bl	8004838 <LL_RCC_GetUSARTClockSource>
 80049e6:	4603      	mov	r3, r0
 80049e8:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 80049ec:	d015      	beq.n	8004a1a <LL_RCC_GetUSARTClockFreq+0x122>
 80049ee:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 80049f2:	d81b      	bhi.n	8004a2c <LL_RCC_GetUSARTClockFreq+0x134>
 80049f4:	4a20      	ldr	r2, [pc, #128]	@ (8004a78 <LL_RCC_GetUSARTClockFreq+0x180>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d003      	beq.n	8004a02 <LL_RCC_GetUSARTClockFreq+0x10a>
 80049fa:	4a20      	ldr	r2, [pc, #128]	@ (8004a7c <LL_RCC_GetUSARTClockFreq+0x184>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d004      	beq.n	8004a0a <LL_RCC_GetUSARTClockFreq+0x112>
 8004a00:	e014      	b.n	8004a2c <LL_RCC_GetUSARTClockFreq+0x134>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8004a02:	f000 f8c3 	bl	8004b8c <RCC_GetSystemClockFreq>
 8004a06:	60f8      	str	r0, [r7, #12]
          break;
 8004a08:	e027      	b.n	8004a5a <LL_RCC_GetUSARTClockFreq+0x162>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8004a0a:	f7ff feb5 	bl	8004778 <LL_RCC_HSI_IsReady>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d01f      	beq.n	8004a54 <LL_RCC_GetUSARTClockFreq+0x15c>
          {
            usart_frequency = HSI_VALUE;
 8004a14:	4b15      	ldr	r3, [pc, #84]	@ (8004a6c <LL_RCC_GetUSARTClockFreq+0x174>)
 8004a16:	60fb      	str	r3, [r7, #12]
          }
          break;
 8004a18:	e01c      	b.n	8004a54 <LL_RCC_GetUSARTClockFreq+0x15c>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8004a1a:	f7ff fec1 	bl	80047a0 <LL_RCC_LSE_IsReady>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d019      	beq.n	8004a58 <LL_RCC_GetUSARTClockFreq+0x160>
          {
            usart_frequency = LSE_VALUE;
 8004a24:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a28:	60fb      	str	r3, [r7, #12]
          }
          break;
 8004a2a:	e015      	b.n	8004a58 <LL_RCC_GetUSARTClockFreq+0x160>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004a2c:	f000 f8ae 	bl	8004b8c <RCC_GetSystemClockFreq>
 8004a30:	4603      	mov	r3, r0
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 f8d0 	bl	8004bd8 <RCC_GetHCLKClockFreq>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 f8e4 	bl	8004c08 <RCC_GetPCLK1ClockFreq>
 8004a40:	60f8      	str	r0, [r7, #12]
          break;
 8004a42:	e00a      	b.n	8004a5a <LL_RCC_GetUSARTClockFreq+0x162>
        break;
 8004a44:	bf00      	nop
 8004a46:	e008      	b.n	8004a5a <LL_RCC_GetUSARTClockFreq+0x162>
        break;
 8004a48:	bf00      	nop
 8004a4a:	e006      	b.n	8004a5a <LL_RCC_GetUSARTClockFreq+0x162>
        break;
 8004a4c:	bf00      	nop
 8004a4e:	e004      	b.n	8004a5a <LL_RCC_GetUSARTClockFreq+0x162>
        break;
 8004a50:	bf00      	nop
 8004a52:	e002      	b.n	8004a5a <LL_RCC_GetUSARTClockFreq+0x162>
          break;
 8004a54:	bf00      	nop
 8004a56:	e000      	b.n	8004a5a <LL_RCC_GetUSARTClockFreq+0x162>
          break;
 8004a58:	bf00      	nop
      }
    }
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	00030001 	.word	0x00030001
 8004a68:	00030002 	.word	0x00030002
 8004a6c:	00f42400 	.word	0x00f42400
 8004a70:	000c0004 	.word	0x000c0004
 8004a74:	000c0008 	.word	0x000c0008
 8004a78:	00300010 	.word	0x00300010
 8004a7c:	00300020 	.word	0x00300020

08004a80 <LL_RCC_GetUARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a90:	d134      	bne.n	8004afc <LL_RCC_GetUARTClockFreq+0x7c>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7ff fee4 	bl	8004860 <LL_RCC_GetUARTClockSource>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 8004a9e:	d015      	beq.n	8004acc <LL_RCC_GetUARTClockFreq+0x4c>
 8004aa0:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 8004aa4:	d81b      	bhi.n	8004ade <LL_RCC_GetUARTClockFreq+0x5e>
 8004aa6:	4a34      	ldr	r2, [pc, #208]	@ (8004b78 <LL_RCC_GetUARTClockFreq+0xf8>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d003      	beq.n	8004ab4 <LL_RCC_GetUARTClockFreq+0x34>
 8004aac:	4a33      	ldr	r2, [pc, #204]	@ (8004b7c <LL_RCC_GetUARTClockFreq+0xfc>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d004      	beq.n	8004abc <LL_RCC_GetUARTClockFreq+0x3c>
 8004ab2:	e014      	b.n	8004ade <LL_RCC_GetUARTClockFreq+0x5e>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8004ab4:	f000 f86a 	bl	8004b8c <RCC_GetSystemClockFreq>
 8004ab8:	60f8      	str	r0, [r7, #12]
        break;
 8004aba:	e01f      	b.n	8004afc <LL_RCC_GetUARTClockFreq+0x7c>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8004abc:	f7ff fe5c 	bl	8004778 <LL_RCC_HSI_IsReady>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d017      	beq.n	8004af6 <LL_RCC_GetUARTClockFreq+0x76>
        {
          uart_frequency = HSI_VALUE;
 8004ac6:	4b2e      	ldr	r3, [pc, #184]	@ (8004b80 <LL_RCC_GetUARTClockFreq+0x100>)
 8004ac8:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004aca:	e014      	b.n	8004af6 <LL_RCC_GetUARTClockFreq+0x76>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8004acc:	f7ff fe68 	bl	80047a0 <LL_RCC_LSE_IsReady>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d011      	beq.n	8004afa <LL_RCC_GetUARTClockFreq+0x7a>
        {
          uart_frequency = LSE_VALUE;
 8004ad6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ada:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004adc:	e00d      	b.n	8004afa <LL_RCC_GetUARTClockFreq+0x7a>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004ade:	f000 f855 	bl	8004b8c <RCC_GetSystemClockFreq>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f000 f877 	bl	8004bd8 <RCC_GetHCLKClockFreq>
 8004aea:	4603      	mov	r3, r0
 8004aec:	4618      	mov	r0, r3
 8004aee:	f000 f88b 	bl	8004c08 <RCC_GetPCLK1ClockFreq>
 8004af2:	60f8      	str	r0, [r7, #12]
        break;
 8004af4:	e002      	b.n	8004afc <LL_RCC_GetUARTClockFreq+0x7c>
        break;
 8004af6:	bf00      	nop
 8004af8:	e000      	b.n	8004afc <LL_RCC_GetUARTClockFreq+0x7c>
        break;
 8004afa:	bf00      	nop
    }
  }

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b02:	d134      	bne.n	8004b6e <LL_RCC_GetUARTClockFreq+0xee>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f7ff feab 	bl	8004860 <LL_RCC_GetUARTClockSource>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 8004b10:	d015      	beq.n	8004b3e <LL_RCC_GetUARTClockFreq+0xbe>
 8004b12:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 8004b16:	d81b      	bhi.n	8004b50 <LL_RCC_GetUARTClockFreq+0xd0>
 8004b18:	4a1a      	ldr	r2, [pc, #104]	@ (8004b84 <LL_RCC_GetUARTClockFreq+0x104>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d003      	beq.n	8004b26 <LL_RCC_GetUARTClockFreq+0xa6>
 8004b1e:	4a1a      	ldr	r2, [pc, #104]	@ (8004b88 <LL_RCC_GetUARTClockFreq+0x108>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d004      	beq.n	8004b2e <LL_RCC_GetUARTClockFreq+0xae>
 8004b24:	e014      	b.n	8004b50 <LL_RCC_GetUARTClockFreq+0xd0>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8004b26:	f000 f831 	bl	8004b8c <RCC_GetSystemClockFreq>
 8004b2a:	60f8      	str	r0, [r7, #12]
        break;
 8004b2c:	e01f      	b.n	8004b6e <LL_RCC_GetUARTClockFreq+0xee>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8004b2e:	f7ff fe23 	bl	8004778 <LL_RCC_HSI_IsReady>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d017      	beq.n	8004b68 <LL_RCC_GetUARTClockFreq+0xe8>
        {
          uart_frequency = HSI_VALUE;
 8004b38:	4b11      	ldr	r3, [pc, #68]	@ (8004b80 <LL_RCC_GetUARTClockFreq+0x100>)
 8004b3a:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004b3c:	e014      	b.n	8004b68 <LL_RCC_GetUARTClockFreq+0xe8>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8004b3e:	f7ff fe2f 	bl	80047a0 <LL_RCC_LSE_IsReady>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d011      	beq.n	8004b6c <LL_RCC_GetUARTClockFreq+0xec>
        {
          uart_frequency = LSE_VALUE;
 8004b48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b4c:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004b4e:	e00d      	b.n	8004b6c <LL_RCC_GetUARTClockFreq+0xec>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004b50:	f000 f81c 	bl	8004b8c <RCC_GetSystemClockFreq>
 8004b54:	4603      	mov	r3, r0
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 f83e 	bl	8004bd8 <RCC_GetHCLKClockFreq>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 f852 	bl	8004c08 <RCC_GetPCLK1ClockFreq>
 8004b64:	60f8      	str	r0, [r7, #12]
        break;
 8004b66:	e002      	b.n	8004b6e <LL_RCC_GetUARTClockFreq+0xee>
        break;
 8004b68:	bf00      	nop
 8004b6a:	e000      	b.n	8004b6e <LL_RCC_GetUARTClockFreq+0xee>
        break;
 8004b6c:	bf00      	nop
    }
  }
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	00c00040 	.word	0x00c00040
 8004b7c:	00c00080 	.word	0x00c00080
 8004b80:	00f42400 	.word	0x00f42400
 8004b84:	03000100 	.word	0x03000100
 8004b88:	03000200 	.word	0x03000200

08004b8c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8004b92:	f7ff fe19 	bl	80047c8 <LL_RCC_GetSysClkSource>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b0c      	cmp	r3, #12
 8004b9a:	d00c      	beq.n	8004bb6 <RCC_GetSystemClockFreq+0x2a>
 8004b9c:	2b0c      	cmp	r3, #12
 8004b9e:	d80e      	bhi.n	8004bbe <RCC_GetSystemClockFreq+0x32>
 8004ba0:	2b04      	cmp	r3, #4
 8004ba2:	d002      	beq.n	8004baa <RCC_GetSystemClockFreq+0x1e>
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	d003      	beq.n	8004bb0 <RCC_GetSystemClockFreq+0x24>
 8004ba8:	e009      	b.n	8004bbe <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004baa:	4b09      	ldr	r3, [pc, #36]	@ (8004bd0 <RCC_GetSystemClockFreq+0x44>)
 8004bac:	607b      	str	r3, [r7, #4]
      break;
 8004bae:	e009      	b.n	8004bc4 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004bb0:	4b08      	ldr	r3, [pc, #32]	@ (8004bd4 <RCC_GetSystemClockFreq+0x48>)
 8004bb2:	607b      	str	r3, [r7, #4]
      break;
 8004bb4:	e006      	b.n	8004bc4 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8004bb6:	f000 f853 	bl	8004c60 <RCC_PLL_GetFreqDomain_SYS>
 8004bba:	6078      	str	r0, [r7, #4]
      break;
 8004bbc:	e002      	b.n	8004bc4 <RCC_GetSystemClockFreq+0x38>

    default:
      frequency = HSI_VALUE;
 8004bbe:	4b04      	ldr	r3, [pc, #16]	@ (8004bd0 <RCC_GetSystemClockFreq+0x44>)
 8004bc0:	607b      	str	r3, [r7, #4]
      break;
 8004bc2:	bf00      	nop
  }

  return frequency;
 8004bc4:	687b      	ldr	r3, [r7, #4]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	00f42400 	.word	0x00f42400
 8004bd4:	016e3600 	.word	0x016e3600

08004bd8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004be0:	f7ff fe00 	bl	80047e4 <LL_RCC_GetAHBPrescaler>
 8004be4:	4603      	mov	r3, r0
 8004be6:	091b      	lsrs	r3, r3, #4
 8004be8:	f003 030f 	and.w	r3, r3, #15
 8004bec:	4a05      	ldr	r2, [pc, #20]	@ (8004c04 <RCC_GetHCLKClockFreq+0x2c>)
 8004bee:	5cd3      	ldrb	r3, [r2, r3]
 8004bf0:	f003 031f 	and.w	r3, r3, #31
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	080064fc 	.word	0x080064fc

08004c08 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004c10:	f7ff fdf6 	bl	8004800 <LL_RCC_GetAPB1Prescaler>
 8004c14:	4603      	mov	r3, r0
 8004c16:	0a1b      	lsrs	r3, r3, #8
 8004c18:	4a05      	ldr	r2, [pc, #20]	@ (8004c30 <RCC_GetPCLK1ClockFreq+0x28>)
 8004c1a:	5cd3      	ldrb	r3, [r2, r3]
 8004c1c:	f003 031f 	and.w	r3, r3, #31
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	0800650c 	.word	0x0800650c

08004c34 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004c3c:	f7ff fdee 	bl	800481c <LL_RCC_GetAPB2Prescaler>
 8004c40:	4603      	mov	r3, r0
 8004c42:	0adb      	lsrs	r3, r3, #11
 8004c44:	4a05      	ldr	r2, [pc, #20]	@ (8004c5c <RCC_GetPCLK2ClockFreq+0x28>)
 8004c46:	5cd3      	ldrb	r3, [r2, r3]
 8004c48:	f003 031f 	and.w	r3, r3, #31
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3708      	adds	r7, #8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	0800650c 	.word	0x0800650c

08004c60 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8004c60:	b590      	push	{r4, r7, lr}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004c66:	f7ff fe0f 	bl	8004888 <LL_RCC_PLL_GetMainSource>
 8004c6a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d003      	beq.n	8004c7a <RCC_PLL_GetFreqDomain_SYS+0x1a>
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	2b03      	cmp	r3, #3
 8004c76:	d003      	beq.n	8004c80 <RCC_PLL_GetFreqDomain_SYS+0x20>
 8004c78:	e005      	b.n	8004c86 <RCC_PLL_GetFreqDomain_SYS+0x26>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8004c7a:	4b11      	ldr	r3, [pc, #68]	@ (8004cc0 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8004c7c:	607b      	str	r3, [r7, #4]
      break;
 8004c7e:	e005      	b.n	8004c8c <RCC_PLL_GetFreqDomain_SYS+0x2c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8004c80:	4b10      	ldr	r3, [pc, #64]	@ (8004cc4 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8004c82:	607b      	str	r3, [r7, #4]
      break;
 8004c84:	e002      	b.n	8004c8c <RCC_PLL_GetFreqDomain_SYS+0x2c>

    default:
      pllinputfreq = HSI_VALUE;
 8004c86:	4b0e      	ldr	r3, [pc, #56]	@ (8004cc0 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8004c88:	607b      	str	r3, [r7, #4]
      break;
 8004c8a:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004c8c:	f7ff fe0a 	bl	80048a4 <LL_RCC_PLL_GetN>
 8004c90:	4602      	mov	r2, r0
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	fb03 f402 	mul.w	r4, r3, r2
 8004c98:	f7ff fe20 	bl	80048dc <LL_RCC_PLL_GetDivider>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	091b      	lsrs	r3, r3, #4
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	fbb4 f4f3 	udiv	r4, r4, r3
 8004ca6:	f7ff fe0b 	bl	80048c0 <LL_RCC_PLL_GetR>
 8004caa:	4603      	mov	r3, r0
 8004cac:	0e5b      	lsrs	r3, r3, #25
 8004cae:	3301      	adds	r3, #1
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	fbb4 f3f3 	udiv	r3, r4, r3
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd90      	pop	{r4, r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	00f42400 	.word	0x00f42400
 8004cc4:	016e3600 	.word	0x016e3600

08004cc8 <LL_USART_IsEnabled>:
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d101      	bne.n	8004ce0 <LL_USART_IsEnabled+0x18>
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e000      	b.n	8004ce2 <LL_USART_IsEnabled+0x1a>
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <LL_USART_SetPrescaler>:
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b083      	sub	sp, #12
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
 8004cf6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cfc:	f023 030f 	bic.w	r3, r3, #15
 8004d00:	683a      	ldr	r2, [r7, #0]
 8004d02:	b292      	uxth	r2, r2
 8004d04:	431a      	orrs	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <LL_USART_SetStopBitsLength>:
{
 8004d16:	b480      	push	{r7}
 8004d18:	b083      	sub	sp, #12
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
 8004d1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	605a      	str	r2, [r3, #4]
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <LL_USART_SetHWFlowCtrl>:
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	431a      	orrs	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	609a      	str	r2, [r3, #8]
}
 8004d56:	bf00      	nop
 8004d58:	370c      	adds	r7, #12
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
	...

08004d64 <LL_USART_SetBaudRate>:
{
 8004d64:	b480      	push	{r7}
 8004d66:	b087      	sub	sp, #28
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
 8004d70:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2b0b      	cmp	r3, #11
 8004d76:	d83c      	bhi.n	8004df2 <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 8004d78:	6a3b      	ldr	r3, [r7, #32]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d039      	beq.n	8004df2 <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d84:	d122      	bne.n	8004dcc <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	4b1c      	ldr	r3, [pc, #112]	@ (8004e00 <LL_USART_SetBaudRate+0x9c>)
 8004d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d98:	005a      	lsls	r2, r3, #1
 8004d9a:	6a3b      	ldr	r3, [r7, #32]
 8004d9c:	085b      	lsrs	r3, r3, #1
 8004d9e:	441a      	add	r2, r3
 8004da0:	6a3b      	ldr	r3, [r7, #32]
 8004da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8004db0:	4013      	ands	r3, r2
 8004db2:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	085b      	lsrs	r3, r3, #1
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	f003 0307 	and.w	r3, r3, #7
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	60da      	str	r2, [r3, #12]
}
 8004dca:	e012      	b.n	8004df2 <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8004e00 <LL_USART_SetBaudRate+0x9c>)
 8004dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	fbb2 f2f3 	udiv	r2, r2, r3
 8004dde:	6a3b      	ldr	r3, [r7, #32]
 8004de0:	085b      	lsrs	r3, r3, #1
 8004de2:	441a      	add	r2, r3
 8004de4:	6a3b      	ldr	r3, [r7, #32]
 8004de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	461a      	mov	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	60da      	str	r2, [r3, #12]
}
 8004df2:	bf00      	nop
 8004df4:	371c      	adds	r7, #28
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	08006524 	.word	0x08006524

08004e04 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af02      	add	r7, sp, #8
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8004e12:	2300      	movs	r3, #0
 8004e14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7ff ff56 	bl	8004cc8 <LL_USART_IsEnabled>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d165      	bne.n	8004eee <LL_USART_Init+0xea>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	4b34      	ldr	r3, [pc, #208]	@ (8004ef8 <LL_USART_Init+0xf4>)
 8004e28:	4013      	ands	r3, r2
 8004e2a:	683a      	ldr	r2, [r7, #0]
 8004e2c:	6891      	ldr	r1, [r2, #8]
 8004e2e:	683a      	ldr	r2, [r7, #0]
 8004e30:	6912      	ldr	r2, [r2, #16]
 8004e32:	4311      	orrs	r1, r2
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	6952      	ldr	r2, [r2, #20]
 8004e38:	4311      	orrs	r1, r2
 8004e3a:	683a      	ldr	r2, [r7, #0]
 8004e3c:	69d2      	ldr	r2, [r2, #28]
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	431a      	orrs	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f7ff ff62 	bl	8004d16 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	4619      	mov	r1, r3
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f7ff ff6f 	bl	8004d3c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a26      	ldr	r2, [pc, #152]	@ (8004efc <LL_USART_Init+0xf8>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d104      	bne.n	8004e70 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8004e66:	2003      	movs	r0, #3
 8004e68:	f7ff fd46 	bl	80048f8 <LL_RCC_GetUSARTClockFreq>
 8004e6c:	60b8      	str	r0, [r7, #8]
 8004e6e:	e023      	b.n	8004eb8 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a23      	ldr	r2, [pc, #140]	@ (8004f00 <LL_USART_Init+0xfc>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d104      	bne.n	8004e82 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8004e78:	200c      	movs	r0, #12
 8004e7a:	f7ff fd3d 	bl	80048f8 <LL_RCC_GetUSARTClockFreq>
 8004e7e:	60b8      	str	r0, [r7, #8]
 8004e80:	e01a      	b.n	8004eb8 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a1f      	ldr	r2, [pc, #124]	@ (8004f04 <LL_USART_Init+0x100>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d104      	bne.n	8004e94 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8004e8a:	2030      	movs	r0, #48	@ 0x30
 8004e8c:	f7ff fd34 	bl	80048f8 <LL_RCC_GetUSARTClockFreq>
 8004e90:	60b8      	str	r0, [r7, #8]
 8004e92:	e011      	b.n	8004eb8 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a1c      	ldr	r2, [pc, #112]	@ (8004f08 <LL_USART_Init+0x104>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d104      	bne.n	8004ea6 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8004e9c:	20c0      	movs	r0, #192	@ 0xc0
 8004e9e:	f7ff fdef 	bl	8004a80 <LL_RCC_GetUARTClockFreq>
 8004ea2:	60b8      	str	r0, [r7, #8]
 8004ea4:	e008      	b.n	8004eb8 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a18      	ldr	r2, [pc, #96]	@ (8004f0c <LL_USART_Init+0x108>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d104      	bne.n	8004eb8 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8004eae:	f44f 7040 	mov.w	r0, #768	@ 0x300
 8004eb2:	f7ff fde5 	bl	8004a80 <LL_RCC_GetUARTClockFreq>
 8004eb6:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d011      	beq.n	8004ee2 <LL_USART_Init+0xde>
        && (USART_InitStruct->BaudRate != 0U))
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00d      	beq.n	8004ee2 <LL_USART_Init+0xde>
    {
      status = SUCCESS;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	69d9      	ldr	r1, [r3, #28]
                           USART_InitStruct->BaudRate);
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 8004ed6:	9300      	str	r3, [sp, #0]
 8004ed8:	460b      	mov	r3, r1
 8004eda:	68b9      	ldr	r1, [r7, #8]
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f7ff ff41 	bl	8004d64 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f7ff ff00 	bl	8004cee <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3710      	adds	r7, #16
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	efff69f3 	.word	0xefff69f3
 8004efc:	40013800 	.word	0x40013800
 8004f00:	40004400 	.word	0x40004400
 8004f04:	40004800 	.word	0x40004800
 8004f08:	40004c00 	.word	0x40004c00
 8004f0c:	40005000 	.word	0x40005000

08004f10 <OPENBL_Init>:
/**
  * @brief  This function is used to initialize the registered interfaces in the Open Bootloader MW.
  * @retval None.
  */
void OPENBL_Init(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
  uint32_t counter;

  for (counter = 0U; counter < NumberOfInterfaces; counter++)
 8004f16:	2300      	movs	r3, #0
 8004f18:	607b      	str	r3, [r7, #4]
 8004f1a:	e00f      	b.n	8004f3c <OPENBL_Init+0x2c>
  {
    if (a_InterfacesTable[counter].p_Ops->Init != NULL)
 8004f1c:	4a0c      	ldr	r2, [pc, #48]	@ (8004f50 <OPENBL_Init+0x40>)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d005      	beq.n	8004f36 <OPENBL_Init+0x26>
    {
      a_InterfacesTable[counter].p_Ops->Init();
 8004f2a:	4a09      	ldr	r2, [pc, #36]	@ (8004f50 <OPENBL_Init+0x40>)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4798      	blx	r3
  for (counter = 0U; counter < NumberOfInterfaces; counter++)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	607b      	str	r3, [r7, #4]
 8004f3c:	4b05      	ldr	r3, [pc, #20]	@ (8004f54 <OPENBL_Init+0x44>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d3ea      	bcc.n	8004f1c <OPENBL_Init+0xc>
    }
  }
}
 8004f46:	bf00      	nop
 8004f48:	bf00      	nop
 8004f4a:	3708      	adds	r7, #8
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	20000c48 	.word	0x20000c48
 8004f54:	20000c44 	.word	0x20000c44

08004f58 <OPENBL_RegisterInterface>:
/**
  * @brief  This function is used to register a given interface in the Open Bootloader MW.
  * @retval None.
  */
ErrorStatus OPENBL_RegisterInterface(OPENBL_HandleTypeDef *Interface)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8004f60:	2300      	movs	r3, #0
 8004f62:	73fb      	strb	r3, [r7, #15]

  if (NumberOfInterfaces < INTERFACES_SUPPORTED)
 8004f64:	4b10      	ldr	r3, [pc, #64]	@ (8004fa8 <OPENBL_RegisterInterface+0x50>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2b04      	cmp	r3, #4
 8004f6a:	d814      	bhi.n	8004f96 <OPENBL_RegisterInterface+0x3e>
  {
    a_InterfacesTable[NumberOfInterfaces].p_Ops = Interface->p_Ops;
 8004f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8004fa8 <OPENBL_RegisterInterface+0x50>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	6812      	ldr	r2, [r2, #0]
 8004f74:	490d      	ldr	r1, [pc, #52]	@ (8004fac <OPENBL_RegisterInterface+0x54>)
 8004f76:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    a_InterfacesTable[NumberOfInterfaces].p_Cmd = Interface->p_Cmd;
 8004f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8004fa8 <OPENBL_RegisterInterface+0x50>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	6852      	ldr	r2, [r2, #4]
 8004f82:	490a      	ldr	r1, [pc, #40]	@ (8004fac <OPENBL_RegisterInterface+0x54>)
 8004f84:	00db      	lsls	r3, r3, #3
 8004f86:	440b      	add	r3, r1
 8004f88:	605a      	str	r2, [r3, #4]

    NumberOfInterfaces++;
 8004f8a:	4b07      	ldr	r3, [pc, #28]	@ (8004fa8 <OPENBL_RegisterInterface+0x50>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	4a05      	ldr	r2, [pc, #20]	@ (8004fa8 <OPENBL_RegisterInterface+0x50>)
 8004f92:	6013      	str	r3, [r2, #0]
 8004f94:	e001      	b.n	8004f9a <OPENBL_RegisterInterface+0x42>
  }
  else
  {
    status = ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3714      	adds	r7, #20
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr
 8004fa8:	20000c44 	.word	0x20000c44
 8004fac:	20000c48 	.word	0x20000c48

08004fb0 <OPENBL_InterfaceDetection>:
/**
  * @brief  This function is used to detect if there is any activity on a given interface.
  * @retval None.
  */
uint32_t OPENBL_InterfaceDetection(void)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
  uint32_t counter;
  uint8_t detected = 0U;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	70fb      	strb	r3, [r7, #3]

  for (counter = 0U; counter < NumberOfInterfaces; counter++)
 8004fba:	2300      	movs	r3, #0
 8004fbc:	607b      	str	r3, [r7, #4]
 8004fbe:	e01b      	b.n	8004ff8 <OPENBL_InterfaceDetection+0x48>
  {
    if (a_InterfacesTable[counter].p_Ops->Detection != NULL)
 8004fc0:	4a12      	ldr	r2, [pc, #72]	@ (800500c <OPENBL_InterfaceDetection+0x5c>)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d011      	beq.n	8004ff2 <OPENBL_InterfaceDetection+0x42>
    {
      detected = a_InterfacesTable[counter].p_Ops->Detection();
 8004fce:	4a0f      	ldr	r2, [pc, #60]	@ (800500c <OPENBL_InterfaceDetection+0x5c>)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	4798      	blx	r3
 8004fda:	4603      	mov	r3, r0
 8004fdc:	70fb      	strb	r3, [r7, #3]

      if (detected == 1U)
 8004fde:	78fb      	ldrb	r3, [r7, #3]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d106      	bne.n	8004ff2 <OPENBL_InterfaceDetection+0x42>
      {
        p_Interface = &(a_InterfacesTable[counter]);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	4a08      	ldr	r2, [pc, #32]	@ (800500c <OPENBL_InterfaceDetection+0x5c>)
 8004fea:	4413      	add	r3, r2
 8004fec:	4a08      	ldr	r2, [pc, #32]	@ (8005010 <OPENBL_InterfaceDetection+0x60>)
 8004fee:	6013      	str	r3, [r2, #0]
        break;
 8004ff0:	e007      	b.n	8005002 <OPENBL_InterfaceDetection+0x52>
  for (counter = 0U; counter < NumberOfInterfaces; counter++)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	607b      	str	r3, [r7, #4]
 8004ff8:	4b06      	ldr	r3, [pc, #24]	@ (8005014 <OPENBL_InterfaceDetection+0x64>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d3de      	bcc.n	8004fc0 <OPENBL_InterfaceDetection+0x10>
      }
    }
  }

  return detected;
 8005002:	78fb      	ldrb	r3, [r7, #3]
}
 8005004:	4618      	mov	r0, r3
 8005006:	3708      	adds	r7, #8
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	20000c48 	.word	0x20000c48
 8005010:	20000c70 	.word	0x20000c70
 8005014:	20000c44 	.word	0x20000c44

08005018 <OPENBL_CommandProcess>:
/**
  * @brief  This function is used to get the command opcode from the given interface and execute the right command.
  * @retval None.
  */
void OPENBL_CommandProcess(void)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
  uint8_t command_opcode;

  /* Get the user command opcode */
  if (p_Interface->p_Ops->GetCommandOpcode != NULL)
 800501e:	4bc7      	ldr	r3, [pc, #796]	@ (800533c <OPENBL_CommandProcess+0x324>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	2b00      	cmp	r3, #0
 8005028:	f000 823b 	beq.w	80054a2 <OPENBL_CommandProcess+0x48a>
  {
    command_opcode = p_Interface->p_Ops->GetCommandOpcode();
 800502c:	4bc3      	ldr	r3, [pc, #780]	@ (800533c <OPENBL_CommandProcess+0x324>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	4798      	blx	r3
 8005036:	4603      	mov	r3, r0
 8005038:	71fb      	strb	r3, [r7, #7]

    switch (command_opcode)
 800503a:	79fb      	ldrb	r3, [r7, #7]
 800503c:	2b21      	cmp	r3, #33	@ 0x21
 800503e:	f300 811b 	bgt.w	8005278 <OPENBL_CommandProcess+0x260>
 8005042:	2b00      	cmp	r3, #0
 8005044:	f280 80ce 	bge.w	80051e4 <OPENBL_CommandProcess+0x1cc>
 8005048:	e1fb      	b.n	8005442 <OPENBL_CommandProcess+0x42a>
 800504a:	3b31      	subs	r3, #49	@ 0x31
 800504c:	2b62      	cmp	r3, #98	@ 0x62
 800504e:	f200 81f8 	bhi.w	8005442 <OPENBL_CommandProcess+0x42a>
 8005052:	a201      	add	r2, pc, #4	@ (adr r2, 8005058 <OPENBL_CommandProcess+0x40>)
 8005054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005058:	080052ef 	.word	0x080052ef
 800505c:	080053a5 	.word	0x080053a5
 8005060:	08005443 	.word	0x08005443
 8005064:	08005443 	.word	0x08005443
 8005068:	08005443 	.word	0x08005443
 800506c:	08005443 	.word	0x08005443
 8005070:	08005443 	.word	0x08005443
 8005074:	08005443 	.word	0x08005443
 8005078:	08005443 	.word	0x08005443
 800507c:	08005443 	.word	0x08005443
 8005080:	08005443 	.word	0x08005443
 8005084:	08005443 	.word	0x08005443
 8005088:	08005443 	.word	0x08005443
 800508c:	08005443 	.word	0x08005443
 8005090:	08005443 	.word	0x08005443
 8005094:	08005443 	.word	0x08005443
 8005098:	08005443 	.word	0x08005443
 800509c:	08005443 	.word	0x08005443
 80050a0:	0800535b 	.word	0x0800535b
 80050a4:	08005443 	.word	0x08005443
 80050a8:	080053bd 	.word	0x080053bd
 80050ac:	08005443 	.word	0x08005443
 80050b0:	08005443 	.word	0x08005443
 80050b4:	08005443 	.word	0x08005443
 80050b8:	08005443 	.word	0x08005443
 80050bc:	08005443 	.word	0x08005443
 80050c0:	08005443 	.word	0x08005443
 80050c4:	08005443 	.word	0x08005443
 80050c8:	08005443 	.word	0x08005443
 80050cc:	08005443 	.word	0x08005443
 80050d0:	08005443 	.word	0x08005443
 80050d4:	08005443 	.word	0x08005443
 80050d8:	08005443 	.word	0x08005443
 80050dc:	08005443 	.word	0x08005443
 80050e0:	08005443 	.word	0x08005443
 80050e4:	08005443 	.word	0x08005443
 80050e8:	08005443 	.word	0x08005443
 80050ec:	08005443 	.word	0x08005443
 80050f0:	08005443 	.word	0x08005443
 80050f4:	08005443 	.word	0x08005443
 80050f8:	08005443 	.word	0x08005443
 80050fc:	08005443 	.word	0x08005443
 8005100:	08005443 	.word	0x08005443
 8005104:	08005443 	.word	0x08005443
 8005108:	08005443 	.word	0x08005443
 800510c:	08005443 	.word	0x08005443
 8005110:	08005443 	.word	0x08005443
 8005114:	08005443 	.word	0x08005443
 8005118:	08005443 	.word	0x08005443
 800511c:	08005443 	.word	0x08005443
 8005120:	08005375 	.word	0x08005375
 8005124:	080053d5 	.word	0x080053d5
 8005128:	08005443 	.word	0x08005443
 800512c:	08005443 	.word	0x08005443
 8005130:	08005443 	.word	0x08005443
 8005134:	08005443 	.word	0x08005443
 8005138:	08005443 	.word	0x08005443
 800513c:	08005443 	.word	0x08005443
 8005140:	08005443 	.word	0x08005443
 8005144:	08005443 	.word	0x08005443
 8005148:	08005443 	.word	0x08005443
 800514c:	08005443 	.word	0x08005443
 8005150:	08005443 	.word	0x08005443
 8005154:	08005443 	.word	0x08005443
 8005158:	08005443 	.word	0x08005443
 800515c:	08005443 	.word	0x08005443
 8005160:	0800538d 	.word	0x0800538d
 8005164:	080053ed 	.word	0x080053ed
 8005168:	08005443 	.word	0x08005443
 800516c:	08005443 	.word	0x08005443
 8005170:	08005443 	.word	0x08005443
 8005174:	08005443 	.word	0x08005443
 8005178:	08005435 	.word	0x08005435
 800517c:	08005443 	.word	0x08005443
 8005180:	08005443 	.word	0x08005443
 8005184:	08005443 	.word	0x08005443
 8005188:	08005443 	.word	0x08005443
 800518c:	08005443 	.word	0x08005443
 8005190:	08005443 	.word	0x08005443
 8005194:	08005443 	.word	0x08005443
 8005198:	08005443 	.word	0x08005443
 800519c:	08005323 	.word	0x08005323
 80051a0:	08005405 	.word	0x08005405
 80051a4:	08005443 	.word	0x08005443
 80051a8:	08005443 	.word	0x08005443
 80051ac:	08005443 	.word	0x08005443
 80051b0:	08005443 	.word	0x08005443
 80051b4:	08005443 	.word	0x08005443
 80051b8:	08005443 	.word	0x08005443
 80051bc:	08005443 	.word	0x08005443
 80051c0:	08005443 	.word	0x08005443
 80051c4:	08005443 	.word	0x08005443
 80051c8:	08005443 	.word	0x08005443
 80051cc:	08005443 	.word	0x08005443
 80051d0:	08005443 	.word	0x08005443
 80051d4:	08005443 	.word	0x08005443
 80051d8:	08005443 	.word	0x08005443
 80051dc:	08005341 	.word	0x08005341
 80051e0:	0800541d 	.word	0x0800541d
 80051e4:	2b21      	cmp	r3, #33	@ 0x21
 80051e6:	f200 812c 	bhi.w	8005442 <OPENBL_CommandProcess+0x42a>
 80051ea:	a201      	add	r2, pc, #4	@ (adr r2, 80051f0 <OPENBL_CommandProcess+0x1d8>)
 80051ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f0:	08005287 	.word	0x08005287
 80051f4:	080052a1 	.word	0x080052a1
 80051f8:	080052bb 	.word	0x080052bb
 80051fc:	08005443 	.word	0x08005443
 8005200:	08005443 	.word	0x08005443
 8005204:	08005443 	.word	0x08005443
 8005208:	08005443 	.word	0x08005443
 800520c:	08005443 	.word	0x08005443
 8005210:	08005443 	.word	0x08005443
 8005214:	08005443 	.word	0x08005443
 8005218:	08005443 	.word	0x08005443
 800521c:	08005443 	.word	0x08005443
 8005220:	08005443 	.word	0x08005443
 8005224:	08005443 	.word	0x08005443
 8005228:	08005443 	.word	0x08005443
 800522c:	08005443 	.word	0x08005443
 8005230:	08005443 	.word	0x08005443
 8005234:	080052d5 	.word	0x080052d5
 8005238:	08005443 	.word	0x08005443
 800523c:	08005443 	.word	0x08005443
 8005240:	08005443 	.word	0x08005443
 8005244:	08005443 	.word	0x08005443
 8005248:	08005443 	.word	0x08005443
 800524c:	08005443 	.word	0x08005443
 8005250:	08005443 	.word	0x08005443
 8005254:	08005443 	.word	0x08005443
 8005258:	08005443 	.word	0x08005443
 800525c:	08005443 	.word	0x08005443
 8005260:	08005443 	.word	0x08005443
 8005264:	08005443 	.word	0x08005443
 8005268:	08005443 	.word	0x08005443
 800526c:	08005443 	.word	0x08005443
 8005270:	08005443 	.word	0x08005443
 8005274:	08005309 	.word	0x08005309
 8005278:	2b93      	cmp	r3, #147	@ 0x93
 800527a:	f300 80e2 	bgt.w	8005442 <OPENBL_CommandProcess+0x42a>
 800527e:	2b31      	cmp	r3, #49	@ 0x31
 8005280:	f6bf aee3 	bge.w	800504a <OPENBL_CommandProcess+0x32>
 8005284:	e0dd      	b.n	8005442 <OPENBL_CommandProcess+0x42a>
    {
      case CMD_GET_COMMAND:
        if (p_Interface->p_Cmd->GetCommand != NULL)
 8005286:	4b2d      	ldr	r3, [pc, #180]	@ (800533c <OPENBL_CommandProcess+0x324>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	f000 80e4 	beq.w	800545c <OPENBL_CommandProcess+0x444>
        {
          p_Interface->p_Cmd->GetCommand();
 8005294:	4b29      	ldr	r3, [pc, #164]	@ (800533c <OPENBL_CommandProcess+0x324>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4798      	blx	r3
        }
        break;
 800529e:	e0dd      	b.n	800545c <OPENBL_CommandProcess+0x444>

      case CMD_GET_VERSION:
        if (p_Interface->p_Cmd->GetVersion != NULL)
 80052a0:	4b26      	ldr	r3, [pc, #152]	@ (800533c <OPENBL_CommandProcess+0x324>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f000 80d9 	beq.w	8005460 <OPENBL_CommandProcess+0x448>
        {
          p_Interface->p_Cmd->GetVersion();
 80052ae:	4b23      	ldr	r3, [pc, #140]	@ (800533c <OPENBL_CommandProcess+0x324>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	4798      	blx	r3
        }
        break;
 80052b8:	e0d2      	b.n	8005460 <OPENBL_CommandProcess+0x448>

      case CMD_GET_ID:
        if (p_Interface->p_Cmd->GetID != NULL)
 80052ba:	4b20      	ldr	r3, [pc, #128]	@ (800533c <OPENBL_CommandProcess+0x324>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f000 80ce 	beq.w	8005464 <OPENBL_CommandProcess+0x44c>
        {
          p_Interface->p_Cmd->GetID();
 80052c8:	4b1c      	ldr	r3, [pc, #112]	@ (800533c <OPENBL_CommandProcess+0x324>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	4798      	blx	r3
        }

        break;
 80052d2:	e0c7      	b.n	8005464 <OPENBL_CommandProcess+0x44c>

      case CMD_READ_MEMORY:
        if (p_Interface->p_Cmd->ReadMemory != NULL)
 80052d4:	4b19      	ldr	r3, [pc, #100]	@ (800533c <OPENBL_CommandProcess+0x324>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f000 80c3 	beq.w	8005468 <OPENBL_CommandProcess+0x450>
        {
          p_Interface->p_Cmd->ReadMemory();
 80052e2:	4b16      	ldr	r3, [pc, #88]	@ (800533c <OPENBL_CommandProcess+0x324>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	4798      	blx	r3
        }
        break;
 80052ec:	e0bc      	b.n	8005468 <OPENBL_CommandProcess+0x450>

      case CMD_WRITE_MEMORY:
        if (p_Interface->p_Cmd->WriteMemory != NULL)
 80052ee:	4b13      	ldr	r3, [pc, #76]	@ (800533c <OPENBL_CommandProcess+0x324>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	f000 80b8 	beq.w	800546c <OPENBL_CommandProcess+0x454>
        {
          p_Interface->p_Cmd->WriteMemory();
 80052fc:	4b0f      	ldr	r3, [pc, #60]	@ (800533c <OPENBL_CommandProcess+0x324>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	4798      	blx	r3
        }
        break;
 8005306:	e0b1      	b.n	800546c <OPENBL_CommandProcess+0x454>

      case CMD_GO:
        if (p_Interface->p_Cmd->Go != NULL)
 8005308:	4b0c      	ldr	r3, [pc, #48]	@ (800533c <OPENBL_CommandProcess+0x324>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	695b      	ldr	r3, [r3, #20]
 8005310:	2b00      	cmp	r3, #0
 8005312:	f000 80ad 	beq.w	8005470 <OPENBL_CommandProcess+0x458>
        {
          p_Interface->p_Cmd->Go();
 8005316:	4b09      	ldr	r3, [pc, #36]	@ (800533c <OPENBL_CommandProcess+0x324>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	4798      	blx	r3
        }
        break;
 8005320:	e0a6      	b.n	8005470 <OPENBL_CommandProcess+0x458>

      case CMD_READ_PROTECT:
        if (p_Interface->p_Cmd->ReadoutProtect != NULL)
 8005322:	4b06      	ldr	r3, [pc, #24]	@ (800533c <OPENBL_CommandProcess+0x324>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	2b00      	cmp	r3, #0
 800532c:	f000 80a2 	beq.w	8005474 <OPENBL_CommandProcess+0x45c>
        {
          p_Interface->p_Cmd->ReadoutProtect();
 8005330:	4b02      	ldr	r3, [pc, #8]	@ (800533c <OPENBL_CommandProcess+0x324>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	4798      	blx	r3
        }
        break;
 800533a:	e09b      	b.n	8005474 <OPENBL_CommandProcess+0x45c>
 800533c:	20000c70 	.word	0x20000c70

      case CMD_READ_UNPROTECT:
        if (p_Interface->p_Cmd->ReadoutUnprotect != NULL)
 8005340:	4b5a      	ldr	r3, [pc, #360]	@ (80054ac <OPENBL_CommandProcess+0x494>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	69db      	ldr	r3, [r3, #28]
 8005348:	2b00      	cmp	r3, #0
 800534a:	f000 8095 	beq.w	8005478 <OPENBL_CommandProcess+0x460>
        {
          p_Interface->p_Cmd->ReadoutUnprotect();
 800534e:	4b57      	ldr	r3, [pc, #348]	@ (80054ac <OPENBL_CommandProcess+0x494>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	69db      	ldr	r3, [r3, #28]
 8005356:	4798      	blx	r3
        }
        break;
 8005358:	e08e      	b.n	8005478 <OPENBL_CommandProcess+0x460>

      case CMD_EXT_ERASE_MEMORY:
        if (p_Interface->p_Cmd->EraseMemory != NULL)
 800535a:	4b54      	ldr	r3, [pc, #336]	@ (80054ac <OPENBL_CommandProcess+0x494>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	2b00      	cmp	r3, #0
 8005364:	f000 808a 	beq.w	800547c <OPENBL_CommandProcess+0x464>
        {
          p_Interface->p_Cmd->EraseMemory();
 8005368:	4b50      	ldr	r3, [pc, #320]	@ (80054ac <OPENBL_CommandProcess+0x494>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	6a1b      	ldr	r3, [r3, #32]
 8005370:	4798      	blx	r3
        }
        break;
 8005372:	e083      	b.n	800547c <OPENBL_CommandProcess+0x464>

      case CMD_WRITE_PROTECT:
        if (p_Interface->p_Cmd->WriteProtect != NULL)
 8005374:	4b4d      	ldr	r3, [pc, #308]	@ (80054ac <OPENBL_CommandProcess+0x494>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800537c:	2b00      	cmp	r3, #0
 800537e:	d07f      	beq.n	8005480 <OPENBL_CommandProcess+0x468>
        {
          p_Interface->p_Cmd->WriteProtect();
 8005380:	4b4a      	ldr	r3, [pc, #296]	@ (80054ac <OPENBL_CommandProcess+0x494>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005388:	4798      	blx	r3
        }
        break;
 800538a:	e079      	b.n	8005480 <OPENBL_CommandProcess+0x468>

      case CMD_WRITE_UNPROTECT:
        if (p_Interface->p_Cmd->WriteUnprotect != NULL)
 800538c:	4b47      	ldr	r3, [pc, #284]	@ (80054ac <OPENBL_CommandProcess+0x494>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005394:	2b00      	cmp	r3, #0
 8005396:	d075      	beq.n	8005484 <OPENBL_CommandProcess+0x46c>
        {
          p_Interface->p_Cmd->WriteUnprotect();
 8005398:	4b44      	ldr	r3, [pc, #272]	@ (80054ac <OPENBL_CommandProcess+0x494>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a0:	4798      	blx	r3
        }
        break;
 80053a2:	e06f      	b.n	8005484 <OPENBL_CommandProcess+0x46c>

      case CMD_NS_WRITE_MEMORY:
        if (p_Interface->p_Cmd->NsWriteMemory != NULL)
 80053a4:	4b41      	ldr	r3, [pc, #260]	@ (80054ac <OPENBL_CommandProcess+0x494>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d06b      	beq.n	8005488 <OPENBL_CommandProcess+0x470>
        {
          p_Interface->p_Cmd->NsWriteMemory();
 80053b0:	4b3e      	ldr	r3, [pc, #248]	@ (80054ac <OPENBL_CommandProcess+0x494>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b8:	4798      	blx	r3
        }
        break;
 80053ba:	e065      	b.n	8005488 <OPENBL_CommandProcess+0x470>

      case CMD_NS_ERASE_MEMORY:
        if (p_Interface->p_Cmd->NsEraseMemory != NULL)
 80053bc:	4b3b      	ldr	r3, [pc, #236]	@ (80054ac <OPENBL_CommandProcess+0x494>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d061      	beq.n	800548c <OPENBL_CommandProcess+0x474>
        {
          p_Interface->p_Cmd->NsEraseMemory();
 80053c8:	4b38      	ldr	r3, [pc, #224]	@ (80054ac <OPENBL_CommandProcess+0x494>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d0:	4798      	blx	r3
        }
        break;
 80053d2:	e05b      	b.n	800548c <OPENBL_CommandProcess+0x474>

      case CMD_NS_WRITE_PROTECT:
        if (p_Interface->p_Cmd->NsWriteProtect != NULL)
 80053d4:	4b35      	ldr	r3, [pc, #212]	@ (80054ac <OPENBL_CommandProcess+0x494>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d057      	beq.n	8005490 <OPENBL_CommandProcess+0x478>
        {
          p_Interface->p_Cmd->NsWriteProtect();
 80053e0:	4b32      	ldr	r3, [pc, #200]	@ (80054ac <OPENBL_CommandProcess+0x494>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053e8:	4798      	blx	r3
        }
        break;
 80053ea:	e051      	b.n	8005490 <OPENBL_CommandProcess+0x478>

      case CMD_NS_WRITE_UNPROTECT:
        if (p_Interface->p_Cmd->NsWriteUnprotect != NULL)
 80053ec:	4b2f      	ldr	r3, [pc, #188]	@ (80054ac <OPENBL_CommandProcess+0x494>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d04d      	beq.n	8005494 <OPENBL_CommandProcess+0x47c>
        {
          p_Interface->p_Cmd->NsWriteUnprotect();
 80053f8:	4b2c      	ldr	r3, [pc, #176]	@ (80054ac <OPENBL_CommandProcess+0x494>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005400:	4798      	blx	r3
        }
        break;
 8005402:	e047      	b.n	8005494 <OPENBL_CommandProcess+0x47c>

      case CMD_NS_READ_PROTECT:
        if (p_Interface->p_Cmd->NsReadoutProtect != NULL)
 8005404:	4b29      	ldr	r3, [pc, #164]	@ (80054ac <OPENBL_CommandProcess+0x494>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800540c:	2b00      	cmp	r3, #0
 800540e:	d043      	beq.n	8005498 <OPENBL_CommandProcess+0x480>
        {
          p_Interface->p_Cmd->NsReadoutProtect();
 8005410:	4b26      	ldr	r3, [pc, #152]	@ (80054ac <OPENBL_CommandProcess+0x494>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005418:	4798      	blx	r3
        }
        break;
 800541a:	e03d      	b.n	8005498 <OPENBL_CommandProcess+0x480>

      case CMD_NS_READ_UNPROTECT:
        if (p_Interface->p_Cmd->NsReadoutUnprotect != NULL)
 800541c:	4b23      	ldr	r3, [pc, #140]	@ (80054ac <OPENBL_CommandProcess+0x494>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005424:	2b00      	cmp	r3, #0
 8005426:	d039      	beq.n	800549c <OPENBL_CommandProcess+0x484>
        {
          p_Interface->p_Cmd->NsReadoutUnprotect();
 8005428:	4b20      	ldr	r3, [pc, #128]	@ (80054ac <OPENBL_CommandProcess+0x494>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005430:	4798      	blx	r3
        }
        break;
 8005432:	e033      	b.n	800549c <OPENBL_CommandProcess+0x484>
      case ACK_BYTE:
        p_Interface->p_Ops->SendByte(ACK_BYTE);
 8005434:	4b1d      	ldr	r3, [pc, #116]	@ (80054ac <OPENBL_CommandProcess+0x494>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	2079      	movs	r0, #121	@ 0x79
 800543e:	4798      	blx	r3
      break;
 8005440:	e02f      	b.n	80054a2 <OPENBL_CommandProcess+0x48a>
      /* Unknown command opcode */
      default:
        if (p_Interface->p_Ops->SendByte != NULL)
 8005442:	4b1a      	ldr	r3, [pc, #104]	@ (80054ac <OPENBL_CommandProcess+0x494>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d028      	beq.n	80054a0 <OPENBL_CommandProcess+0x488>
        {
          p_Interface->p_Ops->SendByte(NACK_BYTE);
 800544e:	4b17      	ldr	r3, [pc, #92]	@ (80054ac <OPENBL_CommandProcess+0x494>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	201f      	movs	r0, #31
 8005458:	4798      	blx	r3
        }
        break;
 800545a:	e021      	b.n	80054a0 <OPENBL_CommandProcess+0x488>
        break;
 800545c:	bf00      	nop
 800545e:	e020      	b.n	80054a2 <OPENBL_CommandProcess+0x48a>
        break;
 8005460:	bf00      	nop
 8005462:	e01e      	b.n	80054a2 <OPENBL_CommandProcess+0x48a>
        break;
 8005464:	bf00      	nop
 8005466:	e01c      	b.n	80054a2 <OPENBL_CommandProcess+0x48a>
        break;
 8005468:	bf00      	nop
 800546a:	e01a      	b.n	80054a2 <OPENBL_CommandProcess+0x48a>
        break;
 800546c:	bf00      	nop
 800546e:	e018      	b.n	80054a2 <OPENBL_CommandProcess+0x48a>
        break;
 8005470:	bf00      	nop
 8005472:	e016      	b.n	80054a2 <OPENBL_CommandProcess+0x48a>
        break;
 8005474:	bf00      	nop
 8005476:	e014      	b.n	80054a2 <OPENBL_CommandProcess+0x48a>
        break;
 8005478:	bf00      	nop
 800547a:	e012      	b.n	80054a2 <OPENBL_CommandProcess+0x48a>
        break;
 800547c:	bf00      	nop
 800547e:	e010      	b.n	80054a2 <OPENBL_CommandProcess+0x48a>
        break;
 8005480:	bf00      	nop
 8005482:	e00e      	b.n	80054a2 <OPENBL_CommandProcess+0x48a>
        break;
 8005484:	bf00      	nop
 8005486:	e00c      	b.n	80054a2 <OPENBL_CommandProcess+0x48a>
        break;
 8005488:	bf00      	nop
 800548a:	e00a      	b.n	80054a2 <OPENBL_CommandProcess+0x48a>
        break;
 800548c:	bf00      	nop
 800548e:	e008      	b.n	80054a2 <OPENBL_CommandProcess+0x48a>
        break;
 8005490:	bf00      	nop
 8005492:	e006      	b.n	80054a2 <OPENBL_CommandProcess+0x48a>
        break;
 8005494:	bf00      	nop
 8005496:	e004      	b.n	80054a2 <OPENBL_CommandProcess+0x48a>
        break;
 8005498:	bf00      	nop
 800549a:	e002      	b.n	80054a2 <OPENBL_CommandProcess+0x48a>
        break;
 800549c:	bf00      	nop
 800549e:	e000      	b.n	80054a2 <OPENBL_CommandProcess+0x48a>
        break;
 80054a0:	bf00      	nop
    }
  }
}
 80054a2:	bf00      	nop
 80054a4:	3708      	adds	r7, #8
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	20000c70 	.word	0x20000c70

080054b0 <OPENBL_CLASSICCAN_GetCommandsList>:
/**
  * @brief  This function is used to get a pointer to the structure that contains the available CLASSICCAN commands.
  * @return Returns a pointer to the OPENBL_CommandsTypeDef struct.
  */
OPENBL_CommandsTypeDef *OPENBL_CLASSICCAN_GetCommandsList(void)
{
 80054b0:	b480      	push	{r7}
 80054b2:	af00      	add	r7, sp, #0
  return (&OPENBL_CLASSICCAN_Commands);
 80054b4:	4b02      	ldr	r3, [pc, #8]	@ (80054c0 <OPENBL_CLASSICCAN_GetCommandsList+0x10>)
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr
 80054c0:	2000019c 	.word	0x2000019c

080054c4 <OPENBL_CLASSICCAN_GetCommand>:
/**
  * @brief  This function is used to get the list of the available CLASSICCAN commands
  * @retval None.
  */
static void OPENBL_CLASSICCAN_GetCommand(void)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
  uint32_t counter;
  const uint8_t a_OPENBL_CLASSICCAN_CommandsList[OPENBL_CLASSICCAN_COMMANDS_NB] =
 80054ca:	4a14      	ldr	r2, [pc, #80]	@ (800551c <OPENBL_CLASSICCAN_GetCommand+0x58>)
 80054cc:	463b      	mov	r3, r7
 80054ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80054d0:	c303      	stmia	r3!, {r0, r1}
 80054d2:	801a      	strh	r2, [r3, #0]
 80054d4:	3302      	adds	r3, #2
 80054d6:	0c12      	lsrs	r2, r2, #16
 80054d8:	701a      	strb	r2, [r3, #0]
    CMD_READ_PROTECT,
    CMD_READ_UNPROTECT
  };

  /* Send Acknowledge byte to notify the host that the command is recognized */
  OPENBL_CLASSICCAN_SendByte(ACK_BYTE);
 80054da:	2079      	movs	r0, #121	@ 0x79
 80054dc:	f7fb f96e 	bl	80007bc <OPENBL_CLASSICCAN_SendByte>

  /* Send the number of commands supported by CLASSICCAN protocol */
  OPENBL_CLASSICCAN_SendByte(OPENBL_CLASSICCAN_COMMANDS_NB);
 80054e0:	200b      	movs	r0, #11
 80054e2:	f7fb f96b 	bl	80007bc <OPENBL_CLASSICCAN_SendByte>

  /* Send CLASSICCAN protocol version */
  OPENBL_CLASSICCAN_SendByte(OPENBL_CLASSICCAN_VERSION);
 80054e6:	2020      	movs	r0, #32
 80054e8:	f7fb f968 	bl	80007bc <OPENBL_CLASSICCAN_SendByte>

  /* Send the list of supported commands */
  for (counter = 0U; counter < OPENBL_CLASSICCAN_COMMANDS_NB; counter++)
 80054ec:	2300      	movs	r3, #0
 80054ee:	60fb      	str	r3, [r7, #12]
 80054f0:	e009      	b.n	8005506 <OPENBL_CLASSICCAN_GetCommand+0x42>
  {
    OPENBL_CLASSICCAN_SendByte(a_OPENBL_CLASSICCAN_CommandsList[counter]);
 80054f2:	463a      	mov	r2, r7
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	4413      	add	r3, r2
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7fb f95e 	bl	80007bc <OPENBL_CLASSICCAN_SendByte>
  for (counter = 0U; counter < OPENBL_CLASSICCAN_COMMANDS_NB; counter++)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	3301      	adds	r3, #1
 8005504:	60fb      	str	r3, [r7, #12]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2b0a      	cmp	r3, #10
 800550a:	d9f2      	bls.n	80054f2 <OPENBL_CLASSICCAN_GetCommand+0x2e>
  }

  /* Send last Acknowledge synchronization byte */
  OPENBL_CLASSICCAN_SendByte(ACK_BYTE);
 800550c:	2079      	movs	r0, #121	@ 0x79
 800550e:	f7fb f955 	bl	80007bc <OPENBL_CLASSICCAN_SendByte>
}
 8005512:	bf00      	nop
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	080064e4 	.word	0x080064e4

08005520 <OPENBL_CLASSICCAN_GetVersion>:
/**
  * @brief  This function is used to get the CLASSICCAN protocol version.
  * @retval None.
  */
static void OPENBL_CLASSICCAN_GetVersion(void)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	af00      	add	r7, sp, #0
  /* Send Acknowledge byte to notify the host that the command is recognized */
  OPENBL_CLASSICCAN_SendByte(ACK_BYTE);
 8005524:	2079      	movs	r0, #121	@ 0x79
 8005526:	f7fb f949 	bl	80007bc <OPENBL_CLASSICCAN_SendByte>

  /* Send CLASSICCAN protocol version */
  OPENBL_CLASSICCAN_SendByte(OPENBL_CLASSICCAN_VERSION);
 800552a:	2020      	movs	r0, #32
 800552c:	f7fb f946 	bl	80007bc <OPENBL_CLASSICCAN_SendByte>

  /* Send dummy bytes */
  _TxData[0] = 0x0;
 8005530:	4b07      	ldr	r3, [pc, #28]	@ (8005550 <OPENBL_CLASSICCAN_GetVersion+0x30>)
 8005532:	2200      	movs	r2, #0
 8005534:	701a      	strb	r2, [r3, #0]
  _TxData[1] = 0x0;
 8005536:	4b06      	ldr	r3, [pc, #24]	@ (8005550 <OPENBL_CLASSICCAN_GetVersion+0x30>)
 8005538:	2200      	movs	r2, #0
 800553a:	705a      	strb	r2, [r3, #1]
  OPENBL_CLASSICCAN_SendBytes(_TxData, 2);
 800553c:	2102      	movs	r1, #2
 800553e:	4804      	ldr	r0, [pc, #16]	@ (8005550 <OPENBL_CLASSICCAN_GetVersion+0x30>)
 8005540:	f7fb f96a 	bl	8000818 <OPENBL_CLASSICCAN_SendBytes>

  /* Send last Acknowledge synchronization byte */
  OPENBL_CLASSICCAN_SendByte(ACK_BYTE);
 8005544:	2079      	movs	r0, #121	@ 0x79
 8005546:	f7fb f939 	bl	80007bc <OPENBL_CLASSICCAN_SendByte>
}
 800554a:	bf00      	nop
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	20000328 	.word	0x20000328

08005554 <OPENBL_CLASSICCAN_GetID>:
/**
  * @brief  This function is used to get the device ID.
  * @retval None.
  */
static void OPENBL_CLASSICCAN_GetID(void)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	af00      	add	r7, sp, #0
  /* Send Acknowledge byte to notify the host that the command is recognized */
  OPENBL_CLASSICCAN_SendByte(ACK_BYTE);
 8005558:	2079      	movs	r0, #121	@ 0x79
 800555a:	f7fb f92f 	bl	80007bc <OPENBL_CLASSICCAN_SendByte>

  /* Send the device ID starting by the MSB byte then the LSB byte */
  _TxData[0] = DEVICE_ID_MSB;
 800555e:	4b07      	ldr	r3, [pc, #28]	@ (800557c <OPENBL_CLASSICCAN_GetID+0x28>)
 8005560:	2204      	movs	r2, #4
 8005562:	701a      	strb	r2, [r3, #0]
  _TxData[1] = DEVICE_ID_LSB;
 8005564:	4b05      	ldr	r3, [pc, #20]	@ (800557c <OPENBL_CLASSICCAN_GetID+0x28>)
 8005566:	2269      	movs	r2, #105	@ 0x69
 8005568:	705a      	strb	r2, [r3, #1]
  OPENBL_CLASSICCAN_SendBytes(_TxData, 2U);
 800556a:	2102      	movs	r1, #2
 800556c:	4803      	ldr	r0, [pc, #12]	@ (800557c <OPENBL_CLASSICCAN_GetID+0x28>)
 800556e:	f7fb f953 	bl	8000818 <OPENBL_CLASSICCAN_SendBytes>

  /* Send last Acknowledge synchronization byte */
  OPENBL_CLASSICCAN_SendByte(ACK_BYTE);
 8005572:	2079      	movs	r0, #121	@ 0x79
 8005574:	f7fb f922 	bl	80007bc <OPENBL_CLASSICCAN_SendByte>
}
 8005578:	bf00      	nop
 800557a:	bd80      	pop	{r7, pc}
 800557c:	20000328 	.word	0x20000328

08005580 <OPENBL_CLASSICCAN_ReadMemory>:
/**
  * @brief  This function is used to read memory from the device.
  * @retval None.
  */
static void OPENBL_CLASSICCAN_ReadMemory(void)
{
 8005580:	b590      	push	{r4, r7, lr}
 8005582:	b089      	sub	sp, #36	@ 0x24
 8005584:	af00      	add	r7, sp, #0
  uint32_t single;
  uint32_t memory_index;
  uint8_t  data_length;

  /* Check memory protection then send adequate response */
  if (OPENBL_MEM_GetReadOutProtectionStatus() != RESET)
 8005586:	f000 fba2 	bl	8005cce <OPENBL_MEM_GetReadOutProtectionStatus>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d003      	beq.n	8005598 <OPENBL_CLASSICCAN_ReadMemory+0x18>
  {
    OPENBL_CLASSICCAN_SendByte(NACK_BYTE);
 8005590:	201f      	movs	r0, #31
 8005592:	f7fb f913 	bl	80007bc <OPENBL_CLASSICCAN_SendByte>
      }

      OPENBL_CLASSICCAN_SendByte(ACK_BYTE);
    }
  }
}
 8005596:	e069      	b.n	800566c <OPENBL_CLASSICCAN_ReadMemory+0xec>
    if (OPENBL_CLASSICCAN_GetAddress(&address) == NACK_BYTE)
 8005598:	1d3b      	adds	r3, r7, #4
 800559a:	4618      	mov	r0, r3
 800559c:	f000 f9f8 	bl	8005990 <OPENBL_CLASSICCAN_GetAddress>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b1f      	cmp	r3, #31
 80055a4:	d103      	bne.n	80055ae <OPENBL_CLASSICCAN_ReadMemory+0x2e>
      OPENBL_CLASSICCAN_SendByte(NACK_BYTE);
 80055a6:	201f      	movs	r0, #31
 80055a8:	f7fb f908 	bl	80007bc <OPENBL_CLASSICCAN_SendByte>
}
 80055ac:	e05e      	b.n	800566c <OPENBL_CLASSICCAN_ReadMemory+0xec>
      OPENBL_CLASSICCAN_SendByte(ACK_BYTE);
 80055ae:	2079      	movs	r0, #121	@ 0x79
 80055b0:	f7fb f904 	bl	80007bc <OPENBL_CLASSICCAN_SendByte>
      number_of_bytes = (uint32_t)_RxData[4] + 1U;
 80055b4:	4b2f      	ldr	r3, [pc, #188]	@ (8005674 <OPENBL_CLASSICCAN_ReadMemory+0xf4>)
 80055b6:	791b      	ldrb	r3, [r3, #4]
 80055b8:	3301      	adds	r3, #1
 80055ba:	613b      	str	r3, [r7, #16]
      count  = number_of_bytes / CLASSICCAN_MAX_PAYLOAD_BYTES;
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	08db      	lsrs	r3, r3, #3
 80055c0:	61bb      	str	r3, [r7, #24]
      single = (uint32_t)(number_of_bytes % CLASSICCAN_MAX_PAYLOAD_BYTES);
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	f003 0307 	and.w	r3, r3, #7
 80055c8:	60fb      	str	r3, [r7, #12]
      memory_index = OPENBL_MEM_GetMemoryIndex(address);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f000 fadb 	bl	8005b88 <OPENBL_MEM_GetMemoryIndex>
 80055d2:	60b8      	str	r0, [r7, #8]
      while (count != 0U)
 80055d4:	e021      	b.n	800561a <OPENBL_CLASSICCAN_ReadMemory+0x9a>
        data_length = 0;
 80055d6:	2300      	movs	r3, #0
 80055d8:	75fb      	strb	r3, [r7, #23]
        for (counter = CLASSICCAN_MAX_PAYLOAD_BYTES ; counter > 0U; counter--)
 80055da:	2308      	movs	r3, #8
 80055dc:	61fb      	str	r3, [r7, #28]
 80055de:	e012      	b.n	8005606 <OPENBL_CLASSICCAN_ReadMemory+0x86>
          _TxData[data_length] = OPENBL_MEM_Read(address, memory_index);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	7dfc      	ldrb	r4, [r7, #23]
 80055e4:	68b9      	ldr	r1, [r7, #8]
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 fb00 	bl	8005bec <OPENBL_MEM_Read>
 80055ec:	4603      	mov	r3, r0
 80055ee:	461a      	mov	r2, r3
 80055f0:	4b21      	ldr	r3, [pc, #132]	@ (8005678 <OPENBL_CLASSICCAN_ReadMemory+0xf8>)
 80055f2:	551a      	strb	r2, [r3, r4]
          data_length++;
 80055f4:	7dfb      	ldrb	r3, [r7, #23]
 80055f6:	3301      	adds	r3, #1
 80055f8:	75fb      	strb	r3, [r7, #23]
          address++;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	3301      	adds	r3, #1
 80055fe:	607b      	str	r3, [r7, #4]
        for (counter = CLASSICCAN_MAX_PAYLOAD_BYTES ; counter > 0U; counter--)
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	3b01      	subs	r3, #1
 8005604:	61fb      	str	r3, [r7, #28]
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1e9      	bne.n	80055e0 <OPENBL_CLASSICCAN_ReadMemory+0x60>
        OPENBL_CLASSICCAN_SendBytes(_TxData, CLASSICCAN_MAX_PAYLOAD_BYTES);
 800560c:	2108      	movs	r1, #8
 800560e:	481a      	ldr	r0, [pc, #104]	@ (8005678 <OPENBL_CLASSICCAN_ReadMemory+0xf8>)
 8005610:	f7fb f902 	bl	8000818 <OPENBL_CLASSICCAN_SendBytes>
        count--;
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	3b01      	subs	r3, #1
 8005618:	61bb      	str	r3, [r7, #24]
      while (count != 0U)
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1da      	bne.n	80055d6 <OPENBL_CLASSICCAN_ReadMemory+0x56>
      if (single != 0U)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d01f      	beq.n	8005666 <OPENBL_CLASSICCAN_ReadMemory+0xe6>
        data_length = 0U;
 8005626:	2300      	movs	r3, #0
 8005628:	75fb      	strb	r3, [r7, #23]
        for (counter = single ; counter > 0U; counter--)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	61fb      	str	r3, [r7, #28]
 800562e:	e012      	b.n	8005656 <OPENBL_CLASSICCAN_ReadMemory+0xd6>
          _TxData[data_length] = OPENBL_MEM_Read(address, memory_index);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	7dfc      	ldrb	r4, [r7, #23]
 8005634:	68b9      	ldr	r1, [r7, #8]
 8005636:	4618      	mov	r0, r3
 8005638:	f000 fad8 	bl	8005bec <OPENBL_MEM_Read>
 800563c:	4603      	mov	r3, r0
 800563e:	461a      	mov	r2, r3
 8005640:	4b0d      	ldr	r3, [pc, #52]	@ (8005678 <OPENBL_CLASSICCAN_ReadMemory+0xf8>)
 8005642:	551a      	strb	r2, [r3, r4]
          data_length++;
 8005644:	7dfb      	ldrb	r3, [r7, #23]
 8005646:	3301      	adds	r3, #1
 8005648:	75fb      	strb	r3, [r7, #23]
          address++;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	3301      	adds	r3, #1
 800564e:	607b      	str	r3, [r7, #4]
        for (counter = single ; counter > 0U; counter--)
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	3b01      	subs	r3, #1
 8005654:	61fb      	str	r3, [r7, #28]
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1e9      	bne.n	8005630 <OPENBL_CLASSICCAN_ReadMemory+0xb0>
        OPENBL_CLASSICCAN_SendBytes(_TxData, data_length);
 800565c:	7dfb      	ldrb	r3, [r7, #23]
 800565e:	4619      	mov	r1, r3
 8005660:	4805      	ldr	r0, [pc, #20]	@ (8005678 <OPENBL_CLASSICCAN_ReadMemory+0xf8>)
 8005662:	f7fb f8d9 	bl	8000818 <OPENBL_CLASSICCAN_SendBytes>
      OPENBL_CLASSICCAN_SendByte(ACK_BYTE);
 8005666:	2079      	movs	r0, #121	@ 0x79
 8005668:	f7fb f8a8 	bl	80007bc <OPENBL_CLASSICCAN_SendByte>
}
 800566c:	bf00      	nop
 800566e:	3724      	adds	r7, #36	@ 0x24
 8005670:	46bd      	mov	sp, r7
 8005672:	bd90      	pop	{r4, r7, pc}
 8005674:	200007ac 	.word	0x200007ac
 8005678:	20000328 	.word	0x20000328

0800567c <OPENBL_CLASSICCAN_WriteMemory>:
/**
  * @brief  This function is used to write in to device memory.
  * @retval None.
  */
static void OPENBL_CLASSICCAN_WriteMemory(void)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b088      	sub	sp, #32
 8005680:	af00      	add	r7, sp, #0
  uint32_t single;
  uint32_t mem_area;
  uint8_t data_length;

  /* Check memory protection then send adequate response */
  if (OPENBL_MEM_GetReadOutProtectionStatus() != RESET)
 8005682:	f000 fb24 	bl	8005cce <OPENBL_MEM_GetReadOutProtectionStatus>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d003      	beq.n	8005694 <OPENBL_CLASSICCAN_WriteMemory+0x18>
  {
    OPENBL_CLASSICCAN_SendByte(NACK_BYTE);
 800568c:	201f      	movs	r0, #31
 800568e:	f7fb f895 	bl	80007bc <OPENBL_CLASSICCAN_SendByte>
        /* Launch Option Bytes reload */
        OPENBL_MEM_OptionBytesLaunch();
      }
    }
  }
}
 8005692:	e056      	b.n	8005742 <OPENBL_CLASSICCAN_WriteMemory+0xc6>
    if (OPENBL_CLASSICCAN_GetAddress(&address) == NACK_BYTE)
 8005694:	f107 0308 	add.w	r3, r7, #8
 8005698:	4618      	mov	r0, r3
 800569a:	f000 f979 	bl	8005990 <OPENBL_CLASSICCAN_GetAddress>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b1f      	cmp	r3, #31
 80056a2:	d103      	bne.n	80056ac <OPENBL_CLASSICCAN_WriteMemory+0x30>
      OPENBL_CLASSICCAN_SendByte(NACK_BYTE);
 80056a4:	201f      	movs	r0, #31
 80056a6:	f7fb f889 	bl	80007bc <OPENBL_CLASSICCAN_SendByte>
}
 80056aa:	e04a      	b.n	8005742 <OPENBL_CLASSICCAN_WriteMemory+0xc6>
      OPENBL_CLASSICCAN_SendByte(ACK_BYTE);
 80056ac:	2079      	movs	r0, #121	@ 0x79
 80056ae:	f7fb f885 	bl	80007bc <OPENBL_CLASSICCAN_SendByte>
      CodeSize = (uint32_t)_RxData[4] + 1U;
 80056b2:	4b26      	ldr	r3, [pc, #152]	@ (800574c <OPENBL_CLASSICCAN_WriteMemory+0xd0>)
 80056b4:	791b      	ldrb	r3, [r3, #4]
 80056b6:	3301      	adds	r3, #1
 80056b8:	61bb      	str	r3, [r7, #24]
      count = CodeSize / CLASSICCAN_MAX_PAYLOAD_BYTES;
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	08db      	lsrs	r3, r3, #3
 80056be:	617b      	str	r3, [r7, #20]
      single = (uint32_t)(CodeSize % CLASSICCAN_MAX_PAYLOAD_BYTES);
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	f003 0307 	and.w	r3, r3, #7
 80056c6:	613b      	str	r3, [r7, #16]
      data_length = 0;
 80056c8:	2300      	movs	r3, #0
 80056ca:	77fb      	strb	r3, [r7, #31]
      if (count != 0U)
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d015      	beq.n	80056fe <OPENBL_CLASSICCAN_WriteMemory+0x82>
        while (data_length != count)
 80056d2:	e010      	b.n	80056f6 <OPENBL_CLASSICCAN_WriteMemory+0x7a>
        	uint32_t numberofbytes=0;
 80056d4:	2300      	movs	r3, #0
 80056d6:	607b      	str	r3, [r7, #4]
          OPENBL_CLASSICCAN_ReadBytes(&_RxData[data_length * CLASSICCAN_MAX_PAYLOAD_BYTES], &numberofbytes);
 80056d8:	7ffb      	ldrb	r3, [r7, #31]
 80056da:	00db      	lsls	r3, r3, #3
 80056dc:	4a1b      	ldr	r2, [pc, #108]	@ (800574c <OPENBL_CLASSICCAN_WriteMemory+0xd0>)
 80056de:	4413      	add	r3, r2
 80056e0:	1d3a      	adds	r2, r7, #4
 80056e2:	4611      	mov	r1, r2
 80056e4:	4618      	mov	r0, r3
 80056e6:	f7fb f847 	bl	8000778 <OPENBL_CLASSICCAN_ReadBytes>
          data_length++;
 80056ea:	7ffb      	ldrb	r3, [r7, #31]
 80056ec:	3301      	adds	r3, #1
 80056ee:	77fb      	strb	r3, [r7, #31]
          OPENBL_CLASSICCAN_SendByte(ACK_BYTE);//maybe we need to ack each message
 80056f0:	2079      	movs	r0, #121	@ 0x79
 80056f2:	f7fb f863 	bl	80007bc <OPENBL_CLASSICCAN_SendByte>
        while (data_length != count)
 80056f6:	7ffb      	ldrb	r3, [r7, #31]
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d1ea      	bne.n	80056d4 <OPENBL_CLASSICCAN_WriteMemory+0x58>
      if (single != 0U)
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00b      	beq.n	800571c <OPENBL_CLASSICCAN_WriteMemory+0xa0>
    	uint32_t numberofbytes=0;
 8005704:	2300      	movs	r3, #0
 8005706:	603b      	str	r3, [r7, #0]
        OPENBL_CLASSICCAN_ReadBytes(&_RxData[(CodeSize - single)], &numberofbytes);
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	4a0f      	ldr	r2, [pc, #60]	@ (800574c <OPENBL_CLASSICCAN_WriteMemory+0xd0>)
 8005710:	4413      	add	r3, r2
 8005712:	463a      	mov	r2, r7
 8005714:	4611      	mov	r1, r2
 8005716:	4618      	mov	r0, r3
 8005718:	f7fb f82e 	bl	8000778 <OPENBL_CLASSICCAN_ReadBytes>
      OPENBL_MEM_Write(address, (uint8_t *)_RxData, CodeSize);
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	69ba      	ldr	r2, [r7, #24]
 8005720:	490a      	ldr	r1, [pc, #40]	@ (800574c <OPENBL_CLASSICCAN_WriteMemory+0xd0>)
 8005722:	4618      	mov	r0, r3
 8005724:	f000 fa92 	bl	8005c4c <OPENBL_MEM_Write>
      OPENBL_CLASSICCAN_SendByte(ACK_BYTE);
 8005728:	2079      	movs	r0, #121	@ 0x79
 800572a:	f7fb f847 	bl	80007bc <OPENBL_CLASSICCAN_SendByte>
      mem_area = OPENBL_MEM_GetAddressArea(address);
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	4618      	mov	r0, r3
 8005732:	f000 f9eb 	bl	8005b0c <OPENBL_MEM_GetAddressArea>
 8005736:	60f8      	str	r0, [r7, #12]
      if (mem_area == OB_AREA)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2b03      	cmp	r3, #3
 800573c:	d101      	bne.n	8005742 <OPENBL_CLASSICCAN_WriteMemory+0xc6>
        OPENBL_MEM_OptionBytesLaunch();
 800573e:	f000 fb89 	bl	8005e54 <OPENBL_MEM_OptionBytesLaunch>
}
 8005742:	bf00      	nop
 8005744:	3720      	adds	r7, #32
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	200007ac 	.word	0x200007ac

08005750 <OPENBL_CLASSICCAN_Go>:
/**
  * @brief  This function is used to jump to the user application.
  * @retval None.
  */
static void OPENBL_CLASSICCAN_Go(void)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
  uint32_t address;
  uint32_t mem_area;

  /* Check memory protection then send adequate response */
  if (OPENBL_MEM_GetReadOutProtectionStatus() != RESET)
 8005756:	f000 faba 	bl	8005cce <OPENBL_MEM_GetReadOutProtectionStatus>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d003      	beq.n	8005768 <OPENBL_CLASSICCAN_Go+0x18>
  {
    OPENBL_CLASSICCAN_SendByte(NACK_BYTE);
 8005760:	201f      	movs	r0, #31
 8005762:	f7fb f82b 	bl	80007bc <OPENBL_CLASSICCAN_SendByte>

        OPENBL_MEM_JumpToAddress(address);
      }
    }
  }
}
 8005766:	e023      	b.n	80057b0 <OPENBL_CLASSICCAN_Go+0x60>
    OPENBL_CLASSICCAN_SendByte(ACK_BYTE);
 8005768:	2079      	movs	r0, #121	@ 0x79
 800576a:	f7fb f827 	bl	80007bc <OPENBL_CLASSICCAN_SendByte>
    if (OPENBL_CLASSICCAN_GetAddress(&address) == NACK_BYTE)
 800576e:	463b      	mov	r3, r7
 8005770:	4618      	mov	r0, r3
 8005772:	f000 f90d 	bl	8005990 <OPENBL_CLASSICCAN_GetAddress>
 8005776:	4603      	mov	r3, r0
 8005778:	2b1f      	cmp	r3, #31
 800577a:	d103      	bne.n	8005784 <OPENBL_CLASSICCAN_Go+0x34>
      OPENBL_CLASSICCAN_SendByte(NACK_BYTE);
 800577c:	201f      	movs	r0, #31
 800577e:	f7fb f81d 	bl	80007bc <OPENBL_CLASSICCAN_SendByte>
}
 8005782:	e015      	b.n	80057b0 <OPENBL_CLASSICCAN_Go+0x60>
      mem_area = OPENBL_MEM_GetAddressArea(address);
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	4618      	mov	r0, r3
 8005788:	f000 f9c0 	bl	8005b0c <OPENBL_MEM_GetAddressArea>
 800578c:	6078      	str	r0, [r7, #4]
      if ((mem_area != FLASH_AREA) && (mem_area != RAM_AREA))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d006      	beq.n	80057a2 <OPENBL_CLASSICCAN_Go+0x52>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b02      	cmp	r3, #2
 8005798:	d003      	beq.n	80057a2 <OPENBL_CLASSICCAN_Go+0x52>
        OPENBL_CLASSICCAN_SendByte(NACK_BYTE);
 800579a:	201f      	movs	r0, #31
 800579c:	f7fb f80e 	bl	80007bc <OPENBL_CLASSICCAN_SendByte>
}
 80057a0:	e006      	b.n	80057b0 <OPENBL_CLASSICCAN_Go+0x60>
        OPENBL_CLASSICCAN_SendByte(ACK_BYTE);
 80057a2:	2079      	movs	r0, #121	@ 0x79
 80057a4:	f7fb f80a 	bl	80007bc <OPENBL_CLASSICCAN_SendByte>
        OPENBL_MEM_JumpToAddress(address);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	4618      	mov	r0, r3
 80057ac:	f000 fada 	bl	8005d64 <OPENBL_MEM_JumpToAddress>
}
 80057b0:	bf00      	nop
 80057b2:	3708      	adds	r7, #8
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <OPENBL_CLASSICCAN_ReadoutProtect>:
/**
 * @brief  This function is used to enable readout protection.
 * @retval None.
 */
static void OPENBL_CLASSICCAN_ReadoutProtect(void)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	af00      	add	r7, sp, #0
  /* Check memory protection then send adequate response */
  if (OPENBL_MEM_GetReadOutProtectionStatus() != RESET)
 80057bc:	f000 fa87 	bl	8005cce <OPENBL_MEM_GetReadOutProtectionStatus>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d003      	beq.n	80057ce <OPENBL_CLASSICCAN_ReadoutProtect+0x16>
  {
    OPENBL_CLASSICCAN_SendByte(NACK_BYTE);
 80057c6:	201f      	movs	r0, #31
 80057c8:	f7fa fff8 	bl	80007bc <OPENBL_CLASSICCAN_SendByte>
    OPENBL_CLASSICCAN_SendByte(ACK_BYTE);

    /* Launch Option Bytes reload */
    OPENBL_MEM_OptionBytesLaunch();
  }
}
 80057cc:	e00a      	b.n	80057e4 <OPENBL_CLASSICCAN_ReadoutProtect+0x2c>
    OPENBL_CLASSICCAN_SendByte(ACK_BYTE);
 80057ce:	2079      	movs	r0, #121	@ 0x79
 80057d0:	f7fa fff4 	bl	80007bc <OPENBL_CLASSICCAN_SendByte>
    OPENBL_MEM_SetReadOutProtection(ENABLE);
 80057d4:	2001      	movs	r0, #1
 80057d6:	f000 fa67 	bl	8005ca8 <OPENBL_MEM_SetReadOutProtection>
    OPENBL_CLASSICCAN_SendByte(ACK_BYTE);
 80057da:	2079      	movs	r0, #121	@ 0x79
 80057dc:	f7fa ffee 	bl	80007bc <OPENBL_CLASSICCAN_SendByte>
    OPENBL_MEM_OptionBytesLaunch();
 80057e0:	f000 fb38 	bl	8005e54 <OPENBL_MEM_OptionBytesLaunch>
}
 80057e4:	bf00      	nop
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <OPENBL_CLASSICCAN_ReadoutUnprotect>:
/**
 * @brief  This function is used to disable readout protection.
 * @retval None.
 */
static void OPENBL_CLASSICCAN_ReadoutUnprotect(void)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	af00      	add	r7, sp, #0
  OPENBL_CLASSICCAN_SendByte(ACK_BYTE);
 80057ec:	2079      	movs	r0, #121	@ 0x79
 80057ee:	f7fa ffe5 	bl	80007bc <OPENBL_CLASSICCAN_SendByte>

  /* Once the option bytes modification start bit is set in FLASH CR register,
     all the RAM is erased, this causes the erase of the Open Bootloader RAM.
     This is why the last ACK is sent before the call of OPENBL_MEM_SetReadOutProtection */
  OPENBL_CLASSICCAN_SendByte(ACK_BYTE);
 80057f2:	2079      	movs	r0, #121	@ 0x79
 80057f4:	f7fa ffe2 	bl	80007bc <OPENBL_CLASSICCAN_SendByte>

  /* Disable the read protection */
  OPENBL_MEM_SetReadOutProtection(DISABLE);
 80057f8:	2000      	movs	r0, #0
 80057fa:	f000 fa55 	bl	8005ca8 <OPENBL_MEM_SetReadOutProtection>

  /* Launch Option Bytes reload and reset system */
  OPENBL_MEM_OptionBytesLaunch();
 80057fe:	f000 fb29 	bl	8005e54 <OPENBL_MEM_OptionBytesLaunch>
}
 8005802:	bf00      	nop
 8005804:	bd80      	pop	{r7, pc}
	...

08005808 <OPENBL_CLASSICCAN_EraseMemory>:
/**
 * @brief  This function is used to erase a memory.
 * @retval None.
 */
static void OPENBL_CLASSICCAN_EraseMemory(void)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b088      	sub	sp, #32
 800580c:	af00      	add	r7, sp, #0
  uint8_t status = ACK_BYTE;
 800580e:	2379      	movs	r3, #121	@ 0x79
 8005810:	77fb      	strb	r3, [r7, #31]
  ErrorStatus error_value;
  uint16_t *uint16_casted_p_RxData=(uint16_t*)_RxData;
 8005812:	4b36      	ldr	r3, [pc, #216]	@ (80058ec <OPENBL_CLASSICCAN_EraseMemory+0xe4>)
 8005814:	617b      	str	r3, [r7, #20]
  uint8_t canbusBuffer[CLASSICCAN_MAX_PAYLOAD_BYTES]={0};
 8005816:	2300      	movs	r3, #0
 8005818:	60bb      	str	r3, [r7, #8]
 800581a:	2300      	movs	r3, #0
 800581c:	60fb      	str	r3, [r7, #12]
  uint32_t numberofbytes=0;
 800581e:	2300      	movs	r3, #0
 8005820:	607b      	str	r3, [r7, #4]
  uint16_t numberofpagestobereceived=0;
 8005822:	2300      	movs	r3, #0
 8005824:	827b      	strh	r3, [r7, #18]
  uint16_t numberoreceivedpages=0;
 8005826:	2300      	movs	r3, #0
 8005828:	83bb      	strh	r3, [r7, #28]

  /* Check if the memory is protected or not */
  if (OPENBL_MEM_GetReadOutProtectionStatus() != RESET)
 800582a:	f000 fa50 	bl	8005cce <OPENBL_MEM_GetReadOutProtectionStatus>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d003      	beq.n	800583c <OPENBL_CLASSICCAN_EraseMemory+0x34>
  {
    OPENBL_CLASSICCAN_SendByte(NACK_BYTE);
 8005834:	201f      	movs	r0, #31
 8005836:	f7fa ffc1 	bl	80007bc <OPENBL_CLASSICCAN_SendByte>
    }


    OPENBL_CLASSICCAN_SendByte(status);
  }
}
 800583a:	e053      	b.n	80058e4 <OPENBL_CLASSICCAN_EraseMemory+0xdc>
    OPENBL_CLASSICCAN_SendByte(ACK_BYTE);
 800583c:	2079      	movs	r0, #121	@ 0x79
 800583e:	f7fa ffbd 	bl	80007bc <OPENBL_CLASSICCAN_SendByte>
    numberofpagestobereceived=uint16_casted_p_RxData[0]+1;//from index to ammmount
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	881b      	ldrh	r3, [r3, #0]
 8005846:	3301      	adds	r3, #1
 8005848:	827b      	strh	r3, [r7, #18]
    if (( numberofpagestobereceived & 0xFFF0U) == 0xFFF0U){
 800584a:	8a7a      	ldrh	r2, [r7, #18]
 800584c:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8005850:	4013      	ands	r3, r2
 8005852:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8005856:	4293      	cmp	r3, r2
 8005858:	d102      	bne.n	8005860 <OPENBL_CLASSICCAN_EraseMemory+0x58>
        status = NACK_BYTE;
 800585a:	231f      	movs	r3, #31
 800585c:	77fb      	strb	r3, [r7, #31]
 800585e:	e03d      	b.n	80058dc <OPENBL_CLASSICCAN_EraseMemory+0xd4>
      OPENBL_CLASSICCAN_SendByte(ACK_BYTE);
 8005860:	2079      	movs	r0, #121	@ 0x79
 8005862:	f7fa ffab 	bl	80007bc <OPENBL_CLASSICCAN_SendByte>
      while(numberoreceivedpages<numberofpagestobereceived){
 8005866:	e023      	b.n	80058b0 <OPENBL_CLASSICCAN_EraseMemory+0xa8>
    	  OPENBL_CLASSICCAN_ReadBytes(canbusBuffer, &numberofbytes);
 8005868:	1d3a      	adds	r2, r7, #4
 800586a:	f107 0308 	add.w	r3, r7, #8
 800586e:	4611      	mov	r1, r2
 8005870:	4618      	mov	r0, r3
 8005872:	f7fa ff81 	bl	8000778 <OPENBL_CLASSICCAN_ReadBytes>
			  for (uint16_t i = 0; i < numberofbytes; i++) {
 8005876:	2300      	movs	r3, #0
 8005878:	837b      	strh	r3, [r7, #26]
 800587a:	e011      	b.n	80058a0 <OPENBL_CLASSICCAN_EraseMemory+0x98>
				  uint16_casted_p_RxData[numberoreceivedpages+1]=canbusBuffer[i];
 800587c:	8b7b      	ldrh	r3, [r7, #26]
 800587e:	3320      	adds	r3, #32
 8005880:	443b      	add	r3, r7
 8005882:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 8005886:	8bbb      	ldrh	r3, [r7, #28]
 8005888:	3301      	adds	r3, #1
 800588a:	005b      	lsls	r3, r3, #1
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	4413      	add	r3, r2
 8005890:	460a      	mov	r2, r1
 8005892:	801a      	strh	r2, [r3, #0]
				  numberoreceivedpages++;
 8005894:	8bbb      	ldrh	r3, [r7, #28]
 8005896:	3301      	adds	r3, #1
 8005898:	83bb      	strh	r3, [r7, #28]
			  for (uint16_t i = 0; i < numberofbytes; i++) {
 800589a:	8b7b      	ldrh	r3, [r7, #26]
 800589c:	3301      	adds	r3, #1
 800589e:	837b      	strh	r3, [r7, #26]
 80058a0:	8b7a      	ldrh	r2, [r7, #26]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d3e9      	bcc.n	800587c <OPENBL_CLASSICCAN_EraseMemory+0x74>
    	  OPENBL_CLASSICCAN_SendByte(status);//ACK every received ERASE CANBUS PAGES canbus message 0x43
 80058a8:	7ffb      	ldrb	r3, [r7, #31]
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7fa ff86 	bl	80007bc <OPENBL_CLASSICCAN_SendByte>
      while(numberoreceivedpages<numberofpagestobereceived){
 80058b0:	8bba      	ldrh	r2, [r7, #28]
 80058b2:	8a7b      	ldrh	r3, [r7, #18]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d3d7      	bcc.n	8005868 <OPENBL_CLASSICCAN_EraseMemory+0x60>
      uint16_casted_p_RxData[0]=numberoreceivedpages;
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	8bba      	ldrh	r2, [r7, #28]
 80058bc:	801a      	strh	r2, [r3, #0]
      error_value = OPENBL_MEM_Erase(FLASH_START_ADDRESS, _RxData, numberoreceivedpages*2);
 80058be:	8bbb      	ldrh	r3, [r7, #28]
 80058c0:	005b      	lsls	r3, r3, #1
 80058c2:	461a      	mov	r2, r3
 80058c4:	4909      	ldr	r1, [pc, #36]	@ (80058ec <OPENBL_CLASSICCAN_EraseMemory+0xe4>)
 80058c6:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 80058ca:	f000 fa8d 	bl	8005de8 <OPENBL_MEM_Erase>
 80058ce:	4603      	mov	r3, r0
 80058d0:	747b      	strb	r3, [r7, #17]
      if (error_value == SUCCESS)
 80058d2:	7c7b      	ldrb	r3, [r7, #17]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d101      	bne.n	80058dc <OPENBL_CLASSICCAN_EraseMemory+0xd4>
        status = ACK_BYTE;
 80058d8:	2379      	movs	r3, #121	@ 0x79
 80058da:	77fb      	strb	r3, [r7, #31]
    OPENBL_CLASSICCAN_SendByte(status);
 80058dc:	7ffb      	ldrb	r3, [r7, #31]
 80058de:	4618      	mov	r0, r3
 80058e0:	f7fa ff6c 	bl	80007bc <OPENBL_CLASSICCAN_SendByte>
}
 80058e4:	bf00      	nop
 80058e6:	3720      	adds	r7, #32
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	200007ac 	.word	0x200007ac

080058f0 <OPENBL_CLASSICCAN_WriteProtect>:
/**
 * @brief  This function is used to enable write protect.
 * @retval None.
 */
static void OPENBL_CLASSICCAN_WriteProtect(void)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
  uint32_t length;
  ErrorStatus error_value;

  /* Check if the memory is protected or not */
  if (OPENBL_MEM_GetReadOutProtectionStatus() != RESET)
 80058f6:	f000 f9ea 	bl	8005cce <OPENBL_MEM_GetReadOutProtectionStatus>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d003      	beq.n	8005908 <OPENBL_CLASSICCAN_WriteProtect+0x18>
  {
    OPENBL_CLASSICCAN_SendByte(NACK_BYTE);
 8005900:	201f      	movs	r0, #31
 8005902:	f7fa ff5b 	bl	80007bc <OPENBL_CLASSICCAN_SendByte>
    if (error_value == SUCCESS)
    {
      OPENBL_MEM_OptionBytesLaunch();
    }
  }
}
 8005906:	e016      	b.n	8005936 <OPENBL_CLASSICCAN_WriteProtect+0x46>
    OPENBL_CLASSICCAN_SendByte(ACK_BYTE);
 8005908:	2079      	movs	r0, #121	@ 0x79
 800590a:	f7fa ff57 	bl	80007bc <OPENBL_CLASSICCAN_SendByte>
    length = _RxData[0];
 800590e:	4b0c      	ldr	r3, [pc, #48]	@ (8005940 <OPENBL_CLASSICCAN_WriteProtect+0x50>)
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	607b      	str	r3, [r7, #4]
    error_value = OPENBL_MEM_SetWriteProtection(ENABLE, FLASH_START_ADDRESS, (uint8_t *) &_RxData[1], length);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a0b      	ldr	r2, [pc, #44]	@ (8005944 <OPENBL_CLASSICCAN_WriteProtect+0x54>)
 8005918:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 800591c:	2001      	movs	r0, #1
 800591e:	f000 f9e9 	bl	8005cf4 <OPENBL_MEM_SetWriteProtection>
 8005922:	4603      	mov	r3, r0
 8005924:	70fb      	strb	r3, [r7, #3]
    OPENBL_CLASSICCAN_SendByte(ACK_BYTE);
 8005926:	2079      	movs	r0, #121	@ 0x79
 8005928:	f7fa ff48 	bl	80007bc <OPENBL_CLASSICCAN_SendByte>
    if (error_value == SUCCESS)
 800592c:	78fb      	ldrb	r3, [r7, #3]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d101      	bne.n	8005936 <OPENBL_CLASSICCAN_WriteProtect+0x46>
      OPENBL_MEM_OptionBytesLaunch();
 8005932:	f000 fa8f 	bl	8005e54 <OPENBL_MEM_OptionBytesLaunch>
}
 8005936:	bf00      	nop
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	200007ac 	.word	0x200007ac
 8005944:	200007ad 	.word	0x200007ad

08005948 <OPENBL_CLASSICCAN_WriteUnprotect>:
/**
 * @brief  This function is used to disable write protect.
 * @retval None.
 */
static void OPENBL_CLASSICCAN_WriteUnprotect(void)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
  ErrorStatus error_value;

  /* Check if the memory is not protected */
  if (OPENBL_MEM_GetReadOutProtectionStatus() != RESET)
 800594e:	f000 f9be 	bl	8005cce <OPENBL_MEM_GetReadOutProtectionStatus>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d003      	beq.n	8005960 <OPENBL_CLASSICCAN_WriteUnprotect+0x18>
  {
    OPENBL_CLASSICCAN_SendByte(NACK_BYTE);
 8005958:	201f      	movs	r0, #31
 800595a:	f7fa ff2f 	bl	80007bc <OPENBL_CLASSICCAN_SendByte>
    if (error_value == SUCCESS)
    {
      OPENBL_MEM_OptionBytesLaunch();
    }
  }
}
 800595e:	e013      	b.n	8005988 <OPENBL_CLASSICCAN_WriteUnprotect+0x40>
    OPENBL_CLASSICCAN_SendByte(ACK_BYTE);
 8005960:	2079      	movs	r0, #121	@ 0x79
 8005962:	f7fa ff2b 	bl	80007bc <OPENBL_CLASSICCAN_SendByte>
    error_value = OPENBL_MEM_SetWriteProtection(DISABLE, FLASH_START_ADDRESS, NULL, 0);
 8005966:	2300      	movs	r3, #0
 8005968:	2200      	movs	r2, #0
 800596a:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 800596e:	2000      	movs	r0, #0
 8005970:	f000 f9c0 	bl	8005cf4 <OPENBL_MEM_SetWriteProtection>
 8005974:	4603      	mov	r3, r0
 8005976:	71fb      	strb	r3, [r7, #7]
    OPENBL_CLASSICCAN_SendByte(ACK_BYTE);
 8005978:	2079      	movs	r0, #121	@ 0x79
 800597a:	f7fa ff1f 	bl	80007bc <OPENBL_CLASSICCAN_SendByte>
    if (error_value == SUCCESS)
 800597e:	79fb      	ldrb	r3, [r7, #7]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d101      	bne.n	8005988 <OPENBL_CLASSICCAN_WriteUnprotect+0x40>
      OPENBL_MEM_OptionBytesLaunch();
 8005984:	f000 fa66 	bl	8005e54 <OPENBL_MEM_OptionBytesLaunch>
}
 8005988:	bf00      	nop
 800598a:	3708      	adds	r7, #8
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <OPENBL_CLASSICCAN_GetAddress>:
/**
  * @brief  This function is used to get a valid address.
  * @retval Returns NACK status in case of error else returns ACK status.
  */
static uint8_t OPENBL_CLASSICCAN_GetAddress(uint32_t *Address)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  uint8_t status;

  *Address = (((((uint32_t) _RxData[0]) << 24)  |
 8005998:	4b10      	ldr	r3, [pc, #64]	@ (80059dc <OPENBL_CLASSICCAN_GetAddress+0x4c>)
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	061a      	lsls	r2, r3, #24
               (((uint32_t) _RxData[1]) << 16)  |
 800599e:	4b0f      	ldr	r3, [pc, #60]	@ (80059dc <OPENBL_CLASSICCAN_GetAddress+0x4c>)
 80059a0:	785b      	ldrb	r3, [r3, #1]
 80059a2:	041b      	lsls	r3, r3, #16
  *Address = (((((uint32_t) _RxData[0]) << 24)  |
 80059a4:	431a      	orrs	r2, r3
               (((uint32_t) _RxData[2]) << 8)   |
 80059a6:	4b0d      	ldr	r3, [pc, #52]	@ (80059dc <OPENBL_CLASSICCAN_GetAddress+0x4c>)
 80059a8:	789b      	ldrb	r3, [r3, #2]
 80059aa:	021b      	lsls	r3, r3, #8
               (((uint32_t) _RxData[1]) << 16)  |
 80059ac:	4313      	orrs	r3, r2
               (((uint32_t) _RxData[3]))));
 80059ae:	4a0b      	ldr	r2, [pc, #44]	@ (80059dc <OPENBL_CLASSICCAN_GetAddress+0x4c>)
 80059b0:	78d2      	ldrb	r2, [r2, #3]
               (((uint32_t) _RxData[2]) << 8)   |
 80059b2:	431a      	orrs	r2, r3
  *Address = (((((uint32_t) _RxData[0]) << 24)  |
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	601a      	str	r2, [r3, #0]

  /* Check if received address is valid or not */
  if (OPENBL_MEM_GetAddressArea(*Address) == AREA_ERROR)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4618      	mov	r0, r3
 80059be:	f000 f8a5 	bl	8005b0c <OPENBL_MEM_GetAddressArea>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d102      	bne.n	80059ce <OPENBL_CLASSICCAN_GetAddress+0x3e>
  {
    status = NACK_BYTE;
 80059c8:	231f      	movs	r3, #31
 80059ca:	73fb      	strb	r3, [r7, #15]
 80059cc:	e001      	b.n	80059d2 <OPENBL_CLASSICCAN_GetAddress+0x42>
  }
  else
  {
    status = ACK_BYTE;
 80059ce:	2379      	movs	r3, #121	@ 0x79
 80059d0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80059d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	200007ac 	.word	0x200007ac

080059e0 <OPENBL_MEM_RegisterMemory>:
  * @brief  This function is used to register memory interfaces in Open Bootloader MW.
  * @param  *Memory A pointer to the memory handle.
  * @return ErrorStatus Returns ERROR in case of no more space in the memories table else returns SUCCESS.
  */
ErrorStatus OPENBL_MEM_RegisterMemory(OPENBL_MemoryTypeDef *Memory)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80059e8:	2300      	movs	r3, #0
 80059ea:	73fb      	strb	r3, [r7, #15]

  if (NumberOfMemories < MEMORIES_SUPPORTED)
 80059ec:	4b45      	ldr	r3, [pc, #276]	@ (8005b04 <OPENBL_MEM_RegisterMemory+0x124>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2b06      	cmp	r3, #6
 80059f2:	d87d      	bhi.n	8005af0 <OPENBL_MEM_RegisterMemory+0x110>
  {
    a_MemoriesTable[NumberOfMemories].StartAddress      = Memory->StartAddress;
 80059f4:	4b43      	ldr	r3, [pc, #268]	@ (8005b04 <OPENBL_MEM_RegisterMemory+0x124>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	6812      	ldr	r2, [r2, #0]
 80059fc:	4942      	ldr	r1, [pc, #264]	@ (8005b08 <OPENBL_MEM_RegisterMemory+0x128>)
 80059fe:	202c      	movs	r0, #44	@ 0x2c
 8005a00:	fb00 f303 	mul.w	r3, r0, r3
 8005a04:	440b      	add	r3, r1
 8005a06:	601a      	str	r2, [r3, #0]
    a_MemoriesTable[NumberOfMemories].EndAddress        = Memory->EndAddress;
 8005a08:	4b3e      	ldr	r3, [pc, #248]	@ (8005b04 <OPENBL_MEM_RegisterMemory+0x124>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	6852      	ldr	r2, [r2, #4]
 8005a10:	493d      	ldr	r1, [pc, #244]	@ (8005b08 <OPENBL_MEM_RegisterMemory+0x128>)
 8005a12:	202c      	movs	r0, #44	@ 0x2c
 8005a14:	fb00 f303 	mul.w	r3, r0, r3
 8005a18:	440b      	add	r3, r1
 8005a1a:	3304      	adds	r3, #4
 8005a1c:	601a      	str	r2, [r3, #0]
    a_MemoriesTable[NumberOfMemories].Size              = Memory->Size;
 8005a1e:	4b39      	ldr	r3, [pc, #228]	@ (8005b04 <OPENBL_MEM_RegisterMemory+0x124>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	6892      	ldr	r2, [r2, #8]
 8005a26:	4938      	ldr	r1, [pc, #224]	@ (8005b08 <OPENBL_MEM_RegisterMemory+0x128>)
 8005a28:	202c      	movs	r0, #44	@ 0x2c
 8005a2a:	fb00 f303 	mul.w	r3, r0, r3
 8005a2e:	440b      	add	r3, r1
 8005a30:	3308      	adds	r3, #8
 8005a32:	601a      	str	r2, [r3, #0]
    a_MemoriesTable[NumberOfMemories].Type              = Memory->Type;
 8005a34:	4b33      	ldr	r3, [pc, #204]	@ (8005b04 <OPENBL_MEM_RegisterMemory+0x124>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	68d2      	ldr	r2, [r2, #12]
 8005a3c:	4932      	ldr	r1, [pc, #200]	@ (8005b08 <OPENBL_MEM_RegisterMemory+0x128>)
 8005a3e:	202c      	movs	r0, #44	@ 0x2c
 8005a40:	fb00 f303 	mul.w	r3, r0, r3
 8005a44:	440b      	add	r3, r1
 8005a46:	330c      	adds	r3, #12
 8005a48:	601a      	str	r2, [r3, #0]
    a_MemoriesTable[NumberOfMemories].Read              = Memory->Read;
 8005a4a:	4b2e      	ldr	r3, [pc, #184]	@ (8005b04 <OPENBL_MEM_RegisterMemory+0x124>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	6912      	ldr	r2, [r2, #16]
 8005a52:	492d      	ldr	r1, [pc, #180]	@ (8005b08 <OPENBL_MEM_RegisterMemory+0x128>)
 8005a54:	202c      	movs	r0, #44	@ 0x2c
 8005a56:	fb00 f303 	mul.w	r3, r0, r3
 8005a5a:	440b      	add	r3, r1
 8005a5c:	3310      	adds	r3, #16
 8005a5e:	601a      	str	r2, [r3, #0]
    a_MemoriesTable[NumberOfMemories].Write             = Memory->Write;
 8005a60:	4b28      	ldr	r3, [pc, #160]	@ (8005b04 <OPENBL_MEM_RegisterMemory+0x124>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	6952      	ldr	r2, [r2, #20]
 8005a68:	4927      	ldr	r1, [pc, #156]	@ (8005b08 <OPENBL_MEM_RegisterMemory+0x128>)
 8005a6a:	202c      	movs	r0, #44	@ 0x2c
 8005a6c:	fb00 f303 	mul.w	r3, r0, r3
 8005a70:	440b      	add	r3, r1
 8005a72:	3314      	adds	r3, #20
 8005a74:	601a      	str	r2, [r3, #0]
    a_MemoriesTable[NumberOfMemories].SetReadoutProtect = Memory->SetReadoutProtect;
 8005a76:	4b23      	ldr	r3, [pc, #140]	@ (8005b04 <OPENBL_MEM_RegisterMemory+0x124>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	6992      	ldr	r2, [r2, #24]
 8005a7e:	4922      	ldr	r1, [pc, #136]	@ (8005b08 <OPENBL_MEM_RegisterMemory+0x128>)
 8005a80:	202c      	movs	r0, #44	@ 0x2c
 8005a82:	fb00 f303 	mul.w	r3, r0, r3
 8005a86:	440b      	add	r3, r1
 8005a88:	3318      	adds	r3, #24
 8005a8a:	601a      	str	r2, [r3, #0]
    a_MemoriesTable[NumberOfMemories].SetWriteProtect   = Memory->SetWriteProtect;
 8005a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8005b04 <OPENBL_MEM_RegisterMemory+0x124>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	69d2      	ldr	r2, [r2, #28]
 8005a94:	491c      	ldr	r1, [pc, #112]	@ (8005b08 <OPENBL_MEM_RegisterMemory+0x128>)
 8005a96:	202c      	movs	r0, #44	@ 0x2c
 8005a98:	fb00 f303 	mul.w	r3, r0, r3
 8005a9c:	440b      	add	r3, r1
 8005a9e:	331c      	adds	r3, #28
 8005aa0:	601a      	str	r2, [r3, #0]
    a_MemoriesTable[NumberOfMemories].JumpToAddress     = Memory->JumpToAddress;
 8005aa2:	4b18      	ldr	r3, [pc, #96]	@ (8005b04 <OPENBL_MEM_RegisterMemory+0x124>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	6a12      	ldr	r2, [r2, #32]
 8005aaa:	4917      	ldr	r1, [pc, #92]	@ (8005b08 <OPENBL_MEM_RegisterMemory+0x128>)
 8005aac:	202c      	movs	r0, #44	@ 0x2c
 8005aae:	fb00 f303 	mul.w	r3, r0, r3
 8005ab2:	440b      	add	r3, r1
 8005ab4:	3320      	adds	r3, #32
 8005ab6:	601a      	str	r2, [r3, #0]
    a_MemoriesTable[NumberOfMemories].MassErase         = Memory->MassErase;
 8005ab8:	4b12      	ldr	r3, [pc, #72]	@ (8005b04 <OPENBL_MEM_RegisterMemory+0x124>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005ac0:	4911      	ldr	r1, [pc, #68]	@ (8005b08 <OPENBL_MEM_RegisterMemory+0x128>)
 8005ac2:	202c      	movs	r0, #44	@ 0x2c
 8005ac4:	fb00 f303 	mul.w	r3, r0, r3
 8005ac8:	440b      	add	r3, r1
 8005aca:	3324      	adds	r3, #36	@ 0x24
 8005acc:	601a      	str	r2, [r3, #0]
    a_MemoriesTable[NumberOfMemories].Erase             = Memory->Erase;
 8005ace:	4b0d      	ldr	r3, [pc, #52]	@ (8005b04 <OPENBL_MEM_RegisterMemory+0x124>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005ad6:	490c      	ldr	r1, [pc, #48]	@ (8005b08 <OPENBL_MEM_RegisterMemory+0x128>)
 8005ad8:	202c      	movs	r0, #44	@ 0x2c
 8005ada:	fb00 f303 	mul.w	r3, r0, r3
 8005ade:	440b      	add	r3, r1
 8005ae0:	3328      	adds	r3, #40	@ 0x28
 8005ae2:	601a      	str	r2, [r3, #0]

    NumberOfMemories++;
 8005ae4:	4b07      	ldr	r3, [pc, #28]	@ (8005b04 <OPENBL_MEM_RegisterMemory+0x124>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	4a06      	ldr	r2, [pc, #24]	@ (8005b04 <OPENBL_MEM_RegisterMemory+0x124>)
 8005aec:	6013      	str	r3, [r2, #0]
 8005aee:	e001      	b.n	8005af4 <OPENBL_MEM_RegisterMemory+0x114>
  }
  else
  {
    status = ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3714      	adds	r7, #20
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	20000c74 	.word	0x20000c74
 8005b08:	20000c78 	.word	0x20000c78

08005b0c <OPENBL_MEM_GetAddressArea>:
  * @param  Address The address to be checked.
  * @retval The address area: FLASH_AREA, RAM_AREA... if the address is valid
  *         or AREA_ERROR if the address is not valid.
  */
uint32_t OPENBL_MEM_GetAddressArea(uint32_t Address)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  uint32_t mem_area = AREA_ERROR;
 8005b14:	2300      	movs	r3, #0
 8005b16:	60fb      	str	r3, [r7, #12]
  uint32_t counter;

  for (counter = 0; counter < NumberOfMemories; counter++)
 8005b18:	2300      	movs	r3, #0
 8005b1a:	60bb      	str	r3, [r7, #8]
 8005b1c:	e023      	b.n	8005b66 <OPENBL_MEM_GetAddressArea+0x5a>
  {
    if ((Address >= a_MemoriesTable[counter].StartAddress) && (Address < a_MemoriesTable[counter].EndAddress))
 8005b1e:	4a18      	ldr	r2, [pc, #96]	@ (8005b80 <OPENBL_MEM_GetAddressArea+0x74>)
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	212c      	movs	r1, #44	@ 0x2c
 8005b24:	fb01 f303 	mul.w	r3, r1, r3
 8005b28:	4413      	add	r3, r2
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d314      	bcc.n	8005b5c <OPENBL_MEM_GetAddressArea+0x50>
 8005b32:	4a13      	ldr	r2, [pc, #76]	@ (8005b80 <OPENBL_MEM_GetAddressArea+0x74>)
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	212c      	movs	r1, #44	@ 0x2c
 8005b38:	fb01 f303 	mul.w	r3, r1, r3
 8005b3c:	4413      	add	r3, r2
 8005b3e:	3304      	adds	r3, #4
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d209      	bcs.n	8005b5c <OPENBL_MEM_GetAddressArea+0x50>
    {
      mem_area = a_MemoriesTable[counter].Type;
 8005b48:	4a0d      	ldr	r2, [pc, #52]	@ (8005b80 <OPENBL_MEM_GetAddressArea+0x74>)
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	212c      	movs	r1, #44	@ 0x2c
 8005b4e:	fb01 f303 	mul.w	r3, r1, r3
 8005b52:	4413      	add	r3, r2
 8005b54:	330c      	adds	r3, #12
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	60fb      	str	r3, [r7, #12]
      break;
 8005b5a:	e009      	b.n	8005b70 <OPENBL_MEM_GetAddressArea+0x64>
    }
    else
    {
      mem_area = AREA_ERROR;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	60fb      	str	r3, [r7, #12]
  for (counter = 0; counter < NumberOfMemories; counter++)
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	3301      	adds	r3, #1
 8005b64:	60bb      	str	r3, [r7, #8]
 8005b66:	4b07      	ldr	r3, [pc, #28]	@ (8005b84 <OPENBL_MEM_GetAddressArea+0x78>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68ba      	ldr	r2, [r7, #8]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d3d6      	bcc.n	8005b1e <OPENBL_MEM_GetAddressArea+0x12>
    }
  }

  return mem_area;
 8005b70:	68fb      	ldr	r3, [r7, #12]
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3714      	adds	r7, #20
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	20000c78 	.word	0x20000c78
 8005b84:	20000c74 	.word	0x20000c74

08005b88 <OPENBL_MEM_GetMemoryIndex>:
  * @brief  This function returns the index of the memory that matches the address given in parameter.
  * @param  Address This address is used determinate the index of the memory pointed by this address.
  * @return The index of the memory that corresponds to the address
  */
uint32_t OPENBL_MEM_GetMemoryIndex(uint32_t Address)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  uint32_t counter;

  for (counter = 0; counter < NumberOfMemories; counter++)
 8005b90:	2300      	movs	r3, #0
 8005b92:	60fb      	str	r3, [r7, #12]
 8005b94:	e017      	b.n	8005bc6 <OPENBL_MEM_GetMemoryIndex+0x3e>
  {
    if ((Address >= a_MemoriesTable[counter].StartAddress) && (Address < a_MemoriesTable[counter].EndAddress))
 8005b96:	4a13      	ldr	r2, [pc, #76]	@ (8005be4 <OPENBL_MEM_GetMemoryIndex+0x5c>)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	212c      	movs	r1, #44	@ 0x2c
 8005b9c:	fb01 f303 	mul.w	r3, r1, r3
 8005ba0:	4413      	add	r3, r2
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d30a      	bcc.n	8005bc0 <OPENBL_MEM_GetMemoryIndex+0x38>
 8005baa:	4a0e      	ldr	r2, [pc, #56]	@ (8005be4 <OPENBL_MEM_GetMemoryIndex+0x5c>)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	212c      	movs	r1, #44	@ 0x2c
 8005bb0:	fb01 f303 	mul.w	r3, r1, r3
 8005bb4:	4413      	add	r3, r2
 8005bb6:	3304      	adds	r3, #4
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d308      	bcc.n	8005bd2 <OPENBL_MEM_GetMemoryIndex+0x4a>
  for (counter = 0; counter < NumberOfMemories; counter++)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	60fb      	str	r3, [r7, #12]
 8005bc6:	4b08      	ldr	r3, [pc, #32]	@ (8005be8 <OPENBL_MEM_GetMemoryIndex+0x60>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d3e2      	bcc.n	8005b96 <OPENBL_MEM_GetMemoryIndex+0xe>
 8005bd0:	e000      	b.n	8005bd4 <OPENBL_MEM_GetMemoryIndex+0x4c>
    {
      break;
 8005bd2:	bf00      	nop
    }
  }

  return counter;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3714      	adds	r7, #20
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	20000c78 	.word	0x20000c78
 8005be8:	20000c74 	.word	0x20000c74

08005bec <OPENBL_MEM_Read>:
  * @param  Address The address that will be read.
  * @param  MemoryIndex The memory index of the memory interface that will be used to read from the given address.
  * @return Returns the read value.
  */
uint8_t OPENBL_MEM_Read(uint32_t Address, uint32_t MemoryIndex)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  uint8_t value;

  if (MemoryIndex < NumberOfMemories)
 8005bf6:	4b13      	ldr	r3, [pc, #76]	@ (8005c44 <OPENBL_MEM_Read+0x58>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d219      	bcs.n	8005c34 <OPENBL_MEM_Read+0x48>
  {
    if (a_MemoriesTable[MemoryIndex].Read != NULL)
 8005c00:	4a11      	ldr	r2, [pc, #68]	@ (8005c48 <OPENBL_MEM_Read+0x5c>)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	212c      	movs	r1, #44	@ 0x2c
 8005c06:	fb01 f303 	mul.w	r3, r1, r3
 8005c0a:	4413      	add	r3, r2
 8005c0c:	3310      	adds	r3, #16
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00c      	beq.n	8005c2e <OPENBL_MEM_Read+0x42>
    {
      value = a_MemoriesTable[MemoryIndex].Read(Address);
 8005c14:	4a0c      	ldr	r2, [pc, #48]	@ (8005c48 <OPENBL_MEM_Read+0x5c>)
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	212c      	movs	r1, #44	@ 0x2c
 8005c1a:	fb01 f303 	mul.w	r3, r1, r3
 8005c1e:	4413      	add	r3, r2
 8005c20:	3310      	adds	r3, #16
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	4798      	blx	r3
 8005c28:	4603      	mov	r3, r0
 8005c2a:	73fb      	strb	r3, [r7, #15]
 8005c2c:	e004      	b.n	8005c38 <OPENBL_MEM_Read+0x4c>
    }
    else
    {
      value = 0;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	73fb      	strb	r3, [r7, #15]
 8005c32:	e001      	b.n	8005c38 <OPENBL_MEM_Read+0x4c>
    }
  }
  else
  {
    value = 0;
 8005c34:	2300      	movs	r3, #0
 8005c36:	73fb      	strb	r3, [r7, #15]
  }

  return value;
 8005c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	20000c74 	.word	0x20000c74
 8005c48:	20000c78 	.word	0x20000c78

08005c4c <OPENBL_MEM_Write>:
  * @param  Data The data to be written.
  * @param  DataLength The length of the data to be written.
  * @retval None.
  */
void OPENBL_MEM_Write(uint32_t Address, uint8_t *Data, uint32_t DataLength)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b086      	sub	sp, #24
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
  uint32_t index;

  /* Get the memory index to know in which memory we will write */
  index = OPENBL_MEM_GetMemoryIndex(Address);
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f7ff ff95 	bl	8005b88 <OPENBL_MEM_GetMemoryIndex>
 8005c5e:	6178      	str	r0, [r7, #20]

  if (index < NumberOfMemories)
 8005c60:	4b0f      	ldr	r3, [pc, #60]	@ (8005ca0 <OPENBL_MEM_Write+0x54>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d215      	bcs.n	8005c96 <OPENBL_MEM_Write+0x4a>
  {
    if (a_MemoriesTable[index].Write != NULL)
 8005c6a:	4a0e      	ldr	r2, [pc, #56]	@ (8005ca4 <OPENBL_MEM_Write+0x58>)
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	212c      	movs	r1, #44	@ 0x2c
 8005c70:	fb01 f303 	mul.w	r3, r1, r3
 8005c74:	4413      	add	r3, r2
 8005c76:	3314      	adds	r3, #20
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00b      	beq.n	8005c96 <OPENBL_MEM_Write+0x4a>
    {
      a_MemoriesTable[index].Write(Address, Data, DataLength);
 8005c7e:	4a09      	ldr	r2, [pc, #36]	@ (8005ca4 <OPENBL_MEM_Write+0x58>)
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	212c      	movs	r1, #44	@ 0x2c
 8005c84:	fb01 f303 	mul.w	r3, r1, r3
 8005c88:	4413      	add	r3, r2
 8005c8a:	3314      	adds	r3, #20
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	68b9      	ldr	r1, [r7, #8]
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	4798      	blx	r3
    }
  }
}
 8005c96:	bf00      	nop
 8005c98:	3718      	adds	r7, #24
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	20000c74 	.word	0x20000c74
 8005ca4:	20000c78 	.word	0x20000c78

08005ca8 <OPENBL_MEM_SetReadOutProtection>:
  * @brief  Enables or disables the read out protection.
  * @param  State The readout protection state that will be set.
  * @retval None.
  */
void OPENBL_MEM_SetReadOutProtection(FunctionalState State)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	4603      	mov	r3, r0
 8005cb0:	71fb      	strb	r3, [r7, #7]
  if (State == ENABLE)
 8005cb2:	79fb      	ldrb	r3, [r7, #7]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d103      	bne.n	8005cc0 <OPENBL_MEM_SetReadOutProtection+0x18>
  {
    OPENBL_FLASH_SetReadOutProtectionLevel(RDP_LEVEL_1);
 8005cb8:	20bb      	movs	r0, #187	@ 0xbb
 8005cba:	f7fa fe6f 	bl	800099c <OPENBL_FLASH_SetReadOutProtectionLevel>
  }
  else
  {
    OPENBL_FLASH_SetReadOutProtectionLevel(RDP_LEVEL_0);
  }
}
 8005cbe:	e002      	b.n	8005cc6 <OPENBL_MEM_SetReadOutProtection+0x1e>
    OPENBL_FLASH_SetReadOutProtectionLevel(RDP_LEVEL_0);
 8005cc0:	20aa      	movs	r0, #170	@ 0xaa
 8005cc2:	f7fa fe6b 	bl	800099c <OPENBL_FLASH_SetReadOutProtectionLevel>
}
 8005cc6:	bf00      	nop
 8005cc8:	3708      	adds	r7, #8
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <OPENBL_MEM_GetReadOutProtectionStatus>:
/**
  * @brief  Checks whether the FLASH Read Out Protection Status is set or not.
  * @return Returns SET if readout protection is enabled else return RESET.
  */
FlagStatus OPENBL_MEM_GetReadOutProtectionStatus(void)
{
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b082      	sub	sp, #8
 8005cd2:	af00      	add	r7, sp, #0
  FlagStatus status;

  if (OPENBL_FLASH_GetReadOutProtectionLevel() != RDP_LEVEL_0)
 8005cd4:	f7fa fe55 	bl	8000982 <OPENBL_FLASH_GetReadOutProtectionLevel>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2baa      	cmp	r3, #170	@ 0xaa
 8005cdc:	d002      	beq.n	8005ce4 <OPENBL_MEM_GetReadOutProtectionStatus+0x16>
  {
    status = SET;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	71fb      	strb	r3, [r7, #7]
 8005ce2:	e001      	b.n	8005ce8 <OPENBL_MEM_GetReadOutProtectionStatus+0x1a>
  }
  else
  {
    status = RESET;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005ce8:	79fb      	ldrb	r3, [r7, #7]
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3708      	adds	r7, #8
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
	...

08005cf4 <OPENBL_MEM_SetWriteProtection>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Enable or disable of the write protection is done
  *          - ERROR:   Enable or disable of the write protection is not done
  */
ErrorStatus OPENBL_MEM_SetWriteProtection(FunctionalState State, uint32_t Address, uint8_t *Buffer, uint32_t Length)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b086      	sub	sp, #24
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60b9      	str	r1, [r7, #8]
 8005cfc:	607a      	str	r2, [r7, #4]
 8005cfe:	603b      	str	r3, [r7, #0]
 8005d00:	4603      	mov	r3, r0
 8005d02:	73fb      	strb	r3, [r7, #15]
  uint32_t index;
  ErrorStatus status = SUCCESS;
 8005d04:	2300      	movs	r3, #0
 8005d06:	75fb      	strb	r3, [r7, #23]

  /* Get the memory index to know in which memory we will write */
  index = OPENBL_MEM_GetMemoryIndex(Address);
 8005d08:	68b8      	ldr	r0, [r7, #8]
 8005d0a:	f7ff ff3d 	bl	8005b88 <OPENBL_MEM_GetMemoryIndex>
 8005d0e:	6138      	str	r0, [r7, #16]

  if (index < NumberOfMemories)
 8005d10:	4b12      	ldr	r3, [pc, #72]	@ (8005d5c <OPENBL_MEM_SetWriteProtection+0x68>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	693a      	ldr	r2, [r7, #16]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d219      	bcs.n	8005d4e <OPENBL_MEM_SetWriteProtection+0x5a>
  {
    if (a_MemoriesTable[index].SetWriteProtect != NULL)
 8005d1a:	4a11      	ldr	r2, [pc, #68]	@ (8005d60 <OPENBL_MEM_SetWriteProtection+0x6c>)
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	212c      	movs	r1, #44	@ 0x2c
 8005d20:	fb01 f303 	mul.w	r3, r1, r3
 8005d24:	4413      	add	r3, r2
 8005d26:	331c      	adds	r3, #28
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00c      	beq.n	8005d48 <OPENBL_MEM_SetWriteProtection+0x54>
    {
      a_MemoriesTable[index].SetWriteProtect(State, Buffer, Length);
 8005d2e:	4a0c      	ldr	r2, [pc, #48]	@ (8005d60 <OPENBL_MEM_SetWriteProtection+0x6c>)
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	212c      	movs	r1, #44	@ 0x2c
 8005d34:	fb01 f303 	mul.w	r3, r1, r3
 8005d38:	4413      	add	r3, r2
 8005d3a:	331c      	adds	r3, #28
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	7bf8      	ldrb	r0, [r7, #15]
 8005d40:	683a      	ldr	r2, [r7, #0]
 8005d42:	6879      	ldr	r1, [r7, #4]
 8005d44:	4798      	blx	r3
 8005d46:	e004      	b.n	8005d52 <OPENBL_MEM_SetWriteProtection+0x5e>
    }
    else
    {
      status = ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	75fb      	strb	r3, [r7, #23]
 8005d4c:	e001      	b.n	8005d52 <OPENBL_MEM_SetWriteProtection+0x5e>
    }
  }
  else
  {
    status = ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3718      	adds	r7, #24
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	20000c74 	.word	0x20000c74
 8005d60:	20000c78 	.word	0x20000c78

08005d64 <OPENBL_MEM_JumpToAddress>:
  * @brief  This function is used to jump to an address of an application.
  * @param  Address User application address.
  * @retval None.
  */
void OPENBL_MEM_JumpToAddress(uint32_t Address)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  OPENBL_FLASH_JumpToAddress(Address);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f7fa fdf1 	bl	8000954 <OPENBL_FLASH_JumpToAddress>
}
 8005d72:	bf00      	nop
 8005d74:	3708      	adds	r7, #8
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
	...

08005d7c <OPENBL_MEM_MassErase>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Mass erase operation done
  *          - ERROR:   Mass erase operation failed or one parameter is invalid
 */
ErrorStatus OPENBL_MEM_MassErase(uint32_t Address, uint8_t *p_Data, uint32_t DataLength)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b086      	sub	sp, #24
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
  uint32_t memory_index;
  ErrorStatus status;

  /* Get the memory index to know from which memory interface we will used */
  memory_index = OPENBL_MEM_GetMemoryIndex(Address);
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f7ff fefd 	bl	8005b88 <OPENBL_MEM_GetMemoryIndex>
 8005d8e:	6138      	str	r0, [r7, #16]

  if (memory_index < NumberOfMemories)
 8005d90:	4b13      	ldr	r3, [pc, #76]	@ (8005de0 <OPENBL_MEM_MassErase+0x64>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d21a      	bcs.n	8005dd0 <OPENBL_MEM_MassErase+0x54>
  {
    if (a_MemoriesTable[memory_index].MassErase != NULL)
 8005d9a:	4a12      	ldr	r2, [pc, #72]	@ (8005de4 <OPENBL_MEM_MassErase+0x68>)
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	212c      	movs	r1, #44	@ 0x2c
 8005da0:	fb01 f303 	mul.w	r3, r1, r3
 8005da4:	4413      	add	r3, r2
 8005da6:	3324      	adds	r3, #36	@ 0x24
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00d      	beq.n	8005dca <OPENBL_MEM_MassErase+0x4e>
    {
      status = a_MemoriesTable[memory_index].MassErase(p_Data, DataLength);
 8005dae:	4a0d      	ldr	r2, [pc, #52]	@ (8005de4 <OPENBL_MEM_MassErase+0x68>)
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	212c      	movs	r1, #44	@ 0x2c
 8005db4:	fb01 f303 	mul.w	r3, r1, r3
 8005db8:	4413      	add	r3, r2
 8005dba:	3324      	adds	r3, #36	@ 0x24
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	6879      	ldr	r1, [r7, #4]
 8005dc0:	68b8      	ldr	r0, [r7, #8]
 8005dc2:	4798      	blx	r3
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	75fb      	strb	r3, [r7, #23]
 8005dc8:	e004      	b.n	8005dd4 <OPENBL_MEM_MassErase+0x58>
    }
    else
    {
      status = ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	75fb      	strb	r3, [r7, #23]
 8005dce:	e001      	b.n	8005dd4 <OPENBL_MEM_MassErase+0x58>
    }
  }
  else
  {
    status = ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3718      	adds	r7, #24
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	20000c74 	.word	0x20000c74
 8005de4:	20000c78 	.word	0x20000c78

08005de8 <OPENBL_MEM_Erase>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Erase operation done
  *          - ERROR:   Erase operation failed or one parameter is invalid
 */
ErrorStatus OPENBL_MEM_Erase(uint32_t Address, uint8_t *p_Data, uint32_t DataLength)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b086      	sub	sp, #24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
  uint32_t memory_index;
  ErrorStatus status;

  /* Get the memory index to know from which memory interface we will used */
  memory_index = OPENBL_MEM_GetMemoryIndex(Address);
 8005df4:	68f8      	ldr	r0, [r7, #12]
 8005df6:	f7ff fec7 	bl	8005b88 <OPENBL_MEM_GetMemoryIndex>
 8005dfa:	6138      	str	r0, [r7, #16]

  if (memory_index < NumberOfMemories)
 8005dfc:	4b13      	ldr	r3, [pc, #76]	@ (8005e4c <OPENBL_MEM_Erase+0x64>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d21a      	bcs.n	8005e3c <OPENBL_MEM_Erase+0x54>
  {
    if (a_MemoriesTable[memory_index].Erase != NULL)
 8005e06:	4a12      	ldr	r2, [pc, #72]	@ (8005e50 <OPENBL_MEM_Erase+0x68>)
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	212c      	movs	r1, #44	@ 0x2c
 8005e0c:	fb01 f303 	mul.w	r3, r1, r3
 8005e10:	4413      	add	r3, r2
 8005e12:	3328      	adds	r3, #40	@ 0x28
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00d      	beq.n	8005e36 <OPENBL_MEM_Erase+0x4e>
    {
      status = a_MemoriesTable[memory_index].Erase(p_Data, DataLength);
 8005e1a:	4a0d      	ldr	r2, [pc, #52]	@ (8005e50 <OPENBL_MEM_Erase+0x68>)
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	212c      	movs	r1, #44	@ 0x2c
 8005e20:	fb01 f303 	mul.w	r3, r1, r3
 8005e24:	4413      	add	r3, r2
 8005e26:	3328      	adds	r3, #40	@ 0x28
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6879      	ldr	r1, [r7, #4]
 8005e2c:	68b8      	ldr	r0, [r7, #8]
 8005e2e:	4798      	blx	r3
 8005e30:	4603      	mov	r3, r0
 8005e32:	75fb      	strb	r3, [r7, #23]
 8005e34:	e004      	b.n	8005e40 <OPENBL_MEM_Erase+0x58>
    }
    else
    {
      status = ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	75fb      	strb	r3, [r7, #23]
 8005e3a:	e001      	b.n	8005e40 <OPENBL_MEM_Erase+0x58>
    }
  }
  else
  {
    status = ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3718      	adds	r7, #24
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	20000c74 	.word	0x20000c74
 8005e50:	20000c78 	.word	0x20000c78

08005e54 <OPENBL_MEM_OptionBytesLaunch>:
/**
  * @brief  Launch the option byte loading.
  * @retval None.
  */
void OPENBL_MEM_OptionBytesLaunch(void)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	af00      	add	r7, sp, #0
  OPENBL_FLASH_OB_Launch();
 8005e58:	f7fa fd39 	bl	80008ce <OPENBL_FLASH_OB_Launch>
}
 8005e5c:	bf00      	nop
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <OPENBL_USART_GetCommandsList>:
/**
  * @brief  This function is used to get a pointer to the structure that contains the available USART commands.
  * @return Returns a pointer to the OPENBL_USART_Commands struct.
  */
OPENBL_CommandsTypeDef *OPENBL_USART_GetCommandsList(void)
{
 8005e60:	b480      	push	{r7}
 8005e62:	af00      	add	r7, sp, #0
  return (&OPENBL_USART_Commands);
 8005e64:	4b02      	ldr	r3, [pc, #8]	@ (8005e70 <OPENBL_USART_GetCommandsList+0x10>)
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr
 8005e70:	200001e0 	.word	0x200001e0

08005e74 <OPENBL_USART_GetCommand>:
/**
  * @brief  This function is used to get the list of the available USART commands
  * @retval None.
  */
static void OPENBL_USART_GetCommand(void)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
  uint32_t counter;
  const uint8_t a_OPENBL_USART_CommandsList[OPENBL_USART_COMMANDS_NB] =
 8005e7a:	4a14      	ldr	r2, [pc, #80]	@ (8005ecc <OPENBL_USART_GetCommand+0x58>)
 8005e7c:	463b      	mov	r3, r7
 8005e7e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005e80:	c303      	stmia	r3!, {r0, r1}
 8005e82:	801a      	strh	r2, [r3, #0]
 8005e84:	3302      	adds	r3, #2
 8005e86:	0c12      	lsrs	r2, r2, #16
 8005e88:	701a      	strb	r2, [r3, #0]
    CMD_READ_PROTECT,
    CMD_READ_UNPROTECT
  };

  /* Send Acknowledge byte to notify the host that the command is recognized */
  OPENBL_USART_SendByte(ACK_BYTE);
 8005e8a:	2079      	movs	r0, #121	@ 0x79
 8005e8c:	f7fb fa52 	bl	8001334 <OPENBL_USART_SendByte>

  /* Send the number of commands supported by the USART protocol */
  OPENBL_USART_SendByte(OPENBL_USART_COMMANDS_NB);
 8005e90:	200b      	movs	r0, #11
 8005e92:	f7fb fa4f 	bl	8001334 <OPENBL_USART_SendByte>

  /* Send USART protocol version */
  OPENBL_USART_SendByte(OPENBL_USART_VERSION);
 8005e96:	2031      	movs	r0, #49	@ 0x31
 8005e98:	f7fb fa4c 	bl	8001334 <OPENBL_USART_SendByte>

  /* Send the list of supported commands */
  for (counter = 0U; counter < OPENBL_USART_COMMANDS_NB; counter++)
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	60fb      	str	r3, [r7, #12]
 8005ea0:	e009      	b.n	8005eb6 <OPENBL_USART_GetCommand+0x42>
  {
    OPENBL_USART_SendByte(a_OPENBL_USART_CommandsList[counter]);
 8005ea2:	463a      	mov	r2, r7
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7fb fa42 	bl	8001334 <OPENBL_USART_SendByte>
  for (counter = 0U; counter < OPENBL_USART_COMMANDS_NB; counter++)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	60fb      	str	r3, [r7, #12]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2b0a      	cmp	r3, #10
 8005eba:	d9f2      	bls.n	8005ea2 <OPENBL_USART_GetCommand+0x2e>
  }

  /* Send last Acknowledge synchronization byte */
  OPENBL_USART_SendByte(ACK_BYTE);
 8005ebc:	2079      	movs	r0, #121	@ 0x79
 8005ebe:	f7fb fa39 	bl	8001334 <OPENBL_USART_SendByte>
}
 8005ec2:	bf00      	nop
 8005ec4:	3710      	adds	r7, #16
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	080064f0 	.word	0x080064f0

08005ed0 <OPENBL_USART_GetVersion>:
/**
  * @brief  This function is used to get the USART protocol version.
  * @retval None.
  */
static void OPENBL_USART_GetVersion(void)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	af00      	add	r7, sp, #0
  /* Send Acknowledge byte to notify the host that the command is recognized */
  OPENBL_USART_SendByte(ACK_BYTE);
 8005ed4:	2079      	movs	r0, #121	@ 0x79
 8005ed6:	f7fb fa2d 	bl	8001334 <OPENBL_USART_SendByte>

  /* Send USART protocol version */
  OPENBL_USART_SendByte(OPENBL_USART_VERSION);
 8005eda:	2031      	movs	r0, #49	@ 0x31
 8005edc:	f7fb fa2a 	bl	8001334 <OPENBL_USART_SendByte>

  OPENBL_USART_SendByte(0x00);
 8005ee0:	2000      	movs	r0, #0
 8005ee2:	f7fb fa27 	bl	8001334 <OPENBL_USART_SendByte>
  OPENBL_USART_SendByte(0x00);
 8005ee6:	2000      	movs	r0, #0
 8005ee8:	f7fb fa24 	bl	8001334 <OPENBL_USART_SendByte>

  /* Send last Acknowledge synchronization byte */
  OPENBL_USART_SendByte(ACK_BYTE);
 8005eec:	2079      	movs	r0, #121	@ 0x79
 8005eee:	f7fb fa21 	bl	8001334 <OPENBL_USART_SendByte>
}
 8005ef2:	bf00      	nop
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <OPENBL_USART_GetID>:
/**
  * @brief  This function is used to get the device ID.
  * @retval None.
  */
static void OPENBL_USART_GetID(void)
{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	af00      	add	r7, sp, #0
  /* Send Acknowledge byte to notify the host that the command is recognized */
  OPENBL_USART_SendByte(ACK_BYTE);
 8005efa:	2079      	movs	r0, #121	@ 0x79
 8005efc:	f7fb fa1a 	bl	8001334 <OPENBL_USART_SendByte>

  OPENBL_USART_SendByte(0x01);
 8005f00:	2001      	movs	r0, #1
 8005f02:	f7fb fa17 	bl	8001334 <OPENBL_USART_SendByte>

  /* Send the device ID starting by the MSB byte then the LSB byte */
  OPENBL_USART_SendByte(DEVICE_ID_MSB);
 8005f06:	2004      	movs	r0, #4
 8005f08:	f7fb fa14 	bl	8001334 <OPENBL_USART_SendByte>
  OPENBL_USART_SendByte(DEVICE_ID_LSB);
 8005f0c:	2069      	movs	r0, #105	@ 0x69
 8005f0e:	f7fb fa11 	bl	8001334 <OPENBL_USART_SendByte>

  /* Send last Acknowledge synchronization byte */
  OPENBL_USART_SendByte(ACK_BYTE);
 8005f12:	2079      	movs	r0, #121	@ 0x79
 8005f14:	f7fb fa0e 	bl	8001334 <OPENBL_USART_SendByte>
}
 8005f18:	bf00      	nop
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <OPENBL_USART_ReadMemory>:
/**
 * @brief  This function is used to read memory from the device.
 * @retval None.
 */
static void OPENBL_USART_ReadMemory(void)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
  uint32_t memory_index;
  uint8_t data;
  uint8_t xor;

  /* Check memory protection then send adequate response */
  if (OPENBL_MEM_GetReadOutProtectionStatus() != RESET)
 8005f22:	f7ff fed4 	bl	8005cce <OPENBL_MEM_GetReadOutProtectionStatus>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d003      	beq.n	8005f34 <OPENBL_USART_ReadMemory+0x18>
  {
    OPENBL_USART_SendByte(NACK_BYTE);
 8005f2c:	201f      	movs	r0, #31
 8005f2e:	f7fb fa01 	bl	8001334 <OPENBL_USART_SendByte>
          address++;
        }
      }
    }
  }
}
 8005f32:	e040      	b.n	8005fb6 <OPENBL_USART_ReadMemory+0x9a>
    OPENBL_USART_SendByte(ACK_BYTE);
 8005f34:	2079      	movs	r0, #121	@ 0x79
 8005f36:	f7fb f9fd 	bl	8001334 <OPENBL_USART_SendByte>
    if (OPENBL_USART_GetAddress(&address) == NACK_BYTE)
 8005f3a:	463b      	mov	r3, r7
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f000 fa51 	bl	80063e4 <OPENBL_USART_GetAddress>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b1f      	cmp	r3, #31
 8005f46:	d103      	bne.n	8005f50 <OPENBL_USART_ReadMemory+0x34>
      OPENBL_USART_SendByte(NACK_BYTE);
 8005f48:	201f      	movs	r0, #31
 8005f4a:	f7fb f9f3 	bl	8001334 <OPENBL_USART_SendByte>
}
 8005f4e:	e032      	b.n	8005fb6 <OPENBL_USART_ReadMemory+0x9a>
      OPENBL_USART_SendByte(ACK_BYTE);
 8005f50:	2079      	movs	r0, #121	@ 0x79
 8005f52:	f7fb f9ef 	bl	8001334 <OPENBL_USART_SendByte>
      data = OPENBL_USART_ReadByte();
 8005f56:	f7fb f9d9 	bl	800130c <OPENBL_USART_ReadByte>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	72fb      	strb	r3, [r7, #11]
      xor  = ~data;
 8005f5e:	7afb      	ldrb	r3, [r7, #11]
 8005f60:	43db      	mvns	r3, r3
 8005f62:	72bb      	strb	r3, [r7, #10]
      if (OPENBL_USART_ReadByte() != xor)
 8005f64:	f7fb f9d2 	bl	800130c <OPENBL_USART_ReadByte>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	7abb      	ldrb	r3, [r7, #10]
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d003      	beq.n	8005f7a <OPENBL_USART_ReadMemory+0x5e>
        OPENBL_USART_SendByte(NACK_BYTE);
 8005f72:	201f      	movs	r0, #31
 8005f74:	f7fb f9de 	bl	8001334 <OPENBL_USART_SendByte>
}
 8005f78:	e01d      	b.n	8005fb6 <OPENBL_USART_ReadMemory+0x9a>
        OPENBL_USART_SendByte(ACK_BYTE);
 8005f7a:	2079      	movs	r0, #121	@ 0x79
 8005f7c:	f7fb f9da 	bl	8001334 <OPENBL_USART_SendByte>
        memory_index = OPENBL_MEM_GetMemoryIndex(address);
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7ff fe00 	bl	8005b88 <OPENBL_MEM_GetMemoryIndex>
 8005f88:	6078      	str	r0, [r7, #4]
        for (counter = ((uint32_t)data + 1U); counter != 0U; counter--)
 8005f8a:	7afb      	ldrb	r3, [r7, #11]
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	60fb      	str	r3, [r7, #12]
 8005f90:	e00e      	b.n	8005fb0 <OPENBL_USART_ReadMemory+0x94>
          OPENBL_USART_SendByte(OPENBL_MEM_Read(address, memory_index));
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	6879      	ldr	r1, [r7, #4]
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7ff fe28 	bl	8005bec <OPENBL_MEM_Read>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7fb f9c8 	bl	8001334 <OPENBL_USART_SendByte>
          address++;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	603b      	str	r3, [r7, #0]
        for (counter = ((uint32_t)data + 1U); counter != 0U; counter--)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	3b01      	subs	r3, #1
 8005fae:	60fb      	str	r3, [r7, #12]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1ed      	bne.n	8005f92 <OPENBL_USART_ReadMemory+0x76>
}
 8005fb6:	bf00      	nop
 8005fb8:	3710      	adds	r7, #16
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
	...

08005fc0 <OPENBL_USART_WriteMemory>:
/**
 * @brief  This function is used to write in to device memory.
 * @retval None.
 */
static void OPENBL_USART_WriteMemory(void)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b088      	sub	sp, #32
 8005fc4:	af00      	add	r7, sp, #0
  uint32_t mem_area;
  uint8_t *ramaddress;
  uint8_t data;

  /* Check memory protection then send adequate response */
  if (OPENBL_MEM_GetReadOutProtectionStatus() != RESET)
 8005fc6:	f7ff fe82 	bl	8005cce <OPENBL_MEM_GetReadOutProtectionStatus>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d003      	beq.n	8005fd8 <OPENBL_USART_WriteMemory+0x18>
  {
    OPENBL_USART_SendByte(NACK_BYTE);
 8005fd0:	201f      	movs	r0, #31
 8005fd2:	f7fb f9af 	bl	8001334 <OPENBL_USART_SendByte>
          OPENBL_MEM_OptionBytesLaunch();
        }
      }
    }
  }
}
 8005fd6:	e050      	b.n	800607a <OPENBL_USART_WriteMemory+0xba>
    OPENBL_USART_SendByte(ACK_BYTE);
 8005fd8:	2079      	movs	r0, #121	@ 0x79
 8005fda:	f7fb f9ab 	bl	8001334 <OPENBL_USART_SendByte>
    if (OPENBL_USART_GetAddress(&address) == NACK_BYTE)
 8005fde:	1d3b      	adds	r3, r7, #4
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f000 f9ff 	bl	80063e4 <OPENBL_USART_GetAddress>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b1f      	cmp	r3, #31
 8005fea:	d103      	bne.n	8005ff4 <OPENBL_USART_WriteMemory+0x34>
      OPENBL_USART_SendByte(NACK_BYTE);
 8005fec:	201f      	movs	r0, #31
 8005fee:	f7fb f9a1 	bl	8001334 <OPENBL_USART_SendByte>
}
 8005ff2:	e042      	b.n	800607a <OPENBL_USART_WriteMemory+0xba>
      OPENBL_USART_SendByte(ACK_BYTE);
 8005ff4:	2079      	movs	r0, #121	@ 0x79
 8005ff6:	f7fb f99d 	bl	8001334 <OPENBL_USART_SendByte>
      ramaddress = (uint8_t *)USART_RAM_Buf;
 8005ffa:	4b22      	ldr	r3, [pc, #136]	@ (8006084 <OPENBL_USART_WriteMemory+0xc4>)
 8005ffc:	617b      	str	r3, [r7, #20]
      data = OPENBL_USART_ReadByte();
 8005ffe:	f7fb f985 	bl	800130c <OPENBL_USART_ReadByte>
 8006002:	4603      	mov	r3, r0
 8006004:	74fb      	strb	r3, [r7, #19]
      codesize = (uint32_t)data + 1U;
 8006006:	7cfb      	ldrb	r3, [r7, #19]
 8006008:	3301      	adds	r3, #1
 800600a:	60fb      	str	r3, [r7, #12]
      tmpXOR = data;
 800600c:	7cfb      	ldrb	r3, [r7, #19]
 800600e:	61fb      	str	r3, [r7, #28]
      for (counter = codesize; counter != 0U ; counter--)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	61bb      	str	r3, [r7, #24]
 8006014:	e010      	b.n	8006038 <OPENBL_USART_WriteMemory+0x78>
        data    = OPENBL_USART_ReadByte();
 8006016:	f7fb f979 	bl	800130c <OPENBL_USART_ReadByte>
 800601a:	4603      	mov	r3, r0
 800601c:	74fb      	strb	r3, [r7, #19]
        tmpXOR ^= data;
 800601e:	7cfb      	ldrb	r3, [r7, #19]
 8006020:	69fa      	ldr	r2, [r7, #28]
 8006022:	4053      	eors	r3, r2
 8006024:	61fb      	str	r3, [r7, #28]
        *(__IO uint8_t *)(ramaddress) = data;
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	7cfa      	ldrb	r2, [r7, #19]
 800602a:	701a      	strb	r2, [r3, #0]
        ramaddress++;
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	3301      	adds	r3, #1
 8006030:	617b      	str	r3, [r7, #20]
      for (counter = codesize; counter != 0U ; counter--)
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	3b01      	subs	r3, #1
 8006036:	61bb      	str	r3, [r7, #24]
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1eb      	bne.n	8006016 <OPENBL_USART_WriteMemory+0x56>
      if (OPENBL_USART_ReadByte() != tmpXOR)
 800603e:	f7fb f965 	bl	800130c <OPENBL_USART_ReadByte>
 8006042:	4603      	mov	r3, r0
 8006044:	461a      	mov	r2, r3
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	4293      	cmp	r3, r2
 800604a:	d003      	beq.n	8006054 <OPENBL_USART_WriteMemory+0x94>
        OPENBL_USART_SendByte(NACK_BYTE);
 800604c:	201f      	movs	r0, #31
 800604e:	f7fb f971 	bl	8001334 <OPENBL_USART_SendByte>
}
 8006052:	e012      	b.n	800607a <OPENBL_USART_WriteMemory+0xba>
        OPENBL_MEM_Write(address, (uint8_t *)USART_RAM_Buf, codesize);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	490a      	ldr	r1, [pc, #40]	@ (8006084 <OPENBL_USART_WriteMemory+0xc4>)
 800605a:	4618      	mov	r0, r3
 800605c:	f7ff fdf6 	bl	8005c4c <OPENBL_MEM_Write>
        OPENBL_USART_SendByte(ACK_BYTE);
 8006060:	2079      	movs	r0, #121	@ 0x79
 8006062:	f7fb f967 	bl	8001334 <OPENBL_USART_SendByte>
        mem_area = OPENBL_MEM_GetAddressArea(address);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4618      	mov	r0, r3
 800606a:	f7ff fd4f 	bl	8005b0c <OPENBL_MEM_GetAddressArea>
 800606e:	60b8      	str	r0, [r7, #8]
        if (mem_area == OB_AREA)
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	2b03      	cmp	r3, #3
 8006074:	d101      	bne.n	800607a <OPENBL_USART_WriteMemory+0xba>
          OPENBL_MEM_OptionBytesLaunch();
 8006076:	f7ff feed 	bl	8005e54 <OPENBL_MEM_OptionBytesLaunch>
}
 800607a:	bf00      	nop
 800607c:	3720      	adds	r7, #32
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	20000dac 	.word	0x20000dac

08006088 <OPENBL_USART_Go>:
/**
  * @brief  This function is used to jump to the user application.
  * @retval None.
  */
static void OPENBL_USART_Go(void)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
  uint32_t address;
  uint32_t mem_area;

  /* Check memory protection then send adequate response */
  if (OPENBL_MEM_GetReadOutProtectionStatus() != RESET)
 800608e:	f7ff fe1e 	bl	8005cce <OPENBL_MEM_GetReadOutProtectionStatus>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d003      	beq.n	80060a0 <OPENBL_USART_Go+0x18>
  {
    OPENBL_USART_SendByte(NACK_BYTE);
 8006098:	201f      	movs	r0, #31
 800609a:	f7fb f94b 	bl	8001334 <OPENBL_USART_SendByte>

        OPENBL_MEM_JumpToAddress(address);
      }
    }
  }
}
 800609e:	e023      	b.n	80060e8 <OPENBL_USART_Go+0x60>
    OPENBL_USART_SendByte(ACK_BYTE);
 80060a0:	2079      	movs	r0, #121	@ 0x79
 80060a2:	f7fb f947 	bl	8001334 <OPENBL_USART_SendByte>
    if (OPENBL_USART_GetAddress(&address) == NACK_BYTE)
 80060a6:	463b      	mov	r3, r7
 80060a8:	4618      	mov	r0, r3
 80060aa:	f000 f99b 	bl	80063e4 <OPENBL_USART_GetAddress>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b1f      	cmp	r3, #31
 80060b2:	d103      	bne.n	80060bc <OPENBL_USART_Go+0x34>
      OPENBL_USART_SendByte(NACK_BYTE);
 80060b4:	201f      	movs	r0, #31
 80060b6:	f7fb f93d 	bl	8001334 <OPENBL_USART_SendByte>
}
 80060ba:	e015      	b.n	80060e8 <OPENBL_USART_Go+0x60>
      mem_area = OPENBL_MEM_GetAddressArea(address);
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	4618      	mov	r0, r3
 80060c0:	f7ff fd24 	bl	8005b0c <OPENBL_MEM_GetAddressArea>
 80060c4:	6078      	str	r0, [r7, #4]
      if ((mem_area != FLASH_AREA) && (mem_area != RAM_AREA))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d006      	beq.n	80060da <OPENBL_USART_Go+0x52>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d003      	beq.n	80060da <OPENBL_USART_Go+0x52>
        OPENBL_USART_SendByte(NACK_BYTE);
 80060d2:	201f      	movs	r0, #31
 80060d4:	f7fb f92e 	bl	8001334 <OPENBL_USART_SendByte>
}
 80060d8:	e006      	b.n	80060e8 <OPENBL_USART_Go+0x60>
        OPENBL_USART_SendByte(ACK_BYTE);
 80060da:	2079      	movs	r0, #121	@ 0x79
 80060dc:	f7fb f92a 	bl	8001334 <OPENBL_USART_SendByte>
        OPENBL_MEM_JumpToAddress(address);
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7ff fe3e 	bl	8005d64 <OPENBL_MEM_JumpToAddress>
}
 80060e8:	bf00      	nop
 80060ea:	3708      	adds	r7, #8
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <OPENBL_USART_ReadoutProtect>:
/**
 * @brief  This function is used to enable readout protection.
 * @retval None.
 */
static void OPENBL_USART_ReadoutProtect(void)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	af00      	add	r7, sp, #0
  /* Check memory protection then send adequate response */
  if (OPENBL_MEM_GetReadOutProtectionStatus() != RESET)
 80060f4:	f7ff fdeb 	bl	8005cce <OPENBL_MEM_GetReadOutProtectionStatus>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d003      	beq.n	8006106 <OPENBL_USART_ReadoutProtect+0x16>
  {
    OPENBL_USART_SendByte(NACK_BYTE);
 80060fe:	201f      	movs	r0, #31
 8006100:	f7fb f918 	bl	8001334 <OPENBL_USART_SendByte>
    OPENBL_USART_SendByte(ACK_BYTE);

    /* Launch Option Bytes reload */
    OPENBL_MEM_OptionBytesLaunch();
  }
}
 8006104:	e00a      	b.n	800611c <OPENBL_USART_ReadoutProtect+0x2c>
    OPENBL_USART_SendByte(ACK_BYTE);
 8006106:	2079      	movs	r0, #121	@ 0x79
 8006108:	f7fb f914 	bl	8001334 <OPENBL_USART_SendByte>
    OPENBL_MEM_SetReadOutProtection(ENABLE);
 800610c:	2001      	movs	r0, #1
 800610e:	f7ff fdcb 	bl	8005ca8 <OPENBL_MEM_SetReadOutProtection>
    OPENBL_USART_SendByte(ACK_BYTE);
 8006112:	2079      	movs	r0, #121	@ 0x79
 8006114:	f7fb f90e 	bl	8001334 <OPENBL_USART_SendByte>
    OPENBL_MEM_OptionBytesLaunch();
 8006118:	f7ff fe9c 	bl	8005e54 <OPENBL_MEM_OptionBytesLaunch>
}
 800611c:	bf00      	nop
 800611e:	bd80      	pop	{r7, pc}

08006120 <OPENBL_USART_ReadoutUnprotect>:
/**
 * @brief  This function is used to disable readout protection.
 * @retval None.
 */
static void OPENBL_USART_ReadoutUnprotect(void)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	af00      	add	r7, sp, #0
  OPENBL_USART_SendByte(ACK_BYTE);
 8006124:	2079      	movs	r0, #121	@ 0x79
 8006126:	f7fb f905 	bl	8001334 <OPENBL_USART_SendByte>

  /* Once the option bytes modification start bit is set in FLASH CR register,
     all the RAM is erased, this causes the erase of the Open Bootloader RAM.
     This is why the last ACK is sent before the call of OPENBL_MEM_SetReadOutProtection */
  OPENBL_USART_SendByte(ACK_BYTE);
 800612a:	2079      	movs	r0, #121	@ 0x79
 800612c:	f7fb f902 	bl	8001334 <OPENBL_USART_SendByte>

  /* Disable the read protection */
  OPENBL_MEM_SetReadOutProtection(DISABLE);
 8006130:	2000      	movs	r0, #0
 8006132:	f7ff fdb9 	bl	8005ca8 <OPENBL_MEM_SetReadOutProtection>

  /* Launch Option Bytes reload and reset system */
  OPENBL_MEM_OptionBytesLaunch();
 8006136:	f7ff fe8d 	bl	8005e54 <OPENBL_MEM_OptionBytesLaunch>
}
 800613a:	bf00      	nop
 800613c:	bd80      	pop	{r7, pc}
	...

08006140 <OPENBL_USART_EraseMemory>:
/**
 * @brief  This function is used to erase a memory.
 * @retval None.
 */
static void OPENBL_USART_EraseMemory(void)
{
 8006140:	b590      	push	{r4, r7, lr}
 8006142:	b089      	sub	sp, #36	@ 0x24
 8006144:	af00      	add	r7, sp, #0
  uint32_t xor;
  uint32_t counter;
  uint32_t numpage;
  uint16_t data;
  ErrorStatus error_value;
  uint8_t status = ACK_BYTE;
 8006146:	2379      	movs	r3, #121	@ 0x79
 8006148:	75fb      	strb	r3, [r7, #23]
  uint8_t *ramaddress;

  ramaddress = (uint8_t *) USART_RAM_Buf;
 800614a:	4b67      	ldr	r3, [pc, #412]	@ (80062e8 <OPENBL_USART_EraseMemory+0x1a8>)
 800614c:	613b      	str	r3, [r7, #16]

  /* Check if the memory is not protected */
  if (OPENBL_MEM_GetReadOutProtectionStatus() != RESET)
 800614e:	f7ff fdbe 	bl	8005cce <OPENBL_MEM_GetReadOutProtectionStatus>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d003      	beq.n	8006160 <OPENBL_USART_EraseMemory+0x20>
  {
    OPENBL_USART_SendByte(NACK_BYTE);
 8006158:	201f      	movs	r0, #31
 800615a:	f7fb f8eb 	bl	8001334 <OPENBL_USART_SendByte>
      }
    }

    OPENBL_USART_SendByte(status);
  }
}
 800615e:	e0bf      	b.n	80062e0 <OPENBL_USART_EraseMemory+0x1a0>
    OPENBL_USART_SendByte(ACK_BYTE);
 8006160:	2079      	movs	r0, #121	@ 0x79
 8006162:	f7fb f8e7 	bl	8001334 <OPENBL_USART_SendByte>
    data = OPENBL_USART_ReadByte();
 8006166:	f7fb f8d1 	bl	800130c <OPENBL_USART_ReadByte>
 800616a:	4603      	mov	r3, r0
 800616c:	81fb      	strh	r3, [r7, #14]
    data = (uint16_t)(data << 8) | OPENBL_USART_ReadByte();
 800616e:	89fb      	ldrh	r3, [r7, #14]
 8006170:	021b      	lsls	r3, r3, #8
 8006172:	b29c      	uxth	r4, r3
 8006174:	f7fb f8ca 	bl	800130c <OPENBL_USART_ReadByte>
 8006178:	4603      	mov	r3, r0
 800617a:	4323      	orrs	r3, r4
 800617c:	81fb      	strh	r3, [r7, #14]
    xor  = ((uint32_t)data & 0xFF00U) >> 8;
 800617e:	89fb      	ldrh	r3, [r7, #14]
 8006180:	0a1b      	lsrs	r3, r3, #8
 8006182:	b29b      	uxth	r3, r3
 8006184:	61fb      	str	r3, [r7, #28]
    xor ^= (uint32_t)data & 0x00FFU;
 8006186:	89fb      	ldrh	r3, [r7, #14]
 8006188:	b2db      	uxtb	r3, r3
 800618a:	69fa      	ldr	r2, [r7, #28]
 800618c:	4053      	eors	r3, r2
 800618e:	61fb      	str	r3, [r7, #28]
    if ((data & 0xFFF0U) == 0xFFF0U)
 8006190:	89fa      	ldrh	r2, [r7, #14]
 8006192:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8006196:	4013      	ands	r3, r2
 8006198:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 800619c:	4293      	cmp	r3, r2
 800619e:	d139      	bne.n	8006214 <OPENBL_USART_EraseMemory+0xd4>
      if (OPENBL_USART_ReadByte() != (uint8_t) xor)
 80061a0:	f7fb f8b4 	bl	800130c <OPENBL_USART_ReadByte>
 80061a4:	4603      	mov	r3, r0
 80061a6:	461a      	mov	r2, r3
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d002      	beq.n	80061b6 <OPENBL_USART_EraseMemory+0x76>
        status = NACK_BYTE;
 80061b0:	231f      	movs	r3, #31
 80061b2:	75fb      	strb	r3, [r7, #23]
 80061b4:	e090      	b.n	80062d8 <OPENBL_USART_EraseMemory+0x198>
        if ((data == 0xFFFFU) || (data == 0xFFFEU) || (data == 0xFFFDU))
 80061b6:	89fb      	ldrh	r3, [r7, #14]
 80061b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80061bc:	4293      	cmp	r3, r2
 80061be:	d009      	beq.n	80061d4 <OPENBL_USART_EraseMemory+0x94>
 80061c0:	89fb      	ldrh	r3, [r7, #14]
 80061c2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d004      	beq.n	80061d4 <OPENBL_USART_EraseMemory+0x94>
 80061ca:	89fb      	ldrh	r3, [r7, #14]
 80061cc:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d11c      	bne.n	800620e <OPENBL_USART_EraseMemory+0xce>
          ramaddress[0] = (uint8_t)(data & 0x00FFU);
 80061d4:	89fb      	ldrh	r3, [r7, #14]
 80061d6:	b2da      	uxtb	r2, r3
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	701a      	strb	r2, [r3, #0]
          ramaddress[1] = (uint8_t)((data & 0xFF00U) >> 8);
 80061dc:	89fb      	ldrh	r3, [r7, #14]
 80061de:	0a1b      	lsrs	r3, r3, #8
 80061e0:	b29a      	uxth	r2, r3
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	3301      	adds	r3, #1
 80061e6:	b2d2      	uxtb	r2, r2
 80061e8:	701a      	strb	r2, [r3, #0]
          error_value = OPENBL_MEM_MassErase(FLASH_START_ADDRESS, (uint8_t *) USART_RAM_Buf, USART_RAM_BUFFER_SIZE);
 80061ea:	f240 4284 	movw	r2, #1156	@ 0x484
 80061ee:	493e      	ldr	r1, [pc, #248]	@ (80062e8 <OPENBL_USART_EraseMemory+0x1a8>)
 80061f0:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 80061f4:	f7ff fdc2 	bl	8005d7c <OPENBL_MEM_MassErase>
 80061f8:	4603      	mov	r3, r0
 80061fa:	71fb      	strb	r3, [r7, #7]
          if (error_value == SUCCESS)
 80061fc:	79fb      	ldrb	r3, [r7, #7]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d102      	bne.n	8006208 <OPENBL_USART_EraseMemory+0xc8>
            status = ACK_BYTE;
 8006202:	2379      	movs	r3, #121	@ 0x79
 8006204:	75fb      	strb	r3, [r7, #23]
          if (error_value == SUCCESS)
 8006206:	e067      	b.n	80062d8 <OPENBL_USART_EraseMemory+0x198>
            status = NACK_BYTE;
 8006208:	231f      	movs	r3, #31
 800620a:	75fb      	strb	r3, [r7, #23]
          if (error_value == SUCCESS)
 800620c:	e064      	b.n	80062d8 <OPENBL_USART_EraseMemory+0x198>
          status = NACK_BYTE;
 800620e:	231f      	movs	r3, #31
 8006210:	75fb      	strb	r3, [r7, #23]
 8006212:	e061      	b.n	80062d8 <OPENBL_USART_EraseMemory+0x198>
      ramaddress = (uint8_t *) USART_RAM_Buf;
 8006214:	4b34      	ldr	r3, [pc, #208]	@ (80062e8 <OPENBL_USART_EraseMemory+0x1a8>)
 8006216:	613b      	str	r3, [r7, #16]
      numpage = (uint32_t)data + 1U;
 8006218:	89fb      	ldrh	r3, [r7, #14]
 800621a:	3301      	adds	r3, #1
 800621c:	60bb      	str	r3, [r7, #8]
      *ramaddress = (uint8_t)(numpage & 0x00FFU);
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	b2da      	uxtb	r2, r3
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	701a      	strb	r2, [r3, #0]
      ramaddress++;
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	3301      	adds	r3, #1
 800622a:	613b      	str	r3, [r7, #16]
      *ramaddress = (uint8_t)((numpage & 0xFF00U) >> 8);
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	0a1b      	lsrs	r3, r3, #8
 8006230:	b2da      	uxtb	r2, r3
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	701a      	strb	r2, [r3, #0]
      ramaddress++;
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	3301      	adds	r3, #1
 800623a:	613b      	str	r3, [r7, #16]
      for (counter = numpage; counter != 0U ; counter--)
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	61bb      	str	r3, [r7, #24]
 8006240:	e02e      	b.n	80062a0 <OPENBL_USART_EraseMemory+0x160>
        data  = OPENBL_USART_ReadByte();
 8006242:	f7fb f863 	bl	800130c <OPENBL_USART_ReadByte>
 8006246:	4603      	mov	r3, r0
 8006248:	81fb      	strh	r3, [r7, #14]
        xor  ^= data;
 800624a:	89fb      	ldrh	r3, [r7, #14]
 800624c:	69fa      	ldr	r2, [r7, #28]
 800624e:	4053      	eors	r3, r2
 8006250:	61fb      	str	r3, [r7, #28]
        data  = (uint16_t)((data & 0x00FFU) << 8);
 8006252:	89fb      	ldrh	r3, [r7, #14]
 8006254:	021b      	lsls	r3, r3, #8
 8006256:	81fb      	strh	r3, [r7, #14]
        data |= (uint8_t)(OPENBL_USART_ReadByte() & 0x00FFU);
 8006258:	f7fb f858 	bl	800130c <OPENBL_USART_ReadByte>
 800625c:	4603      	mov	r3, r0
 800625e:	461a      	mov	r2, r3
 8006260:	89fb      	ldrh	r3, [r7, #14]
 8006262:	4313      	orrs	r3, r2
 8006264:	81fb      	strh	r3, [r7, #14]
        xor  ^= ((uint32_t)data & 0x00FFU);
 8006266:	89fb      	ldrh	r3, [r7, #14]
 8006268:	b2db      	uxtb	r3, r3
 800626a:	69fa      	ldr	r2, [r7, #28]
 800626c:	4053      	eors	r3, r2
 800626e:	61fb      	str	r3, [r7, #28]
        if (counter < (USART_RAM_BUFFER_SIZE / 2U))
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	f240 2241 	movw	r2, #577	@ 0x241
 8006276:	4293      	cmp	r3, r2
 8006278:	d80f      	bhi.n	800629a <OPENBL_USART_EraseMemory+0x15a>
          *ramaddress = (uint8_t)(data & 0x00FFU);
 800627a:	89fb      	ldrh	r3, [r7, #14]
 800627c:	b2da      	uxtb	r2, r3
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	701a      	strb	r2, [r3, #0]
          ramaddress++;
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	3301      	adds	r3, #1
 8006286:	613b      	str	r3, [r7, #16]
          *ramaddress = (uint8_t)((data & 0xFF00U) >> 8);
 8006288:	89fb      	ldrh	r3, [r7, #14]
 800628a:	0a1b      	lsrs	r3, r3, #8
 800628c:	b29b      	uxth	r3, r3
 800628e:	b2da      	uxtb	r2, r3
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	701a      	strb	r2, [r3, #0]
          ramaddress++;
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	3301      	adds	r3, #1
 8006298:	613b      	str	r3, [r7, #16]
      for (counter = numpage; counter != 0U ; counter--)
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	3b01      	subs	r3, #1
 800629e:	61bb      	str	r3, [r7, #24]
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d1cd      	bne.n	8006242 <OPENBL_USART_EraseMemory+0x102>
      if (OPENBL_USART_ReadByte() != (uint8_t) xor)
 80062a6:	f7fb f831 	bl	800130c <OPENBL_USART_ReadByte>
 80062aa:	4603      	mov	r3, r0
 80062ac:	461a      	mov	r2, r3
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d002      	beq.n	80062bc <OPENBL_USART_EraseMemory+0x17c>
        status = NACK_BYTE;
 80062b6:	231f      	movs	r3, #31
 80062b8:	75fb      	strb	r3, [r7, #23]
 80062ba:	e00d      	b.n	80062d8 <OPENBL_USART_EraseMemory+0x198>
        error_value = OPENBL_MEM_Erase(FLASH_START_ADDRESS, (uint8_t *) USART_RAM_Buf, USART_RAM_BUFFER_SIZE);
 80062bc:	f240 4284 	movw	r2, #1156	@ 0x484
 80062c0:	4909      	ldr	r1, [pc, #36]	@ (80062e8 <OPENBL_USART_EraseMemory+0x1a8>)
 80062c2:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 80062c6:	f7ff fd8f 	bl	8005de8 <OPENBL_MEM_Erase>
 80062ca:	4603      	mov	r3, r0
 80062cc:	71fb      	strb	r3, [r7, #7]
        if (error_value == SUCCESS)
 80062ce:	79fb      	ldrb	r3, [r7, #7]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d101      	bne.n	80062d8 <OPENBL_USART_EraseMemory+0x198>
          status = ACK_BYTE;
 80062d4:	2379      	movs	r3, #121	@ 0x79
 80062d6:	75fb      	strb	r3, [r7, #23]
    OPENBL_USART_SendByte(status);
 80062d8:	7dfb      	ldrb	r3, [r7, #23]
 80062da:	4618      	mov	r0, r3
 80062dc:	f7fb f82a 	bl	8001334 <OPENBL_USART_SendByte>
}
 80062e0:	bf00      	nop
 80062e2:	3724      	adds	r7, #36	@ 0x24
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd90      	pop	{r4, r7, pc}
 80062e8:	20000dac 	.word	0x20000dac

080062ec <OPENBL_USART_WriteProtect>:
/**
 * @brief  This function is used to enable write protect.
 * @retval None.
 */
static void OPENBL_USART_WriteProtect(void)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b086      	sub	sp, #24
 80062f0:	af00      	add	r7, sp, #0
  uint32_t xor;
  ErrorStatus error_value;
  uint8_t *ramaddress;

  /* Check if the memory is not protected */
  if (OPENBL_MEM_GetReadOutProtectionStatus() != RESET)
 80062f2:	f7ff fcec 	bl	8005cce <OPENBL_MEM_GetReadOutProtectionStatus>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d003      	beq.n	8006304 <OPENBL_USART_WriteProtect+0x18>
  {
    OPENBL_USART_SendByte(NACK_BYTE);
 80062fc:	201f      	movs	r0, #31
 80062fe:	f7fb f819 	bl	8001334 <OPENBL_USART_SendByte>
      {
        OPENBL_MEM_OptionBytesLaunch();
      }
    }
  }
}
 8006302:	e044      	b.n	800638e <OPENBL_USART_WriteProtect+0xa2>
    OPENBL_USART_SendByte(ACK_BYTE);
 8006304:	2079      	movs	r0, #121	@ 0x79
 8006306:	f7fb f815 	bl	8001334 <OPENBL_USART_SendByte>
    data = OPENBL_USART_ReadByte();
 800630a:	f7fa ffff 	bl	800130c <OPENBL_USART_ReadByte>
 800630e:	4603      	mov	r3, r0
 8006310:	60bb      	str	r3, [r7, #8]
    ramaddress = (uint8_t *) USART_RAM_Buf;
 8006312:	4b21      	ldr	r3, [pc, #132]	@ (8006398 <OPENBL_USART_WriteProtect+0xac>)
 8006314:	60fb      	str	r3, [r7, #12]
    length     = data + 1U;
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	3301      	adds	r3, #1
 800631a:	607b      	str	r3, [r7, #4]
    xor = data;
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	613b      	str	r3, [r7, #16]
    for (counter = length; counter != 0U ; counter--)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	617b      	str	r3, [r7, #20]
 8006324:	e011      	b.n	800634a <OPENBL_USART_WriteProtect+0x5e>
      data  = OPENBL_USART_ReadByte();
 8006326:	f7fa fff1 	bl	800130c <OPENBL_USART_ReadByte>
 800632a:	4603      	mov	r3, r0
 800632c:	60bb      	str	r3, [r7, #8]
      xor  ^= data;
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	4053      	eors	r3, r2
 8006334:	613b      	str	r3, [r7, #16]
      *(__IO uint8_t *)(ramaddress) = (uint8_t) data;
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	b2da      	uxtb	r2, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	701a      	strb	r2, [r3, #0]
      ramaddress++;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	3301      	adds	r3, #1
 8006342:	60fb      	str	r3, [r7, #12]
    for (counter = length; counter != 0U ; counter--)
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	3b01      	subs	r3, #1
 8006348:	617b      	str	r3, [r7, #20]
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1ea      	bne.n	8006326 <OPENBL_USART_WriteProtect+0x3a>
    if (OPENBL_USART_ReadByte() != (uint8_t) xor)
 8006350:	f7fa ffdc 	bl	800130c <OPENBL_USART_ReadByte>
 8006354:	4603      	mov	r3, r0
 8006356:	461a      	mov	r2, r3
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	b2db      	uxtb	r3, r3
 800635c:	429a      	cmp	r2, r3
 800635e:	d003      	beq.n	8006368 <OPENBL_USART_WriteProtect+0x7c>
      OPENBL_USART_SendByte(NACK_BYTE);
 8006360:	201f      	movs	r0, #31
 8006362:	f7fa ffe7 	bl	8001334 <OPENBL_USART_SendByte>
}
 8006366:	e012      	b.n	800638e <OPENBL_USART_WriteProtect+0xa2>
      ramaddress = (uint8_t *) USART_RAM_Buf;
 8006368:	4b0b      	ldr	r3, [pc, #44]	@ (8006398 <OPENBL_USART_WriteProtect+0xac>)
 800636a:	60fb      	str	r3, [r7, #12]
      error_value = OPENBL_MEM_SetWriteProtection(ENABLE, FLASH_START_ADDRESS, ramaddress, length);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8006374:	2001      	movs	r0, #1
 8006376:	f7ff fcbd 	bl	8005cf4 <OPENBL_MEM_SetWriteProtection>
 800637a:	4603      	mov	r3, r0
 800637c:	70fb      	strb	r3, [r7, #3]
      OPENBL_USART_SendByte(ACK_BYTE);
 800637e:	2079      	movs	r0, #121	@ 0x79
 8006380:	f7fa ffd8 	bl	8001334 <OPENBL_USART_SendByte>
      if (error_value == SUCCESS)
 8006384:	78fb      	ldrb	r3, [r7, #3]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d101      	bne.n	800638e <OPENBL_USART_WriteProtect+0xa2>
        OPENBL_MEM_OptionBytesLaunch();
 800638a:	f7ff fd63 	bl	8005e54 <OPENBL_MEM_OptionBytesLaunch>
}
 800638e:	bf00      	nop
 8006390:	3718      	adds	r7, #24
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	20000dac 	.word	0x20000dac

0800639c <OPENBL_USART_WriteUnprotect>:
/**
 * @brief  This function is used to disable write protect.
 * @retval None.
 */
static void OPENBL_USART_WriteUnprotect(void)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
  ErrorStatus error_value;

  /* Check if the memory is not protected */
  if (OPENBL_MEM_GetReadOutProtectionStatus() != RESET)
 80063a2:	f7ff fc94 	bl	8005cce <OPENBL_MEM_GetReadOutProtectionStatus>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d003      	beq.n	80063b4 <OPENBL_USART_WriteUnprotect+0x18>
  {
    OPENBL_USART_SendByte(NACK_BYTE);
 80063ac:	201f      	movs	r0, #31
 80063ae:	f7fa ffc1 	bl	8001334 <OPENBL_USART_SendByte>
    if (error_value == SUCCESS)
    {
      OPENBL_MEM_OptionBytesLaunch();
    }
  }
}
 80063b2:	e013      	b.n	80063dc <OPENBL_USART_WriteUnprotect+0x40>
    OPENBL_USART_SendByte(ACK_BYTE);
 80063b4:	2079      	movs	r0, #121	@ 0x79
 80063b6:	f7fa ffbd 	bl	8001334 <OPENBL_USART_SendByte>
    error_value = OPENBL_MEM_SetWriteProtection(DISABLE, FLASH_START_ADDRESS, NULL, 0);
 80063ba:	2300      	movs	r3, #0
 80063bc:	2200      	movs	r2, #0
 80063be:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 80063c2:	2000      	movs	r0, #0
 80063c4:	f7ff fc96 	bl	8005cf4 <OPENBL_MEM_SetWriteProtection>
 80063c8:	4603      	mov	r3, r0
 80063ca:	71fb      	strb	r3, [r7, #7]
    OPENBL_USART_SendByte(ACK_BYTE);
 80063cc:	2079      	movs	r0, #121	@ 0x79
 80063ce:	f7fa ffb1 	bl	8001334 <OPENBL_USART_SendByte>
    if (error_value == SUCCESS)
 80063d2:	79fb      	ldrb	r3, [r7, #7]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d101      	bne.n	80063dc <OPENBL_USART_WriteUnprotect+0x40>
      OPENBL_MEM_OptionBytesLaunch();
 80063d8:	f7ff fd3c 	bl	8005e54 <OPENBL_MEM_OptionBytesLaunch>
}
 80063dc:	bf00      	nop
 80063de:	3708      	adds	r7, #8
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <OPENBL_USART_GetAddress>:
/**
 * @brief  This function is used to get a valid address.
 * @retval Returns NACK status in case of error else returns ACK status.
 */
static uint8_t OPENBL_USART_GetAddress(uint32_t *Address)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 80063ec:	2300      	movs	r3, #0
 80063ee:	60bb      	str	r3, [r7, #8]
  uint8_t status;
  uint8_t xor;

  data[3] = OPENBL_USART_ReadByte();
 80063f0:	f7fa ff8c 	bl	800130c <OPENBL_USART_ReadByte>
 80063f4:	4603      	mov	r3, r0
 80063f6:	72fb      	strb	r3, [r7, #11]
  data[2] = OPENBL_USART_ReadByte();
 80063f8:	f7fa ff88 	bl	800130c <OPENBL_USART_ReadByte>
 80063fc:	4603      	mov	r3, r0
 80063fe:	72bb      	strb	r3, [r7, #10]
  data[1] = OPENBL_USART_ReadByte();
 8006400:	f7fa ff84 	bl	800130c <OPENBL_USART_ReadByte>
 8006404:	4603      	mov	r3, r0
 8006406:	727b      	strb	r3, [r7, #9]
  data[0] = OPENBL_USART_ReadByte();
 8006408:	f7fa ff80 	bl	800130c <OPENBL_USART_ReadByte>
 800640c:	4603      	mov	r3, r0
 800640e:	723b      	strb	r3, [r7, #8]

  xor = data[3] ^ data[2] ^ data[1] ^ data[0];
 8006410:	7afa      	ldrb	r2, [r7, #11]
 8006412:	7abb      	ldrb	r3, [r7, #10]
 8006414:	4053      	eors	r3, r2
 8006416:	b2da      	uxtb	r2, r3
 8006418:	7a7b      	ldrb	r3, [r7, #9]
 800641a:	4053      	eors	r3, r2
 800641c:	b2da      	uxtb	r2, r3
 800641e:	7a3b      	ldrb	r3, [r7, #8]
 8006420:	4053      	eors	r3, r2
 8006422:	73bb      	strb	r3, [r7, #14]

  /* Check the integrity of received data */
  if (OPENBL_USART_ReadByte() != xor)
 8006424:	f7fa ff72 	bl	800130c <OPENBL_USART_ReadByte>
 8006428:	4603      	mov	r3, r0
 800642a:	461a      	mov	r2, r3
 800642c:	7bbb      	ldrb	r3, [r7, #14]
 800642e:	4293      	cmp	r3, r2
 8006430:	d002      	beq.n	8006438 <OPENBL_USART_GetAddress+0x54>
  {
    status = NACK_BYTE;
 8006432:	231f      	movs	r3, #31
 8006434:	73fb      	strb	r3, [r7, #15]
 8006436:	e018      	b.n	800646a <OPENBL_USART_GetAddress+0x86>
  }
  else
  {
    *Address = ((uint32_t)data[3] << 24) | ((uint32_t)data[2] << 16) | ((uint32_t)data[1] << 8) | (uint32_t)data[0];
 8006438:	7afb      	ldrb	r3, [r7, #11]
 800643a:	061a      	lsls	r2, r3, #24
 800643c:	7abb      	ldrb	r3, [r7, #10]
 800643e:	041b      	lsls	r3, r3, #16
 8006440:	431a      	orrs	r2, r3
 8006442:	7a7b      	ldrb	r3, [r7, #9]
 8006444:	021b      	lsls	r3, r3, #8
 8006446:	4313      	orrs	r3, r2
 8006448:	7a3a      	ldrb	r2, [r7, #8]
 800644a:	431a      	orrs	r2, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	601a      	str	r2, [r3, #0]

    /* Check if received address is valid or not */
    if (OPENBL_MEM_GetAddressArea(*Address) == AREA_ERROR)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4618      	mov	r0, r3
 8006456:	f7ff fb59 	bl	8005b0c <OPENBL_MEM_GetAddressArea>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d102      	bne.n	8006466 <OPENBL_USART_GetAddress+0x82>
    {
      status = NACK_BYTE;
 8006460:	231f      	movs	r3, #31
 8006462:	73fb      	strb	r3, [r7, #15]
 8006464:	e001      	b.n	800646a <OPENBL_USART_GetAddress+0x86>
    }
    else
    {
      status = ACK_BYTE;
 8006466:	2379      	movs	r3, #121	@ 0x79
 8006468:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800646a:	7bfb      	ldrb	r3, [r7, #15]
}
 800646c:	4618      	mov	r0, r3
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <memset>:
 8006474:	4402      	add	r2, r0
 8006476:	4603      	mov	r3, r0
 8006478:	4293      	cmp	r3, r2
 800647a:	d100      	bne.n	800647e <memset+0xa>
 800647c:	4770      	bx	lr
 800647e:	f803 1b01 	strb.w	r1, [r3], #1
 8006482:	e7f9      	b.n	8006478 <memset+0x4>

08006484 <__libc_init_array>:
 8006484:	b570      	push	{r4, r5, r6, lr}
 8006486:	4d0d      	ldr	r5, [pc, #52]	@ (80064bc <__libc_init_array+0x38>)
 8006488:	4c0d      	ldr	r4, [pc, #52]	@ (80064c0 <__libc_init_array+0x3c>)
 800648a:	1b64      	subs	r4, r4, r5
 800648c:	10a4      	asrs	r4, r4, #2
 800648e:	2600      	movs	r6, #0
 8006490:	42a6      	cmp	r6, r4
 8006492:	d109      	bne.n	80064a8 <__libc_init_array+0x24>
 8006494:	4d0b      	ldr	r5, [pc, #44]	@ (80064c4 <__libc_init_array+0x40>)
 8006496:	4c0c      	ldr	r4, [pc, #48]	@ (80064c8 <__libc_init_array+0x44>)
 8006498:	f000 f818 	bl	80064cc <_init>
 800649c:	1b64      	subs	r4, r4, r5
 800649e:	10a4      	asrs	r4, r4, #2
 80064a0:	2600      	movs	r6, #0
 80064a2:	42a6      	cmp	r6, r4
 80064a4:	d105      	bne.n	80064b2 <__libc_init_array+0x2e>
 80064a6:	bd70      	pop	{r4, r5, r6, pc}
 80064a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80064ac:	4798      	blx	r3
 80064ae:	3601      	adds	r6, #1
 80064b0:	e7ee      	b.n	8006490 <__libc_init_array+0xc>
 80064b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80064b6:	4798      	blx	r3
 80064b8:	3601      	adds	r6, #1
 80064ba:	e7f2      	b.n	80064a2 <__libc_init_array+0x1e>
 80064bc:	08006554 	.word	0x08006554
 80064c0:	08006554 	.word	0x08006554
 80064c4:	08006554 	.word	0x08006554
 80064c8:	08006558 	.word	0x08006558

080064cc <_init>:
 80064cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ce:	bf00      	nop
 80064d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064d2:	bc08      	pop	{r3}
 80064d4:	469e      	mov	lr, r3
 80064d6:	4770      	bx	lr

080064d8 <_fini>:
 80064d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064da:	bf00      	nop
 80064dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064de:	bc08      	pop	{r3}
 80064e0:	469e      	mov	lr, r3
 80064e2:	4770      	bx	lr
